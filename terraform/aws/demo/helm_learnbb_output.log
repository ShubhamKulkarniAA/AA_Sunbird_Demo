history.go:56: 2025-05-26 20:58:03.014797149 +0000 UTC m=+1.389730590 [debug] getting history for release learnbb
Release "learnbb" does not exist. Installing it now.
install.go:225: 2025-05-26 20:58:03.021191585 +0000 UTC m=+1.396124965 [debug] Original chart version: ""
install.go:242: 2025-05-26 20:58:03.021226431 +0000 UTC m=+1.396159813 [debug] CHART PATH: /home/ubuntu/AA_Sunbird_Demo/helmcharts/learnbb

client.go:144: 2025-05-26 20:58:03.623462054 +0000 UTC m=+1.998395612 [debug] creating 1 resource(s)
install.go:175: 2025-05-26 20:58:03.682807616 +0000 UTC m=+2.057741005 [debug] CRD druids.druid.apache.org is already present. Skipping.
client.go:144: 2025-05-26 20:58:03.705646908 +0000 UTC m=+2.080580528 [debug] creating 1 resource(s)
install.go:175: 2025-05-26 20:58:03.763994427 +0000 UTC m=+2.138927788 [debug] CRD druids.druid.apache.org is already present. Skipping.
client.go:506: 2025-05-26 20:58:11.008930568 +0000 UTC m=+9.383863912 [debug] Starting delete for "learnbb-job-deleter" ServiceAccount
wait.go:114: 2025-05-26 20:58:11.017080218 +0000 UTC m=+9.392013593 [debug] beginning wait for 1 resources to be deleted with timeout of 5m0s
client.go:144: 2025-05-26 20:58:11.153205 +0000 UTC m=+9.528138425 [debug] creating 1 resource(s)
client.go:506: 2025-05-26 20:58:11.161990933 +0000 UTC m=+9.536924261 [debug] Starting delete for "learnbb-job-deleter-role" Role
wait.go:114: 2025-05-26 20:58:11.170021575 +0000 UTC m=+9.544954905 [debug] beginning wait for 1 resources to be deleted with timeout of 5m0s
client.go:144: 2025-05-26 20:58:11.264156995 +0000 UTC m=+9.639090485 [debug] creating 1 resource(s)
client.go:506: 2025-05-26 20:58:11.271590766 +0000 UTC m=+9.646524120 [debug] Starting delete for "learnbb-job-deleter-rolebinding" RoleBinding
wait.go:114: 2025-05-26 20:58:11.28006332 +0000 UTC m=+9.654996643 [debug] beginning wait for 1 resources to be deleted with timeout of 5m0s
client.go:144: 2025-05-26 20:58:11.369484703 +0000 UTC m=+9.744418099 [debug] creating 1 resource(s)
client.go:506: 2025-05-26 20:58:11.378992971 +0000 UTC m=+9.753926341 [debug] Starting delete for "learnbb-job-deleter" Job
wait.go:114: 2025-05-26 20:58:11.388569465 +0000 UTC m=+9.763506973 [debug] beginning wait for 1 resources to be deleted with timeout of 5m0s
client.go:144: 2025-05-26 20:58:11.483164671 +0000 UTC m=+9.858098129 [debug] creating 1 resource(s)
client.go:753: 2025-05-26 20:58:11.491638703 +0000 UTC m=+9.866572130 [debug] Watching for changes to Job learnbb-job-deleter with timeout of 5m0s
client.go:781: 2025-05-26 20:58:11.496876078 +0000 UTC m=+9.871809658 [debug] Add/Modify event for learnbb-job-deleter: ADDED
client.go:820: 2025-05-26 20:58:11.496899869 +0000 UTC m=+9.871833208 [debug] learnbb-job-deleter: Jobs active: 0, jobs failed: 0, jobs succeeded: 0
client.go:781: 2025-05-26 20:58:11.516538394 +0000 UTC m=+9.891471914 [debug] Add/Modify event for learnbb-job-deleter: MODIFIED
client.go:820: 2025-05-26 20:58:11.516565539 +0000 UTC m=+9.891498867 [debug] learnbb-job-deleter: Jobs active: 1, jobs failed: 0, jobs succeeded: 0
client.go:781: 2025-05-26 20:58:12.520348295 +0000 UTC m=+10.895281740 [debug] Add/Modify event for learnbb-job-deleter: MODIFIED
client.go:820: 2025-05-26 20:58:12.520390093 +0000 UTC m=+10.895323464 [debug] learnbb-job-deleter: Jobs active: 1, jobs failed: 0, jobs succeeded: 0
client.go:781: 2025-05-26 20:58:13.529195337 +0000 UTC m=+11.904128800 [debug] Add/Modify event for learnbb-job-deleter: MODIFIED
client.go:820: 2025-05-26 20:58:13.529232323 +0000 UTC m=+11.904165651 [debug] learnbb-job-deleter: Jobs active: 1, jobs failed: 0, jobs succeeded: 0
client.go:781: 2025-05-26 20:58:15.606965896 +0000 UTC m=+13.981899411 [debug] Add/Modify event for learnbb-job-deleter: MODIFIED
client.go:820: 2025-05-26 20:58:15.607003503 +0000 UTC m=+13.981936834 [debug] learnbb-job-deleter: Jobs active: 0, jobs failed: 0, jobs succeeded: 0
client.go:781: 2025-05-26 20:58:15.636432385 +0000 UTC m=+14.011365838 [debug] Add/Modify event for learnbb-job-deleter: MODIFIED
client.go:388: 2025-05-26 20:58:15.636567887 +0000 UTC m=+14.011501261 [debug] checking 187 resources for changes
client.go:409: 2025-05-26 20:58:15.649953212 +0000 UTC m=+14.024886599 [debug] Created a new ServiceAccount called "adminutil" in sunbird

client.go:409: 2025-05-26 20:58:15.663128619 +0000 UTC m=+14.038062011 [debug] Created a new ServiceAccount called "cassandra" in sunbird

client.go:409: 2025-05-26 20:58:15.673023832 +0000 UTC m=+14.047957258 [debug] Created a new ServiceAccount called "cert" in sunbird

client.go:409: 2025-05-26 20:58:15.683399087 +0000 UTC m=+14.058332443 [debug] Created a new ServiceAccount called "certificateapi" in sunbird

client.go:409: 2025-05-26 20:58:15.704509266 +0000 UTC m=+14.079442634 [debug] Created a new ServiceAccount called "certificatesign" in sunbird

client.go:409: 2025-05-26 20:58:15.714253019 +0000 UTC m=+14.089186397 [debug] Created a new ServiceAccount called "cert-registry" in sunbird

client.go:409: 2025-05-26 20:58:15.725311362 +0000 UTC m=+14.100244767 [debug] Created a new ServiceAccount called "learnbb-druid-operator" in sunbird

client.go:409: 2025-05-26 20:58:15.737676427 +0000 UTC m=+14.112609837 [debug] Created a new ServiceAccount called "obsrv-sa" in sunbird

client.go:409: 2025-05-26 20:58:15.748676859 +0000 UTC m=+14.123610256 [debug] Created a new ServiceAccount called "learnbb-flink" in sunbird

client.go:409: 2025-05-26 20:58:15.75994664 +0000 UTC m=+14.134879987 [debug] Created a new ServiceAccount called "groups" in sunbird

client.go:409: 2025-05-26 20:58:15.770944948 +0000 UTC m=+14.145878320 [debug] Created a new ServiceAccount called "kafka" in sunbird

client.go:409: 2025-05-26 20:58:15.783095221 +0000 UTC m=+14.158028675 [debug] Created a new ServiceAccount called "keycloak-kids-keys" in sunbird

client.go:409: 2025-05-26 20:58:15.794112951 +0000 UTC m=+14.169047023 [debug] Created a new ServiceAccount called "keycloak" in sunbird

client.go:409: 2025-05-26 20:58:15.810113748 +0000 UTC m=+14.185047234 [debug] Created a new ServiceAccount called "lms" in sunbird

client.go:409: 2025-05-26 20:58:15.831242907 +0000 UTC m=+14.206178024 [debug] Created a new ServiceAccount called "neo4j" in sunbird

client.go:409: 2025-05-26 20:58:15.843954105 +0000 UTC m=+14.218887442 [debug] Created a new ServiceAccount called "notification" in sunbird

client.go:409: 2025-05-26 20:58:15.858244064 +0000 UTC m=+14.233177471 [debug] Created a new ServiceAccount called "learnbb-print" in sunbird

client.go:409: 2025-05-26 20:58:15.870630716 +0000 UTC m=+14.245564143 [debug] Created a new ServiceAccount called "redis" in sunbird

client.go:409: 2025-05-26 20:58:15.881194362 +0000 UTC m=+14.256127753 [debug] Created a new ServiceAccount called "registry" in sunbird

client.go:409: 2025-05-26 20:58:15.894088257 +0000 UTC m=+14.269021648 [debug] Created a new ServiceAccount called "userorg" in sunbird

client.go:409: 2025-05-26 20:58:15.904740347 +0000 UTC m=+14.279673786 [debug] Created a new Secret called "cassandra" in sunbird

client.go:409: 2025-05-26 20:58:15.914695139 +0000 UTC m=+14.289628574 [debug] Created a new Secret called "postgresql" in sunbird

client.go:409: 2025-05-26 20:58:15.927033275 +0000 UTC m=+14.301966656 [debug] Created a new ConfigMap called "adminutil" in sunbird

client.go:409: 2025-05-26 20:58:15.940685472 +0000 UTC m=+14.315618924 [debug] Created a new ConfigMap called "adminutil-env" in sunbird

client.go:409: 2025-05-26 20:58:15.950514594 +0000 UTC m=+14.325447988 [debug] Created a new ConfigMap called "access-private-keys" in sunbird

client.go:409: 2025-05-26 20:58:15.962450816 +0000 UTC m=+14.337384184 [debug] Created a new ConfigMap called "mobile-devicev2-private-keys" in sunbird

client.go:409: 2025-05-26 20:58:15.978139408 +0000 UTC m=+14.353072776 [debug] Created a new ConfigMap called "desktop-devicev2-private-keys" in sunbird

client.go:409: 2025-05-26 20:58:15.99306811 +0000 UTC m=+14.368001483 [debug] Created a new ConfigMap called "portal-anonymous-private-keys" in sunbird

client.go:409: 2025-05-26 20:58:16.004112348 +0000 UTC m=+14.379045724 [debug] Created a new ConfigMap called "portal-loggedin-private-keys" in sunbird

client.go:409: 2025-05-26 20:58:16.015909772 +0000 UTC m=+14.390843179 [debug] Created a new ConfigMap called "cassandra-metrics-conf" in sunbird

client.go:409: 2025-05-26 20:58:16.028536543 +0000 UTC m=+14.403469928 [debug] Created a new ConfigMap called "cert" in sunbird

client.go:409: 2025-05-26 20:58:16.038731688 +0000 UTC m=+14.413665153 [debug] Created a new ConfigMap called "cert-env" in sunbird

client.go:409: 2025-05-26 20:58:16.048954055 +0000 UTC m=+14.423887504 [debug] Created a new ConfigMap called "certificateapi-env" in sunbird

client.go:409: 2025-05-26 20:58:16.059271426 +0000 UTC m=+14.434204892 [debug] Created a new ConfigMap called "certificatesign" in sunbird

client.go:409: 2025-05-26 20:58:16.070088893 +0000 UTC m=+14.445022279 [debug] Created a new ConfigMap called "certificatesign-env" in sunbird

client.go:409: 2025-05-26 20:58:16.094544179 +0000 UTC m=+14.469477630 [debug] Created a new ConfigMap called "cert-registry" in sunbird

client.go:409: 2025-05-26 20:58:16.108310457 +0000 UTC m=+14.483243885 [debug] Created a new ConfigMap called "cert-registry-env" in sunbird

client.go:409: 2025-05-26 20:58:16.123005569 +0000 UTC m=+14.497938937 [debug] Created a new ConfigMap called "cert-registry-opa" in sunbird

client.go:409: 2025-05-26 20:58:16.137333092 +0000 UTC m=+14.512266489 [debug] Created a new ConfigMap called "cert-registry-envoy" in sunbird

client.go:409: 2025-05-26 20:58:16.148963281 +0000 UTC m=+14.523896763 [debug] Created a new ConfigMap called "activity-aggregate-updater-config" in sunbird

client.go:409: 2025-05-26 20:58:16.161621971 +0000 UTC m=+14.536555374 [debug] Created a new ConfigMap called "assessment-aggregator-config" in sunbird

client.go:409: 2025-05-26 20:58:16.172464503 +0000 UTC m=+14.547397915 [debug] Created a new ConfigMap called "collection-cert-pre-processor-config" in sunbird

client.go:409: 2025-05-26 20:58:16.184491691 +0000 UTC m=+14.559425099 [debug] Created a new ConfigMap called "collection-certificate-generator-config" in sunbird

client.go:409: 2025-05-26 20:58:16.196326774 +0000 UTC m=+14.571260159 [debug] Created a new ConfigMap called "enrolment-reconciliation-config" in sunbird

client.go:409: 2025-05-26 20:58:16.206632692 +0000 UTC m=+14.581566068 [debug] Created a new ConfigMap called "legacy-certificate-migrator-config" in sunbird

client.go:409: 2025-05-26 20:58:16.216940659 +0000 UTC m=+14.591874106 [debug] Created a new ConfigMap called "merge-user-courses-config" in sunbird

client.go:409: 2025-05-26 20:58:16.230737194 +0000 UTC m=+14.605670638 [debug] Created a new ConfigMap called "notification-job-config" in sunbird

client.go:409: 2025-05-26 20:58:16.241133338 +0000 UTC m=+14.616066782 [debug] Created a new ConfigMap called "program-user-info-config" in sunbird

client.go:409: 2025-05-26 20:58:16.252542304 +0000 UTC m=+14.627475702 [debug] Created a new ConfigMap called "relation-cache-updater-config" in sunbird

client.go:409: 2025-05-26 20:58:16.265085406 +0000 UTC m=+14.640018890 [debug] Created a new ConfigMap called "user-deletion-cleanup-config" in sunbird

client.go:409: 2025-05-26 20:58:16.273363182 +0000 UTC m=+14.648296555 [debug] Created a new ConfigMap called "groups" in sunbird

client.go:409: 2025-05-26 20:58:16.283830431 +0000 UTC m=+14.658763826 [debug] Created a new ConfigMap called "groups-env" in sunbird

client.go:409: 2025-05-26 20:58:16.294226852 +0000 UTC m=+14.669160271 [debug] Created a new ConfigMap called "groups-access-keys" in sunbird

client.go:409: 2025-05-26 20:58:16.304134124 +0000 UTC m=+14.679067489 [debug] Created a new ConfigMap called "zookeeper-scripts" in sunbird

client.go:409: 2025-05-26 20:58:16.314180665 +0000 UTC m=+14.689114034 [debug] Created a new ConfigMap called "kafka-scripts" in sunbird

client.go:409: 2025-05-26 20:58:16.326099916 +0000 UTC m=+14.701033302 [debug] Created a new ConfigMap called "keycloak-kids-keys-env" in sunbird

client.go:409: 2025-05-26 20:58:16.349467493 +0000 UTC m=+14.724401014 [debug] Created a new ConfigMap called "keycloak" in sunbird

client.go:409: 2025-05-26 20:58:16.358849559 +0000 UTC m=+14.733782955 [debug] Created a new ConfigMap called "keycloak-env" in sunbird

client.go:409: 2025-05-26 20:58:16.371546564 +0000 UTC m=+14.746479976 [debug] Created a new ConfigMap called "lms" in sunbird

client.go:409: 2025-05-26 20:58:16.389084818 +0000 UTC m=+14.764018257 [debug] Created a new ConfigMap called "lms-env" in sunbird

client.go:409: 2025-05-26 20:58:16.40171135 +0000 UTC m=+14.776644885 [debug] Created a new ConfigMap called "lms-opa" in sunbird

client.go:409: 2025-05-26 20:58:16.413915433 +0000 UTC m=+14.788848807 [debug] Created a new ConfigMap called "lms-envoy" in sunbird

client.go:409: 2025-05-26 20:58:16.428811374 +0000 UTC m=+14.803744753 [debug] Created a new ConfigMap called "lms-access-keys" in sunbird

client.go:409: 2025-05-26 20:58:16.43881811 +0000 UTC m=+14.813751499 [debug] Created a new ConfigMap called "logstash-config" in sunbird

client.go:409: 2025-05-26 20:58:16.451779806 +0000 UTC m=+14.826713156 [debug] Created a new ConfigMap called "notification" in sunbird

client.go:409: 2025-05-26 20:58:16.464725742 +0000 UTC m=+14.839659140 [debug] Created a new ConfigMap called "notification-env" in sunbird

client.go:409: 2025-05-26 20:58:16.477068413 +0000 UTC m=+14.852001853 [debug] Created a new ConfigMap called "notification-opa" in sunbird

client.go:409: 2025-05-26 20:58:16.48923533 +0000 UTC m=+14.864168708 [debug] Created a new ConfigMap called "notification-envoy" in sunbird

client.go:409: 2025-05-26 20:58:16.497410586 +0000 UTC m=+14.872343961 [debug] Created a new ConfigMap called "notification-access-keys" in sunbird

client.go:409: 2025-05-26 20:58:16.506597743 +0000 UTC m=+14.881531152 [debug] Created a new ConfigMap called "learnbb-print" in sunbird

client.go:409: 2025-05-26 20:58:16.51796077 +0000 UTC m=+14.892894183 [debug] Created a new ConfigMap called "learnbb-print-env" in sunbird

client.go:409: 2025-05-26 20:58:16.52782378 +0000 UTC m=+14.902757129 [debug] Created a new ConfigMap called "redis-configuration" in sunbird

client.go:409: 2025-05-26 20:58:16.539889597 +0000 UTC m=+14.914823023 [debug] Created a new ConfigMap called "redis-health" in sunbird

client.go:409: 2025-05-26 20:58:16.551348555 +0000 UTC m=+14.926281954 [debug] Created a new ConfigMap called "redis-scripts" in sunbird

client.go:409: 2025-05-26 20:58:16.563424446 +0000 UTC m=+14.938357875 [debug] Created a new ConfigMap called "registry" in sunbird

client.go:409: 2025-05-26 20:58:16.575032398 +0000 UTC m=+14.949965798 [debug] Created a new ConfigMap called "registry-env" in sunbird

client.go:409: 2025-05-26 20:58:16.58780769 +0000 UTC m=+14.962741111 [debug] Created a new ConfigMap called "userorg" in sunbird

client.go:409: 2025-05-26 20:58:16.600429123 +0000 UTC m=+14.975362549 [debug] Created a new ConfigMap called "userorg-env" in sunbird

client.go:409: 2025-05-26 20:58:16.612567525 +0000 UTC m=+14.987501078 [debug] Created a new ConfigMap called "userorg-opa" in sunbird

client.go:409: 2025-05-26 20:58:16.626054532 +0000 UTC m=+15.000987870 [debug] Created a new ConfigMap called "userorg-envoy" in sunbird

client.go:409: 2025-05-26 20:58:16.647010066 +0000 UTC m=+15.021943437 [debug] Created a new ConfigMap called "userorg-access-keys" in sunbird

client.go:409: 2025-05-26 20:58:16.659015269 +0000 UTC m=+15.033948650 [debug] Created a new ConfigMap called "keycloak-kids-keys" in sunbird

client.go:725: 2025-05-26 20:58:16.667673305 +0000 UTC m=+15.042606887 [debug] Looks like there are no changes for PersistentVolumeClaim "neo4j-claim"
client.go:409: 2025-05-26 20:58:16.681474109 +0000 UTC m=+15.056407517 [debug] Created a new ClusterRole called "learnbb-druid-operator" in 

client.go:409: 2025-05-26 20:58:16.690843854 +0000 UTC m=+15.065777236 [debug] Created a new ClusterRoleBinding called "learnbb-druid-operator" in 

client.go:409: 2025-05-26 20:58:16.703129388 +0000 UTC m=+15.078062776 [debug] Created a new Role called "keycloak-kids-keys-role" in sunbird

client.go:409: 2025-05-26 20:58:16.711838793 +0000 UTC m=+15.086772191 [debug] Created a new RoleBinding called "keycloak-kids-keys-rolebinding" in sunbird

client.go:409: 2025-05-26 20:58:16.73070392 +0000 UTC m=+15.105637299 [debug] Created a new Service called "adminutil" in sunbird

client.go:409: 2025-05-26 20:58:16.742841465 +0000 UTC m=+15.117774865 [debug] Created a new Service called "cassandra-headless" in sunbird

client.go:409: 2025-05-26 20:58:16.762690811 +0000 UTC m=+15.137624178 [debug] Created a new Service called "cassandra" in sunbird

client.go:409: 2025-05-26 20:58:16.783435195 +0000 UTC m=+15.158368639 [debug] Created a new Service called "cert-service" in sunbird

client.go:409: 2025-05-26 20:58:16.80321407 +0000 UTC m=+15.178147546 [debug] Created a new Service called "certificateapi-service" in sunbird

client.go:409: 2025-05-26 20:58:16.827081375 +0000 UTC m=+15.202014763 [debug] Created a new Service called "certificatesign-service" in sunbird

client.go:409: 2025-05-26 20:58:16.850572217 +0000 UTC m=+15.225505606 [debug] Created a new Service called "cert-registry-service" in sunbird

client.go:409: 2025-05-26 20:58:16.874393965 +0000 UTC m=+15.249327440 [debug] Created a new Service called "elasticsearch-master-hl" in sunbird

client.go:409: 2025-05-26 20:58:16.897094999 +0000 UTC m=+15.272028395 [debug] Created a new Service called "elasticsearch" in sunbird

client.go:409: 2025-05-26 20:58:16.913209758 +0000 UTC m=+15.288143153 [debug] Created a new Service called "activity-aggregate-updater-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:16.926068133 +0000 UTC m=+15.301001473 [debug] Created a new Service called "activity-aggregate-updater-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:16.944828392 +0000 UTC m=+15.319761750 [debug] Created a new Service called "assessment-aggregator-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:16.959546492 +0000 UTC m=+15.334479877 [debug] Created a new Service called "assessment-aggregator-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:16.975844798 +0000 UTC m=+15.350778177 [debug] Created a new Service called "collection-cert-pre-processor-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:16.99228494 +0000 UTC m=+15.367218325 [debug] Created a new Service called "collection-cert-pre-processor-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.004106189 +0000 UTC m=+15.379039580 [debug] Created a new Service called "collection-certificate-generator-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.015834912 +0000 UTC m=+15.390768309 [debug] Created a new Service called "collection-certificate-generator-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.031751317 +0000 UTC m=+15.406684755 [debug] Created a new Service called "enrolment-reconciliation-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.04782322 +0000 UTC m=+15.422756627 [debug] Created a new Service called "enrolment-reconciliation-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.060452084 +0000 UTC m=+15.435385475 [debug] Created a new Service called "legacy-certificate-migrator-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.075504923 +0000 UTC m=+15.450438309 [debug] Created a new Service called "legacy-certificate-migrator-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.088944555 +0000 UTC m=+15.463877960 [debug] Created a new Service called "merge-user-courses-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.098742494 +0000 UTC m=+15.473675880 [debug] Created a new Service called "merge-user-courses-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.112133309 +0000 UTC m=+15.487066693 [debug] Created a new Service called "notification-job-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.127159739 +0000 UTC m=+15.502093110 [debug] Created a new Service called "notification-job-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.138095429 +0000 UTC m=+15.513028820 [debug] Created a new Service called "program-user-info-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.154291565 +0000 UTC m=+15.529224988 [debug] Created a new Service called "program-user-info-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.173530269 +0000 UTC m=+15.548463644 [debug] Created a new Service called "relation-cache-updater-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.188255923 +0000 UTC m=+15.563189291 [debug] Created a new Service called "relation-cache-updater-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.198594175 +0000 UTC m=+15.573527589 [debug] Created a new Service called "user-deletion-cleanup-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.210020743 +0000 UTC m=+15.584954152 [debug] Created a new Service called "user-deletion-cleanup-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.234726729 +0000 UTC m=+15.609660172 [debug] Created a new Service called "groups-service" in sunbird

client.go:409: 2025-05-26 20:58:17.248154848 +0000 UTC m=+15.623088289 [debug] Created a new Service called "zookeeper-headless" in sunbird

client.go:409: 2025-05-26 20:58:17.27024501 +0000 UTC m=+15.645178536 [debug] Created a new Service called "zookeeper" in sunbird

client.go:409: 2025-05-26 20:58:17.28779231 +0000 UTC m=+15.662725698 [debug] Created a new Service called "kafka-headless" in sunbird

client.go:409: 2025-05-26 20:58:17.304862562 +0000 UTC m=+15.679795948 [debug] Created a new Service called "kafka" in sunbird

client.go:409: 2025-05-26 20:58:17.328822767 +0000 UTC m=+15.703756149 [debug] Created a new Service called "keycloak" in sunbird

client.go:409: 2025-05-26 20:58:17.352540049 +0000 UTC m=+15.727473429 [debug] Created a new Service called "lms-service" in sunbird

client.go:409: 2025-05-26 20:58:17.374897503 +0000 UTC m=+15.749830992 [debug] Created a new Service called "neo4j" in sunbird

client.go:409: 2025-05-26 20:58:17.401114684 +0000 UTC m=+15.776048099 [debug] Created a new Service called "notification-service" in sunbird

client.go:409: 2025-05-26 20:58:17.414209239 +0000 UTC m=+15.789142622 [debug] Created a new Service called "postgresql-headless" in sunbird

client.go:409: 2025-05-26 20:58:17.447540292 +0000 UTC m=+15.822473663 [debug] Created a new Service called "postgresql" in sunbird

client.go:409: 2025-05-26 20:58:17.472648139 +0000 UTC m=+15.847581619 [debug] Created a new Service called "learnbb-print" in sunbird

client.go:409: 2025-05-26 20:58:17.492772317 +0000 UTC m=+15.867705709 [debug] Created a new Service called "redis-headless" in sunbird

client.go:409: 2025-05-26 20:58:17.526323089 +0000 UTC m=+15.901256477 [debug] Created a new Service called "redis-master" in sunbird

client.go:409: 2025-05-26 20:58:17.572702423 +0000 UTC m=+15.947635822 [debug] Created a new Service called "redis-replicas" in sunbird

client.go:409: 2025-05-26 20:58:17.597188272 +0000 UTC m=+15.972121682 [debug] Created a new Service called "registry-service" in sunbird

client.go:409: 2025-05-26 20:58:17.628913715 +0000 UTC m=+16.003847096 [debug] Created a new Service called "userorg-service" in sunbird

client.go:409: 2025-05-26 20:58:17.650940718 +0000 UTC m=+16.025874101 [debug] Created a new Deployment called "adminutil" in sunbird

client.go:409: 2025-05-26 20:58:17.675036488 +0000 UTC m=+16.049969945 [debug] Created a new Deployment called "cert" in sunbird

client.go:409: 2025-05-26 20:58:17.696341026 +0000 UTC m=+16.071274410 [debug] Created a new Deployment called "certificateapi" in sunbird

client.go:409: 2025-05-26 20:58:17.72118874 +0000 UTC m=+16.096122169 [debug] Created a new Deployment called "certificatesign" in sunbird

client.go:409: 2025-05-26 20:58:17.743683295 +0000 UTC m=+16.118616676 [debug] Created a new Deployment called "cert-registry" in sunbird

client.go:409: 2025-05-26 20:58:17.774484045 +0000 UTC m=+16.149417438 [debug] Created a new Deployment called "learnbb-druid-operator" in sunbird

client.go:409: 2025-05-26 20:58:17.808601081 +0000 UTC m=+16.183534471 [debug] Created a new Deployment called "activity-aggregate-updater-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.846773716 +0000 UTC m=+16.221707107 [debug] Created a new Deployment called "activity-aggregate-updater-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.872286701 +0000 UTC m=+16.247220087 [debug] Created a new Deployment called "assessment-aggregator-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.915384677 +0000 UTC m=+16.290318067 [debug] Created a new Deployment called "assessment-aggregator-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.932418874 +0000 UTC m=+16.307352272 [debug] Created a new Deployment called "collection-cert-pre-processor-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.951905027 +0000 UTC m=+16.326838416 [debug] Created a new Deployment called "collection-cert-pre-processor-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:17.992450605 +0000 UTC m=+16.367384056 [debug] Created a new Deployment called "collection-certificate-generator-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.031046696 +0000 UTC m=+16.405980086 [debug] Created a new Deployment called "collection-certificate-generator-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.048544971 +0000 UTC m=+16.423478452 [debug] Created a new Deployment called "enrolment-reconciliation-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.070004423 +0000 UTC m=+16.444937823 [debug] Created a new Deployment called "enrolment-reconciliation-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.084183741 +0000 UTC m=+16.459117201 [debug] Created a new Deployment called "legacy-certificate-migrator-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.100733485 +0000 UTC m=+16.475667087 [debug] Created a new Deployment called "legacy-certificate-migrator-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.120244322 +0000 UTC m=+16.495177720 [debug] Created a new Deployment called "merge-user-courses-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.141340145 +0000 UTC m=+16.516273603 [debug] Created a new Deployment called "merge-user-courses-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.165760979 +0000 UTC m=+16.540694377 [debug] Created a new Deployment called "notification-job-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.180217395 +0000 UTC m=+16.555150801 [debug] Created a new Deployment called "notification-job-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.195306174 +0000 UTC m=+16.570239569 [debug] Created a new Deployment called "program-user-info-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.209796377 +0000 UTC m=+16.584729839 [debug] Created a new Deployment called "program-user-info-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.227139194 +0000 UTC m=+16.602072672 [debug] Created a new Deployment called "relation-cache-updater-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.242105617 +0000 UTC m=+16.617039002 [debug] Created a new Deployment called "relation-cache-updater-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.259923549 +0000 UTC m=+16.634857009 [debug] Created a new Deployment called "user-deletion-cleanup-taskmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.275323484 +0000 UTC m=+16.650256875 [debug] Created a new Deployment called "user-deletion-cleanup-jobmanager" in sunbird

client.go:409: 2025-05-26 20:58:18.291077421 +0000 UTC m=+16.666010807 [debug] Created a new Deployment called "groups" in sunbird

client.go:409: 2025-05-26 20:58:18.318364056 +0000 UTC m=+16.693297507 [debug] Created a new Deployment called "keycloak" in sunbird

client.go:409: 2025-05-26 20:58:18.34373252 +0000 UTC m=+16.718667718 [debug] Created a new Deployment called "lms" in sunbird

client.go:409: 2025-05-26 20:58:18.358971837 +0000 UTC m=+16.733905349 [debug] Created a new Deployment called "neo4j" in sunbird

client.go:409: 2025-05-26 20:58:18.380178819 +0000 UTC m=+16.755112233 [debug] Created a new Deployment called "notification" in sunbird

client.go:409: 2025-05-26 20:58:18.395327742 +0000 UTC m=+16.770261137 [debug] Created a new Deployment called "learnbb-print" in sunbird

client.go:409: 2025-05-26 20:58:18.415532812 +0000 UTC m=+16.790466260 [debug] Created a new Deployment called "registry" in sunbird

client.go:409: 2025-05-26 20:58:18.445355952 +0000 UTC m=+16.820289454 [debug] Created a new Deployment called "userorg" in sunbird

client.go:409: 2025-05-26 20:58:18.474322943 +0000 UTC m=+16.849256344 [debug] Created a new StatefulSet called "cassandra" in sunbird

client.go:409: 2025-05-26 20:58:18.495671703 +0000 UTC m=+16.870605162 [debug] Created a new StatefulSet called "elasticsearch-master" in sunbird

client.go:409: 2025-05-26 20:58:18.521308276 +0000 UTC m=+16.896241672 [debug] Created a new StatefulSet called "zookeeper" in sunbird

client.go:409: 2025-05-26 20:58:18.560785218 +0000 UTC m=+16.935718635 [debug] Created a new StatefulSet called "kafka" in sunbird

client.go:409: 2025-05-26 20:58:18.597113662 +0000 UTC m=+16.972047111 [debug] Created a new StatefulSet called "postgresql" in sunbird

client.go:409: 2025-05-26 20:58:18.636308322 +0000 UTC m=+17.011241779 [debug] Created a new StatefulSet called "redis-master" in sunbird

client.go:409: 2025-05-26 20:58:18.668268028 +0000 UTC m=+17.043201451 [debug] Created a new StatefulSet called "redis-replicas" in sunbird

client.go:409: 2025-05-26 20:58:18.692863793 +0000 UTC m=+17.067797193 [debug] Created a new Job called "keycloak-kids-keys" in sunbird

client.go:409: 2025-05-26 20:58:18.731422961 +0000 UTC m=+17.106356364 [debug] Created a new Job called "learnbb-cassandra-migration-job" in sunbird

client.go:409: 2025-05-26 20:58:18.764838505 +0000 UTC m=+17.139771971 [debug] Created a new Job called "learnbb-elasticsearch-migration-job" in sunbird

client.go:409: 2025-05-26 20:58:18.843658233 +0000 UTC m=+17.218591672 [debug] Created a new Job called "learnbb-postgres-migration-job" in sunbird

client.go:725: 2025-05-26 20:58:18.903887308 +0000 UTC m=+17.278820877 [debug] Looks like there are no changes for Druid "raw"
client.go:409: 2025-05-26 20:58:18.942592922 +0000 UTC m=+17.317526350 [debug] Created a new ServiceMonitor called "certregistry-servicemonitor" in sunbird

client.go:409: 2025-05-26 20:58:18.962468165 +0000 UTC m=+17.337401614 [debug] Created a new ServiceMonitor called "lms-servicemonitor" in sunbird

client.go:409: 2025-05-26 20:58:18.989428548 +0000 UTC m=+17.364361967 [debug] Created a new ServiceMonitor called "notification-servicemonitor" in sunbird

client.go:409: 2025-05-26 20:58:19.025875739 +0000 UTC m=+17.400809170 [debug] Created a new ServiceMonitor called "userorg-servicemonitor" in sunbird

NAME: learnbb
LAST DEPLOYED: Mon May 26 20:58:03 2025
NAMESPACE: sunbird
STATUS: deployed
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
cassandra:
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  enabled: true
  extraEnvVars:
  - name: CASSANDRA_AUTHENTICATOR
    value: AllowAllAuthenticator
  - name: CASSANDRA_AUTHORIZER
    value: AllowAllAuthorizer
  fullnameOverride: cassandra
  host: cassandra
  image:
    tag: 3.11.13-debian-11-r3
  nameOverride: cassandra
  persistence:
    size: 25Gi
  port: 9042
  provisioning:
    annotations:
      helm.sh/hook-weight: "-4"
cassandra_migration_version: release-5.3.0
certregistry:
  opa_enabled: true
devops_release_branch: release-7.0.0
druid:
  brokerhost: druid-raw-brokers
  brokerport: 8082
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  coordinatorhost: druid-raw-coordinators
  coordinatorport: 8081
  enabled: true
  fullnameOverride: druid
  host: druid-raw-routers
  overlordhost: druid-raw-overlords
  overlordport: 8090
  persistence:
    size: 25Gi
  port: 8888
elasticsearch:
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  coordinating:
    replicaCount: 0
  data:
    replicaCount: 0
  enabled: true
  fullnameOverride: elasticsearch
  host: elasticsearch
  image:
    registry: docker.io
    repository: bitnami/elasticsearch
    tag: 6.8.23
  ingest:
    enabled: false
  master:
    heapSize: 2G
    masterOnly: false
    persistence:
      size: 25Gi
    replicaCount: 1
    resources:
      limits:
        cpu: "2"
        memory: 4Gi
      requests:
        cpu: "1"
        memory: 2Gi
  port: 9200
  provisioning:
    annotations:
      helm.sh/hook-weight: "-4"
  sysctlImage:
    registry: docker.io
    repository: bitnami/bitnami-shell-archived
    tag: 11-debian-11-r54
global:
  cassandra:
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    enabled: true
    extraEnvVars:
    - name: CASSANDRA_AUTHENTICATOR
      value: AllowAllAuthenticator
    - name: CASSANDRA_AUTHORIZER
      value: AllowAllAuthorizer
    fullnameOverride: cassandra
    host: cassandra
    image:
      tag: 3.11.13-debian-11-r3
    nameOverride: cassandra
    persistence:
      size: 25Gi
    port: 9042
    provisioning:
      annotations:
        helm.sh/hook-weight: "-4"
  druid:
    brokerhost: druid-raw-brokers
    brokerport: 8082
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    coordinatorhost: druid-raw-coordinators
    coordinatorport: 8081
    enabled: true
    fullnameOverride: druid
    host: druid-raw-routers
    overlordhost: druid-raw-overlords
    overlordport: 8090
    persistence:
      size: 25Gi
    port: 8888
  elasticsearch:
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    coordinating:
      replicaCount: 0
    data:
      replicaCount: 0
    enabled: true
    fullnameOverride: elasticsearch
    host: elasticsearch
    image:
      registry: docker.io
      repository: bitnami/elasticsearch
      tag: 6.8.23
    ingest:
      enabled: false
    master:
      heapSize: 2G
      masterOnly: false
      persistence:
        size: 25Gi
      replicaCount: 1
      resources:
        limits:
          cpu: "2"
          memory: 4Gi
        requests:
          cpu: "1"
          memory: 2Gi
    port: 9200
    provisioning:
      annotations:
        helm.sh/hook-weight: "-4"
    sysctlImage:
      registry: docker.io
      repository: bitnami/bitnami-shell-archived
      tag: 11-debian-11-r54
  kafka:
    clientProtocol: PLAINTEXT
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    enabled: true
    fullnameOverride: kafka
    host: kafka
    image:
      registry: docker.io
      repository: bitnami/kafka
      tag: 3.3.1-debian-11-r25
    persistence:
      size: 25Gi
    port: 9092
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  keycloak_key_configmap: keycloak-key
  keycloak_kid_keys_configmap: keycloak-kids-keys
  kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
  neo4j:
    boltPort: 8687
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    enabled: true
    host: neo4j
    image:
      repository: sunbirded.azurecr.io/neo4j
      tag: 3.3.0
    port: 7687
    provisioning:
      annotations:
        helm.sh/hook-weight: "-4"
    shard_id: 1
  postgresql:
    databases:
    - name: keycloak
    - name: quartz
    - name: userorg
    - name: enc-keys
    - name: registry
    enabled: true
    fullnameOverride: postgresql
    host: postgresql
    persistence:
      size: 25Gi
    port: 5432
    postgresqlPassword: postgres
    postgresqlUsername: postgres
    provisioning:
      annotations:
        helm.sh/hook-weight: "-4"
  provisioningAnnotations:
    helm.sh/hook-weight: "-4"
  redis:
    auth:
      enabled: false
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    enabled: true
    fullnameOverride: redis
    host: redis-master
    master:
      persistence:
        size: 25Gi
    port: 6379
    replica:
      replicaCount: 0
  zookeeper:
    fullnameOverride: zookeeper
    host: zookeeper
    nameOverride: zookeeper
    persistence:
      size: 2Gi
    port: 2181
kafka:
  clientProtocol: PLAINTEXT
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  enabled: true
  fullnameOverride: kafka
  host: kafka
  image:
    registry: docker.io
    repository: bitnami/kafka
    tag: 3.3.1-debian-11-r25
  persistence:
    size: 25Gi
  port: 9092
  zookeeper:
    fullnameOverride: zookeeper
    host: zookeeper
    nameOverride: zookeeper
    persistence:
      size: 2Gi
    port: 2181
lms:
  opa_enabled: true
migration:
  cassandra:
    jarUrl: https://github.com/user/repo/releases/download/v1.0/migration.jar
    waitTime: 120
  elasticsearch:
    waitTime: 120
  postgresql:
    waitTime: 120
neo4j:
  boltPort: 8687
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  enabled: true
  host: neo4j
  image:
    repository: sunbirded.azurecr.io/neo4j
    tag: 3.3.0
  port: 7687
  provisioning:
    annotations:
      helm.sh/hook-weight: "-4"
  shard_id: 1
notification:
  opa_enabled: true
postgres_migration_image: bitnami/postgresql:11.14.0-debian-10-r49
postgresql:
  databases:
  - name: keycloak
  - name: quartz
  - name: userorg
  - name: enc-keys
  - name: registry
  enabled: true
  fullnameOverride: postgresql
  host: postgresql
  persistence:
    size: 25Gi
  port: 5432
  postgresqlPassword: postgres
  postgresqlUsername: postgres
  provisioning:
    annotations:
      helm.sh/hook-weight: "-4"
provisioningAnnotations:
  helm.sh/hook-weight: "-4"
redis:
  auth:
    enabled: false
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  enabled: true
  fullnameOverride: redis
  host: redis-master
  master:
    persistence:
      size: 25Gi
  port: 6379
  replica:
    replicaCount: 0
registry:
  opa_enabled: false
userorg:
  opa_enabled: true
zookeeper:
  fullnameOverride: zookeeper
  host: zookeeper
  nameOverride: zookeeper
  persistence:
    size: 2Gi
  port: 2181

COMPUTED VALUES:
adminutils:
  ACCESS_TOKEN_VALIDITY: 86400
  AM_ADMIN_API_ACCESS_BASEPATH: /keys/
  AM_ADMIN_API_ACCESS_KEYCOUNT: 2
  AM_ADMIN_API_ACCESS_KEYPREFIX: access_v1_key
  AM_ADMIN_API_ACCESS_KEYSTART: 1
  AM_ADMIN_API_DESKTOP_DEVICE_BASEPATH: /keys/
  AM_ADMIN_API_DESKTOP_DEVICE_KEYCOUNT: 2
  AM_ADMIN_API_DESKTOP_DEVICE_KEYPREFIX: desktop_devicev2_key
  AM_ADMIN_API_DESKTOP_DEVICE_KEYSTART: 1
  AM_ADMIN_API_ENDPOINT: http://kong:8001
  AM_ADMIN_API_KEYS: mobile_device,desktop_device,portal_anonymous,portal_loggedin,access
  AM_ADMIN_API_MOBILE_DEVICE_BASEPATH: /keys/
  AM_ADMIN_API_MOBILE_DEVICE_KEYCOUNT: 2
  AM_ADMIN_API_MOBILE_DEVICE_KEYPREFIX: mobile_devicev2_key
  AM_ADMIN_API_MOBILE_DEVICE_KEYSTART: 1
  AM_ADMIN_API_PORTAL_ANONYMOUS_BASEPATH: /keys/
  AM_ADMIN_API_PORTAL_ANONYMOUS_KEYCOUNT: 2
  AM_ADMIN_API_PORTAL_ANONYMOUS_KEYPREFIX: portal_anonymous_key
  AM_ADMIN_API_PORTAL_ANONYMOUS_KEYSTART: 1
  AM_ADMIN_API_PORTAL_LOGGEDIN_BASEPATH: /keys/
  AM_ADMIN_API_PORTAL_LOGGEDIN_KEYCOUNT: 2
  AM_ADMIN_API_PORTAL_LOGGEDIN_KEYPREFIX: portal_loggedin_key
  AM_ADMIN_API_PORTAL_LOGGEDIN_KEYSTART: 1
  DEFAULT_CONSUMER_GROUP: contentUser
  EMBED_ROLE: true
  ENDPOINTS_HEALTH_ID: apihealth
  ENDPOINTS_HEALTH_SENSITIVE: false
  ENDPOINTS_METRICS_ID: metrics
  ENDPOINTS_METRICS_SENSITIVE: false
  JAVA_OPTS: -Xms256m -Xmx256m
  LEARNER_BASE_API_URL: http://kong:8000
  REFRESH_TOKEN_LOG_OLDER_THAN: 30
  REFRESH_TOKEN_OFFLINE_VALIDITY: 15552000
  REFRESH_TOKEN_PRELOAD: true
  REFRESH_TOKEN_PUBLIC_BASEPATH: /keycloak-keys/
  REFRESH_TOKEN_PUBLIC_KEYPREFIX: KEYCLOAK_PUBLIC_KEY
  SERVER_PORT: 4000
  SPRING_PROFILES_ACTIVE: production
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /config
  fullnameOverride: adminutil
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/adminutil
    tag: release-4.5.0_RC3_68b1eaa_61
  ingress: {}
  initContainers: {}
  livenessProbe:
    failureThreshold: 5
    httpGet:
      path: /health
      port: 4000
    initialDelaySeconds: 15
    periodSeconds: 15
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe:
    failureThreshold: 5
    httpGet:
      path: /health
      port: 4000
    initialDelaySeconds: 15
    periodSeconds: 15
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1G
    requests:
      cpu: 256m
      memory: 500M
  securityContext: {}
  service:
    ports:
    - name: http
      port: 4000
      targetPort: 4000
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  sidecars: {}
  tolerations: []
cassandra:
  affinity: {}
  args: []
  cluster:
    clientEncryption: false
    datacenter: dc1
    enableUDF: false
    endpointSnitch: SimpleSnitch
    extraSeeds: []
    internodeEncryption: none
    name: cassandra
    numTokens: 256
    rack: rack1
    seedCount: 1
  clusterDomain: cluster.local
  command: []
  common:
    exampleValue: common-chart
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      imagePullSecrets: []
      imageRegistry: ""
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      storageClass: ""
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  commonLabels: {}
  containerPorts:
    cql: 9042
    intra: 7000
    jmx: 7199
    tls: 7001
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  dbUser:
    existingSecret: ""
    forcePassword: false
    password: ""
    user: cassandra
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  existingConfiguration: ""
  extraDeploy: []
  extraEnvVars:
  - name: CASSANDRA_AUTHENTICATOR
    value: AllowAllAuthenticator
  - name: CASSANDRA_AUTHORIZER
    value: AllowAllAuthorizer
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: cassandra
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    imagePullSecrets: []
    imageRegistry: ""
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    storageClass: ""
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  host: cassandra
  hostAliases: []
  hostNetwork: false
  hostPorts:
    cql: ""
    intra: ""
    jmx: ""
    tls: ""
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/cassandra
    tag: 3.11.13-debian-11-r3
  initContainers: []
  initDBConfigMap: ""
  initDBSecret: ""
  jvm:
    extraOpts: ""
    maxHeapSize: ""
    newHeapSize: ""
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 60
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 30
  metrics:
    configuration: |
      host: localhost:{{ .Values.containerPorts.jmx }}
      ssl: False
      user:
      password:
      listenPort: {{ .Values.metrics.containerPorts.http }}
      blacklist:
        # To profile the duration of jmx call you can start the program with the following options
        # > java -Dorg.slf4j.simpleLogger.defaultLogLevel=trace -jar cassandra_exporter.jar config.yml --oneshot
        #
        # To get intuition of what is done by cassandra when something is called you can look in cassandra
        # https://github.com/apache/cassandra/tree/trunk/src/java/org/apache/cassandra/metrics
        # Please avoid to scrape frequently those calls that are iterating over all sstables

        # Unaccessible metrics (not enough privilege)
        - java:lang:memorypool:.*usagethreshold.*

        # Leaf attributes not interesting for us but that are presents in many path
        - .*:999thpercentile
        - .*:95thpercentile
        - .*:fifteenminuterate
        - .*:fiveminuterate
        - .*:durationunit
        - .*:rateunit
        - .*:stddev
        - .*:meanrate
        - .*:mean
        - .*:min

        # Path present in many metrics but uninterresting
        - .*:viewlockacquiretime:.*
        - .*:viewreadtime:.*
        - .*:cas[a-z]+latency:.*
        - .*:colupdatetimedeltahistogram:.*

        # Mostly for RPC, do not scrap them
        - org:apache:cassandra:db:.*

        # columnfamily is an alias for Table metrics
        # https://github.com/apache/cassandra/blob/8b3a60b9a7dbefeecc06bace617279612ec7092d/src/java/org/apache/cassandra/metrics/TableMetrics.java#L162
        - org:apache:cassandra:metrics:columnfamily:.*

        # Should we export metrics for system keyspaces/tables ?
        - org:apache:cassandra:metrics:[^:]+:system[^:]*:.*

        # Don't scrap us
        - com:criteo:nosql:cassandra:exporter:.*

      maxScrapFrequencyInSec:
        50:
          - .*

        # Refresh those metrics only every hour as it is costly for cassandra to retrieve them
        3600:
          - .*:snapshotssize:.*
          - .*:estimated.*
          - .*:totaldiskspaceused:.*
    containerPorts:
      http: 8080
      jmx: 5555
    enabled: false
    extraVolumeMounts: []
    hostPorts:
      http: ""
      jmx: ""
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/cassandra-exporter
      tag: 2.3.8-debian-11-r95
    podAnnotations:
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 20
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 45
    resources:
      limits: {}
      requests: {}
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: monitoring
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  nameOverride: cassandra
  networkPolicy:
    allowExternal: true
    enabled: false
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    commitLogMountPath: ""
    commitLogsize: 2Gi
    commitStorageClass: ""
    enabled: true
    mountPath: /bitnami/cassandra
    size: 25Gi
    storageClass: ""
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: OrderedReady
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  port: 9042
  priorityClassName: ""
  provisioning:
    annotations:
      helm.sh/hook-weight: "-4"
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    headless:
      annotations: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      cql: ""
      metrics: ""
    ports:
      cql: 9042
      metrics: 8080
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 60
    initialDelaySeconds: 0
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  terminationGracePeriodSeconds: ""
  tls:
    autoGenerated: false
    certificatesSecret: ""
    clientEncryption: false
    existingSecret: ""
    internodeEncryption: none
    keystorePassword: ""
    passwordsSecret: ""
    resources:
      limits: {}
      requests: {}
    tlsEncryptionSecretName: ""
    truststorePassword: ""
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
  volumePermissions:
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r90
    resources:
      limits: {}
      requests: {}
    securityContext:
      runAsUser: 0
cassandra_migration_version: release-5.3.0
cert:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  cloud_public_storage_endpoint: ""
  cloud_service_provider: azure
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /home/sunbird/cert/cert-service-1.0-SNAPSHOT/config/
  download_link_expiry_timeout: "600"
  fullnameOverride: cert
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/cert_service
    tag: release-5.0.1_RC2
  ingress: {}
  itext_license_enabled: false
  itext_license_path: /home/sunbird/itext_trail_license.xml
  java_options: -Xmx600m
  livenessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  securityContext: {}
  service:
    ports:
    - name: http
      port: 9000
      targetPort: 9000
    protocol: TCP
    type: ClusterIP
  serviceAccount:
    create: true
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  sunbird_cert_enc_service_url: http://enc-service:8013
  tolerations: []
certificateapi:
  QR_TYPE: URL
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: false
    mountPath: /config
  fullnameOverride: certificateapi
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/sunbird-rc-certificate-api
    tag: release-5.1.0_2bc7760_10
  ingress: {}
  java_options: -Xmx600m
  livenessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 8078
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  port: 8078
  readinessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 8078
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  securityContext: {}
  service:
    ports:
    - name: http
      port: 8078
      targetPort: 8078
    protocol: TCP
    type: ClusterIP
  serviceAccount:
    create: true
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  tolerations: []
certificatesign:
  CACHE_CONTEXT_URLS: ""
  PORT: 8079
  QR_TYPE: URL
  SIGNING_KEY_TYPE: RSA
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /etc/signer
  fullnameOverride: certificatesign
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/sunbird-rc-certificate-signer
    tag: release-5.1.0_2bc7760_9
  ingress: {}
  java_options: -Xmx600m
  livenessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 8079
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 8079
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  securityContext: {}
  service:
    ports:
    - name: http
      port: 8079
      targetPort: 8079
    protocol: TCP
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  strategy:
    maxsurge: 25%
    maxunavailable: 25%
    type: RollingUpdate
  tolerations: []
certregistry:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  cassandra_multi_dc_enabled: "false"
  cert_service_base_url: http://cert-service:9000
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /home/sunbird/service-1.0-SNAPSHOT/config
  envoy_probes:
    failureThreshold: 2
    httpGet:
      path: /ready
      port: 10000
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  envoy_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  fullnameOverride: cert-registry
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/cert_registry_service
    tag: release-5.0.0_RC1_1
  ingress: {}
  init_container_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  java_options: -Xmx600m
  livenessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nodeSelector: {}
  opa_enabled: true
  opa_probes:
    failureThreshold: 3
    httpGet:
      path: /health?plugins
      port: 8282
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  opa_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  podAnnotations: {}
  podSecurityContext: {}
  rc_entity: TrainingCertificate
  readinessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  registry_credential_service_base_url: http://registry-service:8081
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  securityContext: {}
  service:
    ports:
    - name: http
      port: 9000
      targetPort: 9000
    protocol: TCP
    type: ClusterIP
  serviceAccount:
    create: true
  serviceMonitor:
    enabled: true
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels:
      release: monitoring
    scrapeTimeout: 10s
  sunbird_cassandra_keyspace: sunbird
  sunbird_cassandra_password: ""
  sunbird_cassandra_username: ""
  tolerations: []
common:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  fullnameOverride: ""
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    repository: nginx
    tag: ""
  imagePullSecrets: []
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    port: 80
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
devops_release_branch: release-7.0.0
druid:
  brokerhost: druid-raw-brokers
  brokerport: 8082
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  coordinatorhost: druid-raw-coordinators
  coordinatorport: 8081
  enabled: true
  fullnameOverride: druid
  host: druid-raw-routers
  overlordhost: druid-raw-overlords
  overlordport: 8090
  persistence:
    size: 25Gi
  port: 8888
druid-operator:
  affinity: {}
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  env:
    DENY_LIST: default,kube-system
    RECONCILE_WAIT: 10s
    WATCH_NAMESPACE: ""
  fullnameOverride: ""
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    repository: druidio/druid-operator
    tag: ""
  imagePullSecrets: []
  nameOverride: ""
  namespace: druid-raw
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
  rbac:
    create: true
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
druid-raw-cluster:
  azure_storage_account_key: ""
  azure_storage_account_name: ""
  azure_storage_container: reports
  druid.startup.logging.logProperties: true
  druid_broker_http_numConnections: 5
  druid_broker_max_direct_size: 1G
  druid_broker_max_heap_size: 1G
  druid_broker_min_heap_size: 1G
  druid_broker_port: 8082
  druid_broker_processing_buffer_sizeBytes: 64MiB
  druid_broker_processing_numMergeBuffers: 1
  druid_broker_processing_numThreads: 1
  druid_broker_service: druid/broker
  druid_cache_type: caffeine
  druid_cluster_type: raw
  druid_coordinator_balancer_strategy: diskNormalized
  druid_coordinator_max_heap_size: 750M
  druid_coordinator_min_heap_size: 750M
  druid_coordinator_period: PT5M
  druid_coordinator_port: 8081
  druid_coordinator_service: druid/coordinator
  druid_coordinator_startDelay: PT5M
  druid_deepstorage_type: azure
  druid_directory: /opt/druid
  druid_emitter: composing
  druid_emitter_composing_emitters: '"logging"'
  druid_emitter_logging_logLevel: INFO
  druid_extensions_loadList: '"postgresql-metadata-storage", "druid-kafka-indexing-service",
    "druid-azure-extensions", "druid-google-extensions"'
  druid_historical_cache_expiry: 3600000
  druid_historical_cache_populateCache: true
  druid_historical_cache_size: 128MiB
  druid_historical_cache_unCacheable: '"select", "scan"'
  druid_historical_cache_useCache: false
  druid_historical_max_direct_size: 512M
  druid_historical_max_heap_size: 750M
  druid_historical_min_heap_size: 512M
  druid_historical_persistent_volume_size: 25Gi
  druid_historical_port: 8084
  druid_historical_processing_buffer_sizeBytes: 64MiB
  druid_historical_processing_numMergeBuffers: 2
  druid_historical_processing_numThreads: 2
  druid_historical_service: druid/historical
  druid_image: apache/druid:25.0.0
  druid_indexer_fork_property_druid_processing_buffer_sizeBytes: 64M
  druid_indexer_fork_property_druid_processing_numMergeBuffers: 1
  druid_indexer_fork_property_druid_processing_numThreads: 2
  druid_indexer_fork_property_druid_server_http_numThreads: 25
  druid_indexer_logs_container: reports
  druid_indexer_logs_directory: backups/druid/druid-task-logs
  druid_indexer_logs_prefix: backups/druid/druid-task-logs
  druid_indexer_logs_type: '{{ .Values.global.deep_store_type}}'
  druid_indexer_max_direct_size: 2g
  druid_indexer_max_heap_size: 9g
  druid_indexer_min_heap_size: 7g
  druid_indexer_numConcurrentMerges: 1
  druid_indexer_persistent_volume_size: 25Gi
  druid_indexer_port: 8091
  druid_indexer_queue_startDelay: PT10M
  druid_indexer_runner_javaOpts: -server -Xms512m -Xmx512m -XX:+UseG1GC -XX:MaxGCPauseMillis=100
  druid_indexer_runner_type: remote
  druid_indexer_service: druid/indexer
  druid_indexer_storage_type: metadata
  druid_indexer_task_baseTaskDir: /druid/data/task
  druid_indexer_task_restoreTasksOnRestart: true
  druid_indexer_tasklock_forceTimeChunkLock: false
  druid_indexer_worker_capacity: 8
  druid_indexer_worker_globalIngestionHeapLimitBytes: "8589934592"
  druid_indexing_doubleStorage: double
  druid_javascript.enabled: true
  druid_javascript_enabled: true
  druid_metadata_storage_type: postgresql
  druid_middlemanager_heap_size: 750M
  druid_middlemanager_peon_heap_size: 512M
  druid_middlemanager_persistent_volume_size: 1G
  druid_middlemanager_port: 8091
  druid_middlemanager_replicas: 1
  druid_middlemanager_service: druid/middlemanager
  druid_monitoring: true
  druid_monitoring_monitors: '"com.metamx.metrics.JvmMonitor","org.apache.druid.java.util.metrics.JvmMonitor"'
  druid_namespace: ""
  druid_overlord_max_heap_size: 750M
  druid_overlord_min_heap_size: 512M
  druid_overlord_port: 8090
  druid_overlord_service: druid/overlord
  druid_postgres: jdbc:postgresql
  druid_postgresql_db: druid_raw
  druid_query_groupBy_maxMergingDictionarySize: 100000000
  druid_query_groupBy_maxOnDiskStorage: 524288000
  druid_query_ondiskstorage_enabled: true
  druid_request_logging_dir: /data/druid/log
  druid_request_logging_type: composing
  druid_router_coordinatorServiceName: druid/coordinator
  druid_router_defaultBrokerServiceName: druid/broker
  druid_router_http_numConnections: 25
  druid_router_http_numMaxThreads: 25
  druid_router_http_readTimeout: PT10M
  druid_router_managementProxy_enabled: true
  druid_router_max_heap_size: 512M
  druid_router_min_heap_size: 256M
  druid_router_plaintextPort: 8888
  druid_router_service: druid/router
  druid_segmentCache_locations: '{"path": "/druid/data/store", "maxSize": 10737418240}'
  druid_segmentCache_numLoadingThreads: 4
  druid_selectors_coordinator_serviceName: druid/coordinator
  druid_selectors_indexing_serviceName: druid/overlord
  druid_server_http_numThreads: 25
  druid_sql_enable: true
  druid_storage_directory: /data
  druid_worker_capacity: 2
  env: dev
  fullnameOverride: druid-raw-cluster
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  indexer_intial_delay: 60
  mount_path: /druid/data
  nameOverride: druid-raw-cluster
  readinessProbe:
    httpGet:
      druid_broker_port: 8082
      druid_coordinator_port: 8081
      druid_historical_port: 8084
      druid_indexer_port: 8091
      druid_overlord_port: 8090
      druid_router_plaintextPort: 8888
      path: /status/health
      port: 8088
  replicaCount:
    druid_broker: 1
    druid_coordinator: 1
    druid_historical: 1
    druid_indexer: 1
    druid_overlord: 1
    druid_router: 1
  resources:
    druid_broker:
      limits:
        cpu: 200m
        memory: 1500Mi
      requests:
        cpu: 100m
        memory: 1024Mi
    druid_coordinator:
      limits:
        cpu: 250m
        memory: 1024Mi
      requests:
        cpu: 250m
        memory: 750Mi
    druid_historical:
      limits:
        cpu: 1
        memory: 2048Mi
      requests:
        cpu: 750m
        memory: 512Mi
    druid_indexer:
      limits:
        cpu: 200m
        memory: 11Gi
      requests:
        cpu: 200m
        memory: 10Gi
    druid_overlord:
      limits:
        cpu: 250m
        memory: 1024Mi
      requests:
        cpu: 250m
        memory: 750Mi
    druid_router:
      limits:
        cpu: 512m
        memory: 1024Mi
      requests:
        cpu: 250m
        memory: 500Mi
  securityContext:
    securityContext_Druid:
      fsGroup: 0
      runAsGroup: 0
      runAsUser: 0
    securityContext_druid:
      fsGroup: 1000
      runAsGroup: 1000
      runAsUser: 1000
  serviceAccount:
    annotations:
      serviceAccountName: ""
    create: true
    name: obsrv-sa
  storageClass: managed-premium
elasticsearch:
  clusterDomain: cluster.local
  clusterName: elastic
  common:
    exampleValue: common-chart
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        service:
          name: elasticsearch
          ports:
            restAPI: 9200
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      imagePullSecrets: []
      imageRegistry: ""
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kibanaEnabled: false
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      storageClass: ""
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  commonLabels: {}
  config: {}
  containerPorts:
    restAPI: 9200
    transport: 9300
  coordinating:
    affinity: {}
    annotations: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 3
      targetCPU: ""
      targetMemory: ""
    command: []
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    heapSize: 128m
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nameOverride: ""
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: ""
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 0
    resources:
      limits: {}
      requests:
        cpu: 25m
        memory: 256Mi
    schedulerName: ""
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: false
      name: ""
    servicenameOverride: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  data:
    affinity: {}
    annotations: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 3
      targetCPU: ""
      targetMemory: ""
    command: []
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    heapSize: 1024m
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nameOverride: ""
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      existingVolume: ""
      selector: {}
      size: 8Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: ""
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 0
    resources:
      limits: {}
      requests:
        cpu: 25m
        memory: 2048Mi
    schedulerName: ""
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: false
      name: ""
    servicenameOverride: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  extraConfig: {}
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraHosts: []
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: elasticsearch
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      service:
        name: elasticsearch
        ports:
          restAPI: 9200
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    imagePullSecrets: []
    imageRegistry: ""
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kibanaEnabled: false
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    storageClass: ""
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  host: elasticsearch
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/elasticsearch
    tag: 6.8.23
  ingest:
    affinity: {}
    annotations: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 3
      targetCPU: ""
      targetMemory: ""
    command: []
    containerPorts:
      restAPI: 9200
      transport: 9300
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    heapSize: 128m
    hostAliases: []
    ingress:
      annotations: {}
      apiVersion: ""
      enabled: false
      extraHosts: []
      extraPaths: []
      extraRules: []
      extraTls: []
      hostname: elasticsearch-ingest.local
      ingressClassName: ""
      path: /
      pathType: ImplementationSpecific
      secrets: []
      selfSigned: false
      tls: false
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nameOverride: ""
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: ""
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 2
    resources:
      limits: {}
      requests:
        cpu: 25m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      enabled: false
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        restAPI: ""
        transport: ""
      ports:
        restAPI: 9200
        transport: 9300
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: false
      name: ""
    servicenameOverride: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    hostname: elasticsearch.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    selfSigned: false
    tls: false
  initContainers: []
  initScripts: {}
  initScriptsCM: ""
  initScriptsSecret: ""
  kibana:
    elasticsearch:
      hosts:
      - '{{ include "elasticsearch.service.name" . }}'
      port: '{{ include "elasticsearch.service.ports.restAPI" . }}'
  kubeVersion: ""
  master:
    affinity: {}
    annotations: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 3
      targetCPU: ""
      targetMemory: ""
    command: []
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    heapSize: 2G
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    masterOnly: false
    nameOverride: ""
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      existingVolume: ""
      selector: {}
      size: 25Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: ""
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources:
      limits:
        cpu: "2"
        memory: 4Gi
      requests:
        cpu: "1"
        memory: 2Gi
    schedulerName: ""
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: false
      name: ""
    servicenameOverride: ""
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  metrics:
    affinity: {}
    annotations:
      helm.sh/hook: post-install,post-upgrade
      helm.sh/hook-weight: "5"
    args: []
    command: []
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraArgs: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    hostAliases: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/elasticsearch-exporter
      tag: 1.5.0-debian-11-r41
    initContainers: []
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nameOverride: ""
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    podAffinityPreset: ""
    podAnnotations:
      prometheus.io/port: "9114"
      prometheus.io/scrape: "true"
    podAntiAffinityPreset: ""
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations:
        prometheus.io/port: "9114"
        prometheus.io/scrape: "true"
      port: 9114
      type: ClusterIP
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    tolerations: []
    topologySpreadConstraints: []
  nameOverride: ""
  namespaceOverride: ""
  plugins: ""
  port: 9200
  provisioning:
    annotations:
      helm.sh/hook-weight: "-4"
  security:
    elasticPassword: ""
    enabled: false
    existingSecret: ""
    fipsMode: false
    tls:
      autoGenerated: false
      coordinating:
        existingSecret: ""
      data:
        existingSecret: ""
      ingest:
        existingSecret: ""
      keyPassword: ""
      keystoreFilename: elasticsearch.keystore.jks
      keystorePassword: ""
      master:
        existingSecret: ""
      passwordsSecret: ""
      restEncryption: true
      secretKey: ""
      secretKeystoreKey: ""
      secretTruststoreKey: ""
      truststoreFilename: elasticsearch.truststore.jks
      truststorePassword: ""
      usePemCerts: false
      verificationMode: full
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      restAPI: ""
      transport: ""
    ports:
      restAPI: 9200
      transport: 9300
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  sidecars: []
  snapshotRepoPath: ""
  sysctlImage:
    digest: ""
    enabled: true
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell-archived
    resources:
      limits: {}
      requests: {}
    tag: 11-debian-11-r54
  useIstioLabels: true
  volumePermissions:
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r54
    resources:
      limits: {}
      requests: {}
flink:
  activity_agg_batch_interval: 60
  activity_agg_batch_read_size: 1
  activity_agg_batch_write_size: 10
  activity_agg_checkpointing_interval: 300000
  activity_agg_checkpointing_pause_interval: 90000
  activity_agg_collection_status_cache_expiry_time: 3600
  activity_agg_consumer_parallelism: 1
  activity_agg_dedup_expiry: 604800
  activity_agg_dedup_index: 13
  activity_agg_dedup_parallelism: 1
  activity_agg_enrolment_filter_processe_enabled: true
  activity_agg_parallelism: 1
  activity_agg_window_shards: 1000
  activity_input_dedup_enabled: true
  activity_module_aggs_enabled: true
  affinity: {}
  assessaggregator_consumer_parallelism: 1
  assessaggregator_downstream_parallelism: 1
  assessaggregator_parallelism: 1
  assessaggregator_scoreaggregator_parallelism: 1
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  azure_account: ""
  azure_secret: ""
  base_config: "kafka {\n    broker-servers = \"{{ .Values.global.kafka.host }}:{{
    .Values.global.kafka.port }}\"\n    producer.broker-servers = \"{{ .Values.global.kafka.host
    }}:{{ .Values.global.kafka.port }}\"\n    consumer.broker-servers = \"{{ .Values.global.kafka.host
    }}:{{ .Values.global.kafka.port }}\"\n    zookeeper = \"{{ .Values.global.zookeeper.host
    }}:{{ .Values.global.zookeeper.port }}\"\n    producer {\n      max-request-size
    = 1572864\n      batch.size = 98304\n      linger.ms = 10\n    }\n  }\n  job {\n
    \   env = \"{{ .Values.global.env }}\"\n    enable.distributed.checkpointing =
    true\n\n    {{- if eq \"oci\" .Values.global.checkpoint_store_type }}\n    statebackend
    {\n      base.url = \"s3://{{ .Values.global.public_container_name }}/checkpoint\"\n
    \   }\n\n    {{- else if eq \"azure\" .Values.global.checkpoint_store_type }}\n
    \   statebackend {\n      base.url = \"wasbs://{{ .Values.global.public_container_name
    }}@{{ .Values.global.object_storage_endpoint }}/checkpoint\"\n    }\n\n    {{-
    else if eq \"gcs\" .Values.global.checkpoint_store_type }}\n    statebackend {\n
    \     base.url = \"gs://{{ .Values.global.public_container_name }}/checkpoint\"\n
    \   }\n    {{- else }}\n    # No valid checkpoint_store_type configured, skipping
    statebackend.\n    {{- end }}\n  }\n  \n  \n  \n  task {\n    parallelism = 1\n
    \   consumer.parallelism = 1\n    checkpointing.compressed = true\n    checkpointing.interval
    = 60000\n    checkpointing.pause.between.seconds = 5000\n    restart-strategy.attempts
    = 3\n    restart-strategy.delay = 30000 # in milli-seconds\n  }\n  redisdb.connection.timeout
    = 30000\n  redis {\n    host = \"{{ .Values.global.redis.host }}\"\n    port =
    \"{{ .Values.global.redis.port }}\"\n  }\n  redis-meta {\n    host = \"{{ .Values.metadata2_redis_host
    | default .Values.global.redis.host }}\"\n    port = 6379\n  }\n  lms-cassandra
    {\n      host = \"{{ .Values.global.cassandra.host }}\"\n      port = \"{{ .Values.global.cassandra.port
    }}\"\n      isMultiDCEnabled = \"{{ .Values.cassandra_isMultiDCEnabled }}\"\n
    \ }\n  neo4j {\n    routePath = \"bolt://{{.Values.global.neo4j.host}}:{{.Values.global.neo4j.port}}\"\n
    \   graph = \"domain\"\n  }\n  es {\n      basePath = \"{{.Values.global.elasticsearch.host}}:{{.Values.global.elasticsearch.port}}\"\n
    \ }\n  schema {\n    basePath = \"{{ include \"common.tplvalues.render\" (dict
    \"value\" .Values.kp_schema_base_path \"context\" $) }}\"\n    supportedVersion
    = {\n      itemset = \"2.0\"\n    }\n  }\n  ml-cassandra {\n    host = \"{{ .Values.global.cassandra.host
    }}\"\n    port = \"{{ .Values.global.cassandra.port }}\"\n    isMultiDCEnabled
    = \"{{ .Values.cassandra_isMultiDCEnabled }}\"\n  }\n  ml-mongo {\n      host
    = \"\"\n      port = \"27017\"\n      database = \"\"\n  }\n  sunbird_instance_name
    = \"Sunbird\"\n"
  cassandra_isMultiDCEnabled: false
  cert_cloud_storage_endpoint: ""
  cert_cloud_storage_key: '{{ .Values.global.cloud_storage_access_key }}'
  cert_cloud_storage_secret: '{{ .Values.global.cloud_storage_secret_key }}'
  cert_cloud_storage_type: azure
  cert_rc_base_url: http://registry-service:8081/api/v1
  cert_rc_entity: TrainingCertificate
  cert_reg_service_base_url: http://certreg:9000/certreg
  cert_registry_table: cert_registry
  certificate_generator_consumer_parallelism: 1
  certificate_generator_parallelism: 1
  certificate_migrator_enable_suppress_exception: false
  checkpoint_compression_enabled: true
  checkpoint_interval: 60000
  checkpoint_pause_between_seconds: 5000
  checkpoint_store_type: azure
  cloud_storage:
    cloud_private_storage_accountname: storage-account
    cloud_private_storage_secret: s3cr3t-key
    cloud_service_provider: azure
    cloud_storage_content_bucketname: content-bucket
    container: dummyContainer
    endpoint: https://dummy.endpoint.com
    key: dummyAccessKey
    secret: dummySecretKey
    type: azure
  cloud_storage_base_url: https://{{ .Values.global.object_storage_endpoint }}
  cloud_storage_cname_url: https://{{ .Values.global.object_storage_endpoint }}
  cloud_storage_flink_bucketname: '{{ .Values.global.public_container_name }}'
  cloud_store_base_path_placeholder: CLOUD_BASE_PATH
  collection_cert_pre_processor_consumer_parallelism: 1
  collection_certificate_generator_consumer_parallelism: 1
  collection_certificate_generator_enable_rc_certificate: '{{ .Values.enable_rc_certificate
    }}'
  collection_certificate_generator_enable_suppress_exception: '{{ .Values.enable_suppress_exception
    }}'
  collection_certificate_generator_parallelism: 1
  collection_certificate_generator_rc_badcharlist: '{{ .Values.rc_bad_char_list }}'
  collection_certificate_pre_processor_enable_suppress_exception: '{{ .Values.enable_suppress_exception
    }}'
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: false
    mountPath: /config
  content_read_api_endpoint: content/v3/read/
  content_read_api_host: http://content-service:9000
  content_service_base_url: http://content-service:9000
  core_vault_sunbird_fcm_account_key: your-fcm-account-key
  domain_name: localhost
  enable_rc_certificate: true
  enable_suppress_exception: false
  enc_service_base_url: http://enc:9000/enc
  enrolment_complete_parallelism: 1
  enrolment_reconciliation_batch_write_size: 10
  enrolment_reconciliation_collection_status_cache_expiry_time: 3600
  enrolment_reconciliation_consumer_parallelism: 1
  enrolment_reconciliation_filter_processe_enabled: true
  enrolment_reconciliation_parallelism: 1
  env_name: local
  extractor_consumer_parallelism: 1
  flink_jobs:
    activity-aggregate-updater:
      config: |
        include file("/data/flink/conf/base-config.conf")
        kafka {
          input.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_course_batch_job_request "context" $) }}"
          output.audit.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_telemetry_raw "context" $) }}"
          output.failed.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_activity_agg_failed "context" $) }}"
          output.certissue.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_certificate_request "context" $) }}"
          groupId = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_group_activity_agg "context" $) }}"
        }
        task {
          window.shards = "{{ .Values.activity_agg_window_shards }}"
          checkpointing.interval = "{{ .Values.activity_agg_checkpointing_interval }}"
          checkpointing.pause.between.seconds = "{{ .Values.activity_agg_checkpointing_pause_interval }}"
          restart-strategy.attempts = "{{ .Values.restart_attempts }}"
          restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
          consumer.parallelism = "{{ .Values.activity_agg_consumer_parallelism }}"
          dedup.parallelism = "{{ .Values.activity_agg_dedup_parallelism }}"
          activity.agg.parallelism = "{{ .Values.activity_agg_parallelism }}"
          enrolment.complete.parallelism = "{{ .Values.enrolment_complete_parallelism }}"
        }
        lms-cassandra {
          keyspace = "{{ .Values.middleware_course_keyspace }}"
          consumption.table = "{{ .Values.middleware_consumption_table }}"
          user_activity_agg.table = "{{ .Values.middleware_user_activity_agg_table }}"
          user_enrolments.table = "user_enrolments"
        }
        redis {
          database {
            relationCache.id = 10
          }
        }
        dedup-redis {
          host = "{{ .Values.global.redis.host }}"
          port = 6379
          database.index = "{{ .Values.activity_agg_dedup_index }}"
          database.expiry = "{{ .Values.activity_agg_dedup_expiry }}"
        }
        threshold.batch.read.interval = "{{ .Values.activity_agg_batch_interval }}"
        threshold.batch.read.size = "{{ .Values.activity_agg_batch_read_size }}"
        threshold.batch.write.size = "{{ .Values.activity_agg_batch_write_size }}"
        activity {
          module.aggs.enabled = true
          input.dedup.enabled = true
          filter.processed.enrolments = "{{ .Values.activity_agg_enrolment_filter_processe_enabled }}"
          collection.status.cache.expiry = "{{ .Values.activity_agg_collection_status_cache_expiry_time }}"
        }
        service {
          search.basePath = "{{ .Values.kp_search_service_base_url }}"
        }
      enabled: true
      flink-conf: |
        jobmanager.memory.flink.size: 1024m
        taskmanager.memory.flink.size: 1024m
        taskmanager.numberOfTaskSlots: 1
        parallelism.default: 1
        jobmanager.execution.failover-strategy: region
        taskmanager.memory.network.fraction: 0.1
      job_classname: org.sunbird.job.aggregate.task.ActivityAggregateUpdaterStreamTask
    assessment-aggregator:
      config: |
        include file("/data/flink/conf/base-config.conf")
        kafka {
          producer.broker-servers = "{{ .Values.global.kafka.host }}:{{ .Values.global.kafka.port }}"
          consumer.broker-servers = "{{ .Values.global.kafka.host }}:{{ .Values.global.kafka.port }}"
          zookeeper = "{{ .Values.global.zookeeper.host }}:{{ .Values.global.zookeeper.port }}"
          input.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_assessment "context" $) }}"
          failed.topic= "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_assessment_failed "context" $) }}"
          groupId = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_group_assessment_aggregator "context" $) }}"
          output.certissue.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_certificate_request "context" $) }}"
        }
        task {
          consumer.parallelism = "{{ .Values.assessaggregator_consumer_parallelism }}"
          downstream.parallelism = "{{ .Values.assessaggregator_downstream_parallelism }}"
          assessaggregator {
            parallelism = "{{ .Values.assessaggregator_parallelism }}"
          }
          scoreaggregator.parallelism = "{{ .Values.assessaggregator_scoreaggregator_parallelism }}"
        }
        lms-cassandra {
          keyspace = "{{ .Values.middleware_cassandra_courses_keyspace }}"
          table = "{{ .Values.middleware_cassandra_assessment_aggregator_table }}"
          questionudttype= "{{ .Values.middleware_cassandra_assessment_question_type }}"
          enrolmentstable = "{{ .Values.middleware_cassandra_user_enrolments_table }}"
          activitytable = "{{ .Values.middleware_cassandra_user_activity_agg_table }}"
        }
        redis {
          database {
            relationCache.id = 10
            contentCache.id = 5
          }
        }
        assessment.skip.missingRecords = true
        content.read.api = "{{ .Values.content_read_api_host }}/{{ .Values.content_read_api_endpoint }}"
        user.activity.agg.type="attempt_metrics"
      enabled: true
      flink-conf: |
        jobmanager.memory.flink.size: 1024m
        taskmanager.memory.flink.size: 1024m
        taskmanager.numberOfTaskSlots: 1
        parallelism.default: 1
        jobmanager.execution.failover-strategy: region
        taskmanager.memory.network.fraction: 0.1
      job_classname: org.sunbird.dp.assessment.task.AssessmentAggregatorStreamTask
    collection-cert-pre-processor:
      config: |
        include file("/data/flink/conf/base-config.conf")
        kafka {
          input.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_certificate_request "context" $) }}"
          output.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_generate_certificate_request "context" $) }}"
          output.failed.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_certificate_failed "context" $) }}"
          groupId = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_group_collection_pre_processor "context" $) }}"
        }
        task {
          restart-strategy.attempts = "{{ .Values.restart_attempts }}" # max 3 restart attempts
          restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
          parallelism = "{{ .Values.collection_cert_pre_processor_consumer_parallelism }}"
          consumer.parallelism = "{{ .Values.collection_cert_pre_processor_consumer_parallelism }}"
          generate_certificate.parallelism = "{{.Values.generate_certificate_parallelism }}"
        }
        lms-cassandra {
          keyspace = "{{ .Values.middleware_course_keyspace }}"
          consumption.table = "{{ .Values.middleware_consumption_table }}"
          user_enrolments.table = "{{ .Values.middleware_user_enrolments_table }}"
          course_batch.table = "{{ .Values.middleware_course_batch_table }}"
          assessment_aggregator.table = "{{ .Values.middleware_assessment_aggregator_table }}"
          user_activity_agg.table = "{{ .Values.middleware_user_activity_agg_table }}"
        }
        redis {
            database {
              contentCache.id = 5
              collectionCache.id = 0
            }
        }
        cert_domain_url = "https://{{ .Values.global.domain }}"
        user_read_api = "/private/user/v1/read"
        content_read_api = "/content/v3/read"
        service {
          content.basePath = "{{ .Values.content_service_base_url }}"
          learner.basePath = "{{ .Values.userorg_service_base_url }}"
        }
        enable.suppress.exception = "{{ include "common.tplvalues.render" (dict "value" .Values.collection_certificate_pre_processor_enable_suppress_exception "context" $) }}"
        redis-meta {
          host = "{{ .Values.metadata2_redis_host | default .Values.global.redis.host }}"
          port = 6379
        }
        assessment.metrics.supported.contenttype = ["SelfAssess"]
        cert_cloud_storage_type = "{{ include "common.tplvalues.render" (dict "value" .Values.cert_cloud_storage_type "context" $) }}"
        cert_cloud_storage_secret = "{{ include "common.tplvalues.render" (dict "value" .Values.cert_cloud_storage_secret "context" $) }}"
        cert_cloud_storage_key = "{{ include "common.tplvalues.render" (dict "value" .Values.cert_cloud_storage_key "context" $) }}"
        cloud_storage_base_url = "{{ include "common.tplvalues.render" (dict "value" .Values.cloud_storage_base_url "context" $) }}"
        cloud_store_base_path_placeholder = "{{ include "common.tplvalues.render" (dict "value" .Values.cloud_store_base_path_placeholder "context" $) | default "CLOUD_BASE_PATH" }}"
        content_cloud_storage_container = "{{ .Values.global.public_container_name }}"
        cloud_storage_cname_url = "{{ include "common.tplvalues.render" (dict "value" .Values.cloud_storage_cname_url "context" $) }}"
      enabled: true
      flink-conf: |
        jobmanager.memory.flink.size: 1024m
        taskmanager.memory.flink.size: 1024m
        taskmanager.numberOfTaskSlots: 1
        parallelism.default: 1
        jobmanager.execution.failover-strategy: region
        taskmanager.memory.network.fraction: 0.1
      job_classname: org.sunbird.job.collectioncert.task.CollectionCertPreProcessorTask
    collection-certificate-generator:
      config: |
        include file("/data/flink/conf/base-config.conf")
        kafka {
          input.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_generate_certificate_request "context" $) }}"
          output.audit.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_telemetry_raw "context" $) }}"
          groupId = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_group_certificate_generator "context" $) }}"
        }
        task {
          restart-strategy.attempts = "{{ .Values.restart_attempts }}" # max 3 restart attempts
          restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
          consumer.parallelism = "{{ .Values.collection_certificate_generator_consumer_parallelism }}"
          parallelism = "{{ .Values.collection_certificate_generator_parallelism }}"
        }
        lms-cassandra {
          keyspace = "{{ .Values.middleware_course_keyspace }}"
          user_enrolments.table = "{{ .Values.middleware_user_enrolments_table }}"
          course_batch.table = "{{ .Values.middleware_course_batch_table }}"
          sbkeyspace = "{{ .Values.registry_sunbird_keyspace }}"
          certreg.table ="{{ .Values.cert_registry_table }}"
        }
        cert_domain_url = "https://{{ .Values.global.domain }}"
        cert_container_name = "{{ .Values.global.public_container_name }}"
        cert_cloud_storage_type = "{{ include "common.tplvalues.render" (dict "value" .Values.cert_cloud_storage_type "context" $) }}"
        cert_cloud_storage_secret = "{{ include "common.tplvalues.render" (dict "value" .Values.cert_cloud_storage_secret "context" $) }}"
        cert_cloud_storage_endpoint = "{{ .Values.cert_cloud_storage_endpoint }}"
        cert_cloud_storage_key = "{{ include "common.tplvalues.render" (dict "value" .Values.cert_cloud_storage_key "context" $) }}"
        cloud_storage_base_url = "{{ include "common.tplvalues.render" (dict "value" .Values.cloud_storage_base_url "context" $) }}"
        cloud_store_base_path_placeholder = "{{ include "common.tplvalues.render" (dict "value" .Values.cloud_store_base_path_placeholder "context" $) | default "CLOUD_BASE_PATH" }}"
        content_cloud_storage_container = "{{ .Values.global.public_container_name }}"
        cloud_storage_cname_url = "{{ include "common.tplvalues.render" (dict "value" .Values.cloud_storage_cname_url "context" $) }}"
        service {
          certreg.basePath = "{{ .Values.cert_reg_service_base_url }}"
          learner.basePath = "{{ .Values.userorg_service_base_url }}"
          enc.basePath = "{{ .Values.enc_service_base_url }}"
          rc.basePath = "{{ .Values.cert_rc_base_url }}"
          rc.entity = "{{ .Values.cert_rc_entity }}"
          rc.rcApiKey = "{{ .Values.sunbird_api_auth_token }}"
        }
        enable.suppress.exception = "{{ include "common.tplvalues.render" (dict "value" .Values.collection_certificate_generator_enable_suppress_exception "context" $) }}"
        enable.rc.certificate = "{{ include "common.tplvalues.render" (dict "value" .Values.collection_certificate_generator_enable_rc_certificate "context" $) }}"
        task.rc.badcharlist = "{{ include "common.tplvalues.render" (dict "value" .Values.collection_certificate_generator_rc_badcharlist "context" $) }}"
      enabled: true
      flink-conf: |
        jobmanager.memory.flink.size: 1024m
        taskmanager.memory.flink.size: 1024m
        taskmanager.numberOfTaskSlots: 1
        parallelism.default: 1
        jobmanager.execution.failover-strategy: region
        taskmanager.memory.network.fraction: 0.1
      job_classname: org.sunbird.job.certgen.task.CertificateGeneratorStreamTask
    enrolment-reconciliation:
      config: |
        include file("/data/flink/conf/base-config.conf")
        kafka {
          input.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_enrolment_sync_request "context" $) }}"
          output.audit.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_telemetry_raw "context" $) }}"
          output.failed.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_activity_agg_failed "context" $) }}"
          output.certissue.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_certificate_request "context" $) }}"
          groupId = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_group_enrolment_reconciliation "context" $) }}"
        }
        task {
          restart-strategy.attempts = "{{ .Values.restart_attempts }}" # max 3 restart attempts
          restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
          consumer.parallelism = "{{ .Values.enrolment_reconciliation_consumer_parallelism }}"
          enrolment.reconciliation.parallelism = "{{ .Values.enrolment_reconciliation_parallelism }}"
          enrolment.complete.parallelism = "{{ .Values.enrolment_complete_parallelism }}"
        }
        lms-cassandra {
          keyspace = "{{ .Values.middleware_course_keyspace }}"
          consumption.table = "{{ .Values.middleware_consumption_table }}"
          user_activity_agg.table = "{{ .Values.middleware_user_activity_agg_table }}"
          user_enrolments.table = "user_enrolments"
        }
        redis {
          database {
            relationCache.id = 10
          }
        }
        threshold.batch.write.size = "{{ .Values.enrolment_reconciliation_batch_write_size }}"
        activity {
          module.aggs.enabled = true
          collection.status.cache.expiry = "{{ .Values.enrolment_reconciliation_collection_status_cache_expiry_time }}"
        }
        service {
          search.basePath = "{{ .Values.kp_search_service_base_url }}"
        }
      enabled: true
      flink-conf: |
        jobmanager.memory.flink.size: 1024m
        taskmanager.memory.flink.size: 1024m
        taskmanager.numberOfTaskSlots: 1
        parallelism.default: 1
        jobmanager.execution.failover-strategy: region
        taskmanager.memory.network.fraction: 0.1
      job_classname: org.sunbird.job.recounciliation.task.EnrolmentReconciliationStreamTask
    legacy-certificate-migrator:
      config: |
        include file("/data/flink/conf/base-config.conf")
        kafka {
          input.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_migrate_certificate_request "context" $) }}"
          output.audit.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_telemetry_raw "context" $) }}"
          groupId = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_group_certificate_migrator "context" $) }}"
        }
        task {
          restart-strategy.attempts = "{{ .Values.restart_attempts }}" # max 3 restart attempts
          restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
          consumer.parallelism = "{{ .Values.legacy_certificate_migrator_consumer_parallelism }}"
          parallelism = "{{ .Values.legacy_certificate_migrator_parallelism }}"
        }
        lms-cassandra {
          keyspace = "{{ .Values.middleware_course_keyspace }}"
          user_enrolments.table = "{{ .Values.middleware_user_enrolments_table }}"
          course_batch.table = "{{ .Values.middleware_course_batch_table }}"
          sbkeyspace = "{{ .Values.registry_sunbird_keyspace }}"
          certreg.table ="{{ .Values.cert_registry_table }}"
        }
        cert_domain_url = "{{ .Values.global.domain }}"
        cert_container_name = "{{ .Values.global.public_container_name }}"
        cert_cloud_storage_type = "{{ include "common.tplvalues.render" (dict "value" .Values.cert_cloud_storage_type "context" $) }}"
        cert_cloud_storage_secret = "{{ include "common.tplvalues.render" (dict "value" .Values.cert_cloud_storage_secret "context" $) }}"
        cert_cloud_storage_key = "{{ include "common.tplvalues.render" (dict "value" .Values.cert_cloud_storage_key "context" $) }}"
        cloud_storage_base_url = "{{ include "common.tplvalues.render" (dict "value" .Values.cloud_storage_base_url "context" $) }}"
        cloud_store_base_path_placeholder = "{{ include "common.tplvalues.render" (dict "value" .Values.cloud_store_base_path_placeholder "context" $) | default "CLOUD_BASE_PATH" }}"
        content_cloud_storage_container = "{{ .Values.global.public_container_name }}"
        cloud_storage_cname_url = "{{ include "common.tplvalues.render" (dict "value" .Values.cloud_storage_cname_url "context" $) }}"
        service {
          certreg.basePath = "{{ .Values.cert_reg_service_base_url }}"
          learner.basePath = "{{ .Values.userorg_service_base_url }}"
          enc.basePath = "{{ .Values.enc_service_base_url }}"
          rc.basePath = "{{ .Values.cert_rc_base_url }}"
          rc.entity = "{{ .Values.cert_rc_entity }}"
          rc.rcApiKey = "{{ .Values.sunbird_api_auth_token }}"
        }
        enable.suppress.exception = "{{ .Values.certificate_migrator_enable_suppress_exception }}"
        enable.rc.certificate = "{{ include "common.tplvalues.render" (dict "value" .Values.collection_certificate_generator_enable_rc_certificate "context" $) }}"
        task.rc.badcharlist = "{{ include "common.tplvalues.render" (dict "value" .Values.collection_certificate_generator_rc_badcharlist "context" $) }}"
      enabled: true
      flink-conf: |
        jobmanager.memory.flink.size: 1024m
        taskmanager.memory.flink.size: 1024m
        taskmanager.numberOfTaskSlots: 1
        parallelism.default: 1
        jobmanager.execution.failover-strategy: region
        taskmanager.memory.network.fraction: 0.1
      job_classname: org.sunbird.job.certmigrator.task.CertificateGeneratorStreamTask
    merge-user-courses:
      config: |
        include file("/data/flink/conf/base-config.conf")
        kafka {
          input.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_lms_user_account "context" $) }}"
          output.failed.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_learning_failed "context" $) }}"
          groupId = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_group_merge_courses "context" $) }}"
          output.course.batch.updater.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_course_batch_job_request "context" $) }}"
        }
        task {
          consumer.parallelism = "{{ .Values.merge_user_courses_consumer_parallelism }}"
          parallelism = "{{ .Values.merge_user_courses_parallelism }}"
          course_batch_updater.parallelism = "{{ .Values.merge_user_courses_course_batch_parallelism }}"
        }
        lms-cassandra {
          keyspace = "{{ .Values.middleware_course_keyspace }}"
          content_consumption.table = "{{ .Values.middleware_consumption_table }}"
          user_enrolments.table = "{{ .Values.middleware_user_enrolments_table }}"
          user_activity_agg.table = "{{ .Values.middleware_user_activity_agg_table }}"
        }
        course.date.format = "{{ .Values.merge_user_courses_course_date_format }}"
      enabled: true
      flink-conf: |
        jobmanager.memory.flink.size: 1024m
        taskmanager.memory.flink.size: 1024m
        taskmanager.numberOfTaskSlots: 1
        parallelism.default: 1
        jobmanager.execution.failover-strategy: region
        taskmanager.memory.network.fraction: 0.1
      job_classname: org.sunbird.job.merge.user.courses.task.MergeUserCoursesStreamTask
    notification-job:
      config: |
        include file("/data/flink/conf/base-config.conf")
        kafka {
          input.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_lms_notification "context" $) }}"
          groupId = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_group_lms_notification "context" $) }}"
        }
        task {
          restart-strategy.attempts = "{{ .Values.restart_attempts }}" # max 3 restart attempts
          restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
          consumer.parallelism = "{{ .Values.notification_job_consumer_parallelism }}"
          parallelism = "{{ .Values.notification_job_parallelism }}"
        }
        fcm_account_key= "{{ .Values.core_vault_sunbird_fcm_account_key }}"
        sms_auth_key= "{{ .Values.global.sunbird_msg_91_auth }}"
        mail_server_from_email= "{{ .Values.global.mail_server_from_email }}"
        sms_default_sender= "{{ .Values.notification_msg_default_sender }}"
        mail_server_username= "{{ .Values.global.mail_server_username }}"
        mail_server_password= "{{ .Values.global.mail_server_password }}"
        mail_server_host= "{{ .Values.mail_server_host }}"
        mail_server_port= "{{ .Values.mail_server_port }}"
      enabled: true
      flink-conf: |
        jobmanager.memory.flink.size: 1024m
        taskmanager.memory.flink.size: 1024m
        taskmanager.numberOfTaskSlots: 1
        parallelism.default: 1
        jobmanager.execution.failover-strategy: region
        taskmanager.memory.network.fraction: 0.1
      job_classname: org.sunbird.job.notification.task.NotificationStreamTask
    program-user-info:
      config: |
        include file("/data/flink/conf/base-config.conf")
        kafka {
          producer.broker-servers = "{{ .Values.global.kafka.host }}:{{ .Values.global.kafka.port }}"
          consumer.broker-servers = "{{ .Values.global.kafka.host }}:{{ .Values.global.kafka.port }}"
          zookeeper = "{{ .Values.global.zookeeper.host }}:{{ .Values.global.zookeeper.port }}"
          input.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_programuser_info "context" $) }}"
          groupId = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_group_programuser_info "context" $) }}"
        }
        task {
          consumer.parallelism = "{{ .Values.programuserinfo_consumer_parallelism }}"
          downstream.parallelism = "{{ .Values.programuserinfo_downstream_parallelism }}"
          programuser {
            parallelism = "{{ .Values.programuserinfo_programuser_parallelism }}"
          }

        }
        ml-cassandra {
          keyspace = "{{ .Values.middleware_cassandra_programuserinfo_keyspace }}"
          table = "{{ .Values.middleware_cassandra_programuserinfo_table }}"
        }
      enabled: true
      flink-conf: |
        jobmanager.memory.flink.size: 1024m
        taskmanager.memory.flink.size: 1024m
        taskmanager.numberOfTaskSlots: 1
        parallelism.default: 1
        jobmanager.execution.failover-strategy: region
        taskmanager.memory.network.fraction: 0.1
      job_classname: org.sunbird.dp.userinfo.task.ProgramUserInfoStreamTask
    relation-cache-updater:
      config: |
        include file("/data/flink/conf/base-config.conf")
        kafka {
          input.topic = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_topic_content_publish_request "context" $) }}"
          groupId = "{{ include "common.tplvalues.render" (dict "value" .Values.kafka_group_relation_cache_updater "context" $) }}"
        }
        task {
          consumer.parallelism = "{{ .Values.relation_cache_updater_consumer_parallelism }}"
          parallelism = "{{ .Values.relation_cache_updater_parallelism }}"
        }
        lms-cassandra {
              keyspace = "{{ include "common.tplvalues.render" (dict "value" .Values.middleware_hierarchy_keyspace "context" $) }}"
              table = "{{ .Values.middleware_content_hierarchy_table }}"
        }
        redis {
          database.index = 10
        }
        dp-redis {
          host = "{{ .Values.global.redis.host }}"
          port = 6379
          database.index = 5
        }
      enabled: true
      flink-conf: |
        jobmanager.memory.flink.size: 1024m
        taskmanager.memory.flink.size: 1024m
        taskmanager.numberOfTaskSlots: 1
        parallelism.default: 1
        jobmanager.execution.failover-strategy: region
        taskmanager.memory.network.fraction: 0.1
      job_classname: org.sunbird.job.relationcache.task.RelationCacheUpdaterStreamTask
    user-deletion-cleanup:
      config: |
        include file("/data/flink/conf/base-config.conf")
        kafka {
          input.topic = "{{ .Values.global.env }}.delete.user"
          groupId = "{{ .Values.global.env }}-delete-user-group"
        }
        task {
          user.deletion.cleanup.parallelism = "{{ .Values.user_deletion_cleanup_job_parallelism }}"
        }

        service {
            lms {
                basePath = "{{ .Values.lms_service_base_url }}"
            }
            userorg {
                basePath = "{{ .Values.userorg_service_base_url }}"
            }
        }

        sunbird_keycloak_user_federation_provider_id="{{ .Values.core_vault_sunbird_keycloak_user_federation_provider_id }}"
        user_read_api = "/user/v5/read/"
        batch_search_api = "/course/v1/batch/list"

        user {
            keyspace = "sunbird"
            lookup.table = "user_lookup"
            table = "user"
            externalIdentity.table = "usr_external_identity"
            org.table = "user_organisation"
        }
      enabled: true
      flink-conf: |
        jobmanager.memory.flink.size: 1024m
        taskmanager.memory.flink.size: 1024m
        taskmanager.numberOfTaskSlots: 1
        parallelism.default: 1
        jobmanager.execution.failover-strategy: region
        taskmanager.memory.network.fraction: 0.1
      job_classname: org.sunbird.job.deletioncleanup.task.UserDeletionCleanupStreamTask
  generate_certificate_parallelism: 1
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/data-pipeline
    tag: release-7.0.0_RC5_4a07143_21
  ingress: {}
  initContainers: {}
  instance: dev
  jobmanager:
    blob_port: 6124
    heap_memory: 1024
    prom_port: 9250
    query_port: 6125
    rpc_port: 6123
    ui_port: 8081
  kafka_group_activity_agg: '{{ .Values.global.env }}-activity-aggregate-group'
  kafka_group_assessment_aggregator: '{{ .Values.global.env }}-assessment-aggregator-group'
  kafka_group_certificate_generator: '{{ .Values.global.env }}-certificate-generator-group'
  kafka_group_certificate_migrator: '{{ .Values.global.env }}-certificate-migrator-group'
  kafka_group_collection_pre_processor: '{{ .Values.global.env }}-collection-cert-pre-processor-group'
  kafka_group_enrolment_reconciliation: '{{ .Values.global.env }}-enrolment-reconciliation-group'
  kafka_group_lms_notification: '{{ .Values.global.env }}-lms-notification'
  kafka_group_merge_courses: '{{ .Values.global.env }}-merge-courses-group'
  kafka_group_programuser_info: '{{ .Values.global.env }}-programuser-group'
  kafka_group_relation_cache_updater: '{{ .Values.global.env }}-relation-cache-updater-group'
  kafka_topic_activity_agg_failed: '{{ .Values.global.env }}.activity.agg.failed'
  kafka_topic_assessment: '{{ .Values.global.env }}.telemetry.assess'
  kafka_topic_assessment_failed: '{{ .Values.global.env }}.telemetry.assess.failed'
  kafka_topic_certificate_failed: '{{ .Values.global.env }}.issue.certificate.failed'
  kafka_topic_certificate_request: '{{ .Values.global.env }}.issue.certificate.request'
  kafka_topic_content_publish_request: '{{ .Values.global.env }}.knowlg.content.postpublish.request'
  kafka_topic_contentstate_invalid: '{{ .Values.global.env }}.contentstate.invalid'
  kafka_topic_course_batch_job_request: '{{ .Values.global.env }}.coursebatch.job.request'
  kafka_topic_enrolment_reconciliation_failed: '{{ .Values.global.env }}.enrolment.reconciliation.failed'
  kafka_topic_enrolment_sync_request: '{{ .Values.global.env }}.batch.enrolment.sync.request'
  kafka_topic_generate_certificate_failed: '{{ .Values.global.env }}.generate.certificate.failed'
  kafka_topic_generate_certificate_request: '{{ .Values.global.env }}.generate.certificate.request'
  kafka_topic_learning_failed: '{{ .Values.global.env }}.learning.events.failed'
  kafka_topic_lms_notification: '{{ .Values.global.env }}.lms.notification'
  kafka_topic_lms_user_account: '{{ .Values.global.env }}.lms.user.account.merge'
  kafka_topic_migrate_certificate_request: '{{ .Values.global.env }}.legacy.certificate.migrate'
  kafka_topic_programuser_info: '{{ .Values.global.env }}.programuser.info'
  kafka_topic_telemetry_raw: '{{ .Values.global.env }}.telemetry.raw'
  kp_schema_base_path: https://{{ .Values.global.object_storage_endpoint }}./{{ .Values.global.public_container_name
    }}/schemas/local
  kp_search_service_base_url: http://search-service:9000
  legacy_certificate_migrator_consumer_parallelism: 1
  legacy_certificate_migrator_parallelism: 1
  lms_service_base_url: http://lms-service:9000
  log4j_console_properties: |
    # This affects logging for both user code and Flink
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = ConsoleAppender

    # Uncomment this if you want to _only_ change Flink's logging
    #logger.flink.name = org.apache.flink
    #logger.flink.level = INFO

    # The following lines keep the log level of common libraries/connectors on
    # log level INFO. The root logger does not override this. You have to manually
    # change the log levels here.
    logger.akka.name = akka
    logger.akka.level = ERROR
    logger.kafka.name= org.apache.kafka
    logger.kafka.level = ERROR
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = ERROR
    logger.zookeeper.name = org.apache.zookeeper
    logger.zookeeper.level = ERROR

    # Log all infos to the console
    appender.console.name = ConsoleAppender
    appender.console.type = CONSOLE
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n

    # Suppress the irrelevant (wrong) warnings from the Netty channel handler
    logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
    logger.netty.level = OFF
  mail_server_host: smtp.sendgrid.net
  mail_server_password: password
  mail_server_port: "587"
  mail_server_username: apikey
  merge_user_courses_consumer_parallelism: 1
  merge_user_courses_course_batch_parallelism: 1
  merge_user_courses_course_date_format: yyyy-MM-dd HH:mm:ss:SSSZ
  merge_user_courses_parallelism: 1
  middleware_assessment_aggregator_table: assessment_aggregator
  middleware_cassandra_assessment_aggregator_table: assessment_aggregator
  middleware_cassandra_assessment_question_type: question
  middleware_cassandra_courses_keyspace: sunbird_courses
  middleware_cassandra_programuserinfo_keyspace: sunbird_programs
  middleware_cassandra_programuserinfo_table: program_enrollment
  middleware_cassandra_user_activity_agg_table: user_activity_agg
  middleware_cassandra_user_enrolments_table: user_enrolments
  middleware_consumption_table: user_content_consumption
  middleware_content_hierarchy_table: content_hierarchy
  middleware_course_batch_table: course_batch
  middleware_course_keyspace: sunbird_courses
  middleware_hierarchy_keyspace: '{{ .Values.global.env }}_hierarchy_store'
  middleware_user_activity_agg_table: user_activity_agg
  middleware_user_enrolments_table: user_enrolments
  nodeSelector: {}
  notification_job_consumer_parallelism: 1
  notification_job_parallelism: 1
  notification_msg_default_sender: msg-sender
  podAnnotations: {}
  podSecurityContext: {}
  postgres_max_connections: 2
  producer_batch_size: 98304
  producer_linger_ms: 10
  producer_max_request_size: 1572864
  programuserinfo_consumer_parallelism: 1
  programuserinfo_downstream_parallelism: 1
  programuserinfo_programuser_parallelism: 1
  proto: https
  rc_bad_char_list: char_list
  redis_timeout: 30000
  registry_sunbird_keyspace: sunbird
  relation_cache_updater_consumer_parallelism: 1
  relation_cache_updater_parallelism: 1
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 2048Mi
    requests:
      cpu: 100m
      memory: 500Mi
  rest_port: 80
  restart_attempts: 3
  restart_delay: 30000
  resttcp_port: 8081
  s3_access_key: ""
  s3_endpoint: ""
  s3_path_style_access: ""
  s3_secret_key: ""
  securityContext: {}
  service:
    ports:
    - name: http
      port: 80
      targetPort: 8081
    type: ClusterIP
  serviceAccount:
    create: true
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  sidecars: {}
  sunbird_api_auth_token: token
  sunbird_keycloak_user_federation_provider_id: cassandrafederationid
  sunbird_mail_server_from_email: support@myorg.com
  sunbird_msg_91_auth: your-msg-91-auth-key
  taskmanager:
    cpu_requests: 0.3
    heap_memory: 1024
    prom_port: 9251
    replicas: 1
    rpc_port: 6122
  tolerations: []
  user_cache_updater_job_consumer_parallelism: 1
  user_cache_updater_job_parallelism: 1
  user_deletion_cleanup_job_parallelism: 1
  userorg_service_base_url: http://userorg-service:9000
global:
  cassandra:
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    enabled: true
    extraEnvVars:
    - name: CASSANDRA_AUTHENTICATOR
      value: AllowAllAuthenticator
    - name: CASSANDRA_AUTHORIZER
      value: AllowAllAuthorizer
    fullnameOverride: cassandra
    host: cassandra
    image:
      tag: 3.11.13-debian-11-r3
    nameOverride: cassandra
    persistence:
      size: 25Gi
    port: 9042
    provisioning:
      annotations:
        helm.sh/hook-weight: "-4"
  druid:
    brokerhost: druid-raw-brokers
    brokerport: 8082
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    coordinatorhost: druid-raw-coordinators
    coordinatorport: 8081
    enabled: true
    fullnameOverride: druid
    host: druid-raw-routers
    overlordhost: druid-raw-overlords
    overlordport: 8090
    persistence:
      size: 25Gi
    port: 8888
  elasticsearch:
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    coordinating:
      replicaCount: 0
    data:
      replicaCount: 0
    enabled: true
    fullnameOverride: elasticsearch
    host: elasticsearch
    image:
      registry: docker.io
      repository: bitnami/elasticsearch
      tag: 6.8.23
    ingest:
      enabled: false
    master:
      heapSize: 2G
      masterOnly: false
      persistence:
        size: 25Gi
      replicaCount: 1
      resources:
        limits:
          cpu: "2"
          memory: 4Gi
        requests:
          cpu: "1"
          memory: 2Gi
    port: 9200
    provisioning:
      annotations:
        helm.sh/hook-weight: "-4"
    sysctlImage:
      registry: docker.io
      repository: bitnami/bitnami-shell-archived
      tag: 11-debian-11-r54
  kafka:
    clientProtocol: PLAINTEXT
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    enabled: true
    fullnameOverride: kafka
    host: kafka
    image:
      registry: docker.io
      repository: bitnami/kafka
      tag: 3.3.1-debian-11-r25
    persistence:
      size: 25Gi
    port: 9092
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  keycloak_key_configmap: keycloak-key
  keycloak_kid_keys_configmap: keycloak-kids-keys
  kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
  neo4j:
    boltPort: 8687
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    enabled: true
    host: neo4j
    image:
      repository: sunbirded.azurecr.io/neo4j
      tag: 3.3.0
    port: 7687
    provisioning:
      annotations:
        helm.sh/hook-weight: "-4"
    shard_id: 1
  postgresql:
    databases:
    - name: keycloak
    - name: quartz
    - name: userorg
    - name: enc-keys
    - name: registry
    enabled: true
    fullnameOverride: postgresql
    host: postgresql
    persistence:
      size: 25Gi
    port: 5432
    postgresqlPassword: postgres
    postgresqlUsername: postgres
    provisioning:
      annotations:
        helm.sh/hook-weight: "-4"
  provisioningAnnotations:
    helm.sh/hook-weight: "-4"
  redis:
    auth:
      enabled: false
    commonAnnotations:
      helm.sh/hook-weight: "-5"
    enabled: true
    fullnameOverride: redis
    host: redis-master
    master:
      persistence:
        size: 25Gi
    port: 6379
    replica:
      replicaCount: 0
  zookeeper:
    fullnameOverride: zookeeper
    host: zookeeper
    nameOverride: zookeeper
    persistence:
      size: 2Gi
    port: 2181
groups:
  access_keys_location: /keys/
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /config
  content_service_url: http://search-service:9000
  enable_tenant_config: '*'
  enable_userid_redis_cache: "true"
  fullnameOverride: groups
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  groups_redis_ttl: "86400"
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/groups_service
    tag: release-7.0.0_RC1_e82e95d_3
  ingress: {}
  initContainers: {}
  isMultiDCEnabled: "false"
  java_options: -Xmx500m
  livenessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 15
    periodSeconds: 15
  log4j_java_options: '"-Dlog4j2.formatMsgNoLookups=true"'
  max_activity_limit: "100"
  max_group_limit: "50"
  max_group_members_limit: "150"
  nodeSelector: {}
  notification_service_api_url: /v2/notification/send
  notification_service_base_url: http://notification-service:9000
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 15
    periodSeconds: 15
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1G
    requests:
      cpu: 100m
      memory: 100M
  securityContext: {}
  service:
    ports:
    - name: http
      port: 9000
      targetPort: 9000
    type: ClusterIP
  serviceAccount:
    create: true
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  sidecars: {}
  sunbird_cassandra_password: ""
  sunbird_cassandra_username: ""
  sunbird_cs_search_url: /v3/search
  sunbird_kafka_url: http://kafka:9092
  sunbird_keycloak_required_action_link_expiration_seconds: "2592000"
  sunbird_keycloak_user_federation_provider_id: cassandrafederationid
  sunbird_sso_client_id: lms
  sunbird_sso_client_secret: lms_client_secret
  sunbird_sso_password: ""
  sunbird_sso_realm: sunbird
  sunbird_sso_username: ""
  sunbird_user_service_search_url: /private/user/v1/search
  tolerations: []
  user_redis_ttl: "3600"
  userorg_service_url: http://userorg-service:9000
kafka:
  advertisedListeners: []
  affinity: {}
  allowEveryoneIfNoAclFound: true
  allowPlaintextListener: true
  args: []
  auth:
    clientProtocol: plaintext
    externalClientProtocol: ""
    interBrokerProtocol: plaintext
    sasl:
      interBrokerMechanism: plain
      jaas:
        clientPasswords: []
        clientUsers:
        - user
        existingSecret: ""
        interBrokerPassword: ""
        interBrokerUser: admin
        zookeeperPassword: ""
        zookeeperUser: ""
      mechanisms: plain,scram-sha-256,scram-sha-512
    tls:
      autoGenerated: false
      endpointIdentificationAlgorithm: https
      existingSecret: ""
      existingSecrets: []
      jksKeystoreSAN: ""
      jksTruststore: ""
      jksTruststoreSecret: ""
      password: ""
      pemChainIncluded: false
      type: jks
    zookeeper:
      tls:
        enabled: false
        existingSecret: ""
        existingSecretKeystoreKey: zookeeper.keystore.jks
        existingSecretTruststoreKey: zookeeper.truststore.jks
        passwordsSecret: ""
        passwordsSecretKeystoreKey: keystore-password
        passwordsSecretTruststoreKey: truststore-password
        type: jks
        verifyHostname: true
  authorizerClassName: ""
  autoCreateTopicsEnable: true
  brokerRackAssignment: ""
  clientProtocol: PLAINTEXT
  clusterDomain: cluster.local
  command:
  - /scripts/setup.sh
  common:
    exampleValue: common-chart
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      imagePullSecrets: []
      imageRegistry: ""
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      storageClass: ""
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  commonLabels: {}
  config: ""
  containerPorts:
    client: 9092
    external: 9094
    internal: 9093
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  defaultReplicationFactor: 1
  deleteTopicEnable: false
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  existingConfigmap: ""
  existingLog4jConfigMap: ""
  externalAccess:
    autoDiscovery:
      enabled: false
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/kubectl
        tag: 1.25.5-debian-11-r2
      resources:
        limits: {}
        requests: {}
    enabled: false
    service:
      annotations: {}
      domain: ""
      extraPorts: []
      labels: {}
      loadBalancerAnnotations: []
      loadBalancerIPs: []
      loadBalancerNames: []
      loadBalancerSourceRanges: []
      nodePorts: []
      ports:
        external: 9094
      publishNotReadyAddresses: false
      type: LoadBalancer
      useHostIPs: false
      usePodIPs: false
  externalZookeeper:
    servers: []
  extraDeploy: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: kafka
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    imagePullSecrets: []
    imageRegistry: ""
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    storageClass: ""
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  heapOpts: -Xmx1024m -Xms1024m
  host: kafka
  hostAliases: []
  hostIPC: false
  hostNetwork: false
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/kafka
    tag: 3.3.1-debian-11-r25
  initContainers: []
  interBrokerListenerName: INTERNAL
  kubeVersion: ""
  lifecycleHooks: {}
  listenerSecurityProtocolMap: ""
  listeners: []
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  log4j: ""
  logFlushIntervalMessages: _10000
  logFlushIntervalMs: 1000
  logPersistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: false
    existingClaim: ""
    mountPath: /opt/bitnami/kafka/logs
    selector: {}
    size: 8Gi
    storageClass: ""
  logRetentionBytes: _1073741824
  logRetentionCheckIntervalMs: 300000
  logRetentionHours: 168
  logSegmentBytes: _1073741824
  logsDirs: /bitnami/kafka/data
  maxMessageBytes: _1000012
  metrics:
    jmx:
      config: |-
        jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:5555/jmxrmi
        lowercaseOutputName: true
        lowercaseOutputLabelNames: true
        ssl: false
        {{- if .Values.metrics.jmx.whitelistObjectNames }}
        whitelistObjectNames: ["{{ join "\",\"" .Values.metrics.jmx.whitelistObjectNames }}"]
        {{- end }}
      containerPorts:
        metrics: 5556
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      enabled: false
      existingConfigmap: ""
      extraRules: ""
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/jmx-exporter
        tag: 0.17.2-debian-11-r29
      resources:
        limits: {}
        requests: {}
      service:
        annotations:
          prometheus.io/path: /
          prometheus.io/port: '{{ .Values.metrics.jmx.service.ports.metrics }}'
          prometheus.io/scrape: "true"
        clusterIP: ""
        ports:
          metrics: 5556
        sessionAffinity: None
      whitelistObjectNames:
      - kafka.controller:*
      - kafka.server:*
      - java.lang:*
      - kafka.network:*
      - kafka.log:*
    kafka:
      affinity: {}
      args: []
      certificatesSecret: ""
      command: []
      containerPorts:
        metrics: 9308
      containerSecurityContext:
        enabled: true
        runAsNonRoot: true
        runAsUser: 1001
      enabled: false
      extraFlags: {}
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/kafka-exporter
        tag: 1.6.0-debian-11-r40
      initContainers: []
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podSecurityContext:
        enabled: true
        fsGroup: 1001
      priorityClassName: ""
      resources:
        limits: {}
        requests: {}
      schedulerName: ""
      service:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '{{ .Values.metrics.kafka.service.ports.metrics }}'
          prometheus.io/scrape: "true"
        clusterIP: ""
        ports:
          metrics: 9308
        sessionAffinity: None
      serviceAccount:
        automountServiceAccountToken: true
        create: true
        name: ""
      sidecars: []
      tlsCaCert: ca-file
      tlsCaSecret: ""
      tlsCert: cert-file
      tlsKey: key-file
      tolerations: []
      topologySpreadConstraints: []
    prometheusRule:
      enabled: false
      groups: []
      labels: {}
      namespace: ""
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  minBrokerId: 0
  nameOverride: ""
  networkPolicy:
    allowExternal: true
    egressRules:
      customRules: []
    enabled: false
    explicitNamespacesSelector: {}
    externalAccess:
      from: []
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  numIoThreads: 8
  numNetworkThreads: 3
  numPartitions: 1
  numRecoveryThreadsPerDataDir: 1
  offsetsTopicReplicationFactor: 1
  pdb:
    create: false
    maxUnavailable: 1
    minAvailable: ""
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    labels: {}
    mountPath: /bitnami/kafka
    selector: {}
    size: 25Gi
    storageClass: ""
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: Parallel
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  port: 9092
  priorityClassName: ""
  provisioning:
    args: []
    auth:
      tls:
        caCert: ca.crt
        cert: tls.crt
        certificatesSecret: ""
        key: tls.key
        keyPassword: ""
        keyPasswordSecretKey: key-password
        keystore: keystore.jks
        keystorePassword: ""
        keystorePasswordSecretKey: keystore-password
        passwordsSecret: ""
        truststore: truststore.jks
        truststorePassword: ""
        truststorePasswordSecretKey: truststore-password
        type: jks
    command: []
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    enabled: false
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraProvisioningCommands: []
    extraVolumeMounts: []
    extraVolumes: []
    initContainers: []
    nodeSelector: {}
    numPartitions: 1
    parallel: 1
    podAnnotations: {}
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    postScript: ""
    preScript: ""
    replicationFactor: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    serviceAccount:
      automountServiceAccountToken: true
      create: false
      name: ""
    sidecars: []
    tolerations: []
    topics: []
    waitForKafka: true
  rbac:
    create: false
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    headless:
      annotations: {}
      labels: {}
      publishNotReadyAddresses: false
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      client: ""
      external: ""
    ports:
      client: 9092
      external: 9094
      internal: 9093
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  sidecars: []
  socketReceiveBufferBytes: 102400
  socketRequestMaxBytes: _104857600
  socketSendBufferBytes: 102400
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  superUsers: User:admin
  terminationGracePeriodSeconds: ""
  tolerations: []
  topologySpreadConstraints: []
  transactionStateLogMinIsr: 1
  transactionStateLogReplicationFactor: 1
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r63
    resources:
      limits: {}
      requests: {}
  zookeeper:
    affinity: {}
    args: []
    auth:
      client:
        clientPassword: ""
        clientUser: ""
        enabled: false
        existingSecret: ""
        serverPasswords: ""
        serverUsers: ""
      quorum:
        enabled: false
        existingSecret: ""
        learnerPassword: ""
        learnerUser: ""
        serverPasswords: ""
        serverUsers: ""
    autopurge:
      purgeInterval: 0
      snapRetainCount: 3
    clusterDomain: cluster.local
    command:
    - /scripts/setup.sh
    common:
      exampleValue: common-chart
      global:
        cassandra:
          commonAnnotations:
            helm.sh/hook-weight: "-5"
          enabled: true
          extraEnvVars:
          - name: CASSANDRA_AUTHENTICATOR
            value: AllowAllAuthenticator
          - name: CASSANDRA_AUTHORIZER
            value: AllowAllAuthorizer
          fullnameOverride: cassandra
          host: cassandra
          image:
            tag: 3.11.13-debian-11-r3
          nameOverride: cassandra
          persistence:
            size: 25Gi
          port: 9042
          provisioning:
            annotations:
              helm.sh/hook-weight: "-4"
        druid:
          brokerhost: druid-raw-brokers
          brokerport: 8082
          commonAnnotations:
            helm.sh/hook-weight: "-5"
          coordinatorhost: druid-raw-coordinators
          coordinatorport: 8081
          enabled: true
          fullnameOverride: druid
          host: druid-raw-routers
          overlordhost: druid-raw-overlords
          overlordport: 8090
          persistence:
            size: 25Gi
          port: 8888
        elasticsearch:
          commonAnnotations:
            helm.sh/hook-weight: "-5"
          coordinating:
            replicaCount: 0
          data:
            replicaCount: 0
          enabled: true
          fullnameOverride: elasticsearch
          host: elasticsearch
          image:
            registry: docker.io
            repository: bitnami/elasticsearch
            tag: 6.8.23
          ingest:
            enabled: false
          master:
            heapSize: 2G
            masterOnly: false
            persistence:
              size: 25Gi
            replicaCount: 1
            resources:
              limits:
                cpu: "2"
                memory: 4Gi
              requests:
                cpu: "1"
                memory: 2Gi
          port: 9200
          provisioning:
            annotations:
              helm.sh/hook-weight: "-4"
          sysctlImage:
            registry: docker.io
            repository: bitnami/bitnami-shell-archived
            tag: 11-debian-11-r54
        imagePullSecrets: []
        imageRegistry: ""
        kafka:
          clientProtocol: PLAINTEXT
          commonAnnotations:
            helm.sh/hook-weight: "-5"
          enabled: true
          fullnameOverride: kafka
          host: kafka
          image:
            registry: docker.io
            repository: bitnami/kafka
            tag: 3.3.1-debian-11-r25
          persistence:
            size: 25Gi
          port: 9092
          zookeeper:
            fullnameOverride: zookeeper
            host: zookeeper
            nameOverride: zookeeper
            persistence:
              size: 2Gi
            port: 2181
        keycloak_key_configmap: keycloak-key
        keycloak_kid_keys_configmap: keycloak-kids-keys
        kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
        neo4j:
          boltPort: 8687
          commonAnnotations:
            helm.sh/hook-weight: "-5"
          enabled: true
          host: neo4j
          image:
            repository: sunbirded.azurecr.io/neo4j
            tag: 3.3.0
          port: 7687
          provisioning:
            annotations:
              helm.sh/hook-weight: "-4"
          shard_id: 1
        postgresql:
          databases:
          - name: keycloak
          - name: quartz
          - name: userorg
          - name: enc-keys
          - name: registry
          enabled: true
          fullnameOverride: postgresql
          host: postgresql
          persistence:
            size: 25Gi
          port: 5432
          postgresqlPassword: postgres
          postgresqlUsername: postgres
          provisioning:
            annotations:
              helm.sh/hook-weight: "-4"
        provisioningAnnotations:
          helm.sh/hook-weight: "-4"
        redis:
          auth:
            enabled: false
          commonAnnotations:
            helm.sh/hook-weight: "-5"
          enabled: true
          fullnameOverride: redis
          host: redis-master
          master:
            persistence:
              size: 25Gi
          port: 6379
          replica:
            replicaCount: 0
        storageClass: ""
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
    commonAnnotations: {}
    commonLabels: {}
    configuration: ""
    containerPorts:
      client: 2181
      election: 3888
      follower: 2888
      tls: 3181
    containerSecurityContext:
      allowPrivilegeEscalation: false
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    dataLogDir: ""
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    enabled: true
    existingConfigmap: ""
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    fourlwCommandsWhitelist: srvr, mntr, ruok
    fullnameOverride: zookeeper
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      imagePullSecrets: []
      imageRegistry: ""
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      storageClass: ""
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    heapSize: 1024
    host: zookeeper
    hostAliases: []
    image:
      debug: false
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/zookeeper
      tag: 3.8.0-debian-11-r65
    initContainers: []
    initLimit: 10
    jvmFlags: ""
    kubeVersion: ""
    lifecycleHooks: {}
    listenOnAllIPs: false
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      probeCommandTimeout: 2
      successThreshold: 1
      timeoutSeconds: 5
    logLevel: ERROR
    maxClientCnxns: 60
    maxSessionTimeout: 40000
    metrics:
      containerPort: 9141
      enabled: false
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      service:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '{{ .Values.metrics.service.port }}'
          prometheus.io/scrape: "true"
        port: 9141
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        honorLabels: false
        interval: ""
        jobLabel: ""
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
        selector: {}
    minServerId: 1
    nameOverride: zookeeper
    namespaceOverride: ""
    networkPolicy:
      allowExternal: true
      enabled: false
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: 1
      minAvailable: ""
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataLogDir:
        existingClaim: ""
        selector: {}
        size: 8Gi
      enabled: true
      existingClaim: ""
      labels: {}
      selector: {}
      size: 2Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    port: 2181
    preAllocSize: 65536
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      probeCommandTimeout: 2
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      disableBaseClientPort: false
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
        publishNotReadyAddresses: true
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        client: ""
        tls: ""
      ports:
        client: 2181
        election: 3888
        follower: 2888
        tls: 3181
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: false
      name: ""
    sidecars: []
    snapCount: 100000
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    syncLimit: 5
    tickTime: 2000
    tls:
      client:
        auth: none
        autoGenerated: false
        enabled: false
        existingSecret: ""
        existingSecretKeystoreKey: ""
        existingSecretTruststoreKey: ""
        keystorePassword: ""
        keystorePath: /opt/bitnami/zookeeper/config/certs/client/zookeeper.keystore.jks
        passwordsSecretKeystoreKey: ""
        passwordsSecretName: ""
        passwordsSecretTruststoreKey: ""
        truststorePassword: ""
        truststorePath: /opt/bitnami/zookeeper/config/certs/client/zookeeper.truststore.jks
      quorum:
        auth: none
        autoGenerated: false
        enabled: false
        existingSecret: ""
        existingSecretKeystoreKey: ""
        existingSecretTruststoreKey: ""
        keystorePassword: ""
        keystorePath: /opt/bitnami/zookeeper/config/certs/quorum/zookeeper.keystore.jks
        passwordsSecretKeystoreKey: ""
        passwordsSecretName: ""
        passwordsSecretTruststoreKey: ""
        truststorePassword: ""
        truststorePath: /opt/bitnami/zookeeper/config/certs/quorum/zookeeper.truststore.jks
      resources:
        limits: {}
        requests: {}
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
    volumePermissions:
      containerSecurityContext:
        enabled: true
        runAsUser: 0
      enabled: false
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 11-debian-11-r60
      resources:
        limits: {}
        requests: {}
  zookeeperChrootPath: ""
  zookeeperConnectionTimeoutMs: 6000
keycloak:
  affinity: {}
  ameOverride: keycloak
  android_client_secret: android
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  cassandra_federation_provider_id: cassandrafederationid
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    helm.sh/hook-weight: "-3"
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /config
  desktop_client_secret: desktop_client_secret
  direct_grant_client_secret: direct-grant
  fullnameOverride: keycloak
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  google_android_client_secret: google-auth-android
  google_auth_client_secret: google-auth
  google_auth_desktop_client_secret: google-auth-desktop
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: keshavprasad/keycloak
    tag: 7.0.1
  ingress: {}
  initContainers: {}
  keycloak_database_name: keycloak
  keycloak_database_type: postgres
  keycloak_password: admin
  keycloak_user: admin
  livenessProbe:
    failureThreshold: 5
    httpGet:
      path: /auth
      port: 8080
    initialDelaySeconds: 15
    periodSeconds: 15
  lms_client_secret: lms
  mail_server_from_email: admin@example.com
  mail_server_host: smtp.example.com
  mail_server_password: password
  mail_server_username: admin
  nodeSelector: {}
  nodebb_client_secret: nodebb
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe:
    failureThreshold: 5
    httpGet:
      path: /auth
      port: 8080
    initialDelaySeconds: 15
    periodSeconds: 15
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    ports:
    - name: http
      port: 8080
      targetPort: 8080
    - name: https
      port: 8443
      targetPort: 8443
    - name: admin
      port: 9990
      targetPort: 9990
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor: {}
  sidecars: {}
  sunbird_user_service_base_url: http://userorg-service:9000
  tenant_name: sunbird
  tolerations: []
  trampoline_android_client_secret: trampoline-android
  trampoline_client_secret: trampoline
  trampoline_desktop_client_secret: trampoline-desktop
keycloak-kids-keys:
  KEYCLOAK_ADMIN_PASSWORD: admin
  KEYCLOAK_ADMIN_USERNAME: admin
  KEYCLOAK_PORT: "8080"
  KEYCLOAK_REALM: sunbird
  KEYCLOAK_URL: keycloak
  POSTGRES_DB: keycloak
  affinity: {}
  autoscaling: {}
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  configmap: {}
  fullnameOverride: keycloak-kids-keys
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/keycloak-kids-keys
    tag: 0.1.5
  ingress: {}
  initContainers: {}
  livenessProbe: {}
  nameOverride: keycloak-kids-keys
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe: {}
  replicaCount: 1
  resources: {}
  securityContext: {}
  service: {}
  serviceAccount:
    create: true
    name: ""
  serviceMonitor: {}
  sidecars: {}
  tolerations: []
lms:
  actor_hostname: actor-service
  affinity: {}
  api_actor_provider: local
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  background_actor_provider: local
  bind_hostname: 0.0.0.0
  cloud_storage_path_prefix_dial: dial
  cloud_store_base_path_placeholder: ""
  collection_summary_agg_cache_ttl: "21600"
  collection_summary_agg_data_source: audit-rollup-syncts
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /home/sunbird/lms/lms-service-1.0-SNAPSHOT/config
  content_read_url: /content/v3/read/
  content_service_url: http://content-service:9000
  core_vault_sunbird_sso_password: admin
  core_vault_sunbird_sso_publickey: ""
  core_vault_sunbird_sso_username: admin
  druid_proxy_api_endpoint: /druid/v2/
  druid_proxy_api_port: "8082"
  enrollment_list_size: "1000"
  envoy_probes:
    failureThreshold: 2
    httpGet:
      path: /ready
      port: 10000
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  envoy_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  fullnameOverride: lms
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  group_activity_agg_cache_enable: "false"
  group_activity_agg_cache_ttl: "3600"
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/lms_service
    tag: release-7.0.0_RC2_d14e96b_32
  ingress: {}
  init_container_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  initContainers: {}
  isMultiDCEnabled: "false"
  java_options: -Xmx600m
  keycloak_realm: sunbird
  keys_basepath: /keys/
  learning_content_props_to_add: mimeType,contentType,name,code,description,keywords,framework,copyright,topic
  learning_service_base_url: http://learning:8080/learning-service
  learning_service_url: http://learning:8080/learning-service
  limit_managed_user_creation: "true"
  livenessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  log4j_java_options: -Dlog4j2.formatMsgNoLookups=true
  mail_server_from_email: ""
  mail_server_host: ""
  mail_server_password: ""
  mail_server_port: ""
  mail_server_username: ""
  managed_user_limit: "30"
  nodeSelector: {}
  opa_enabled: true
  opa_probes:
    failureThreshold: 3
    httpGet:
      path: /health?plugins
      port: 8282
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  opa_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  redis_connection_idle_max: "32"
  redis_connection_idle_min: "1"
  redis_connection_max: "64"
  redis_connection_minEvictableIdleTimeSeconds: "120"
  redis_connection_timeBetweenEvictionRunsSeconds: "300"
  redis_dbIndex: "2"
  redis_experimentIndex: "10"
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  securityContext: {}
  service:
    ports:
    - name: http
      port: 9000
      targetPort: 9000
    type: ClusterIP
  serviceAccount:
    create: true
  serviceMonitor:
    enabled: true
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels:
      release: monitoring
    scrapeTimeout: 10s
  sidecars: {}
  sunbird_analytics_api_base_url: http://analytics-service:9000
  sunbird_api_base_url: http://knowledge-mw-service:5000
  sunbird_api_mgr_base_url: http://knowledge-mw-service:5000
  sunbird_app_name: sunbird
  sunbird_badger_baseurl: http://badger:8004
  sunbird_cache_enable: "false"
  sunbird_cassandra_password: ""
  sunbird_cassandra_username: ""
  sunbird_cert_service_base_url: http://cert-service:9000
  sunbird_cloud_service_provider: azure
  sunbird_course_batch_notification_enabled: true
  sunbird_course_batch_notification_signature: sunbird
  sunbird_cs_search_path: /v1/content/search
  sunbird_default_channel: sunbird
  sunbird_dial_service_base_url: http://dial-service:9000
  sunbird_dial_service_search_url: /dialcode/v3/search
  sunbird_email_max_recipients_limit: 100
  sunbird_encryption_mode: local
  sunbird_env_logo_url: ""
  sunbird_group_service_api_base_url: http://groups-service:9000
  sunbird_gzip_enable: "true"
  sunbird_gzip_size_threshold: "262144"
  sunbird_health_check_enable: "true"
  sunbird_installation_email: ""
  sunbird_keycloak_required_action_link_expiration_seconds: 2592000
  sunbird_keycloak_user_federation_provider_id: cassandrafederationid
  sunbird_msg_91_auth: ""
  sunbird_msg_sender: ""
  sunbird_mw_system_host: lms-service
  sunbird_mw_system_port: 8088
  sunbird_open_saber_bridge_enable: "false"
  sunbird_otp_expiration: 1800
  sunbird_otp_length: 6
  sunbird_pg_db: quartz
  sunbird_quartz_mode: cluster
  sunbird_registry_service_baseurl: http://registry-service:8081
  sunbird_remote_bg_req_router_path: kka.tcp://SunbirdMWSystem@actor-service:8088/user/BackgroundRequestRouter
  sunbird_remote_req_router_path: akka.tcp://SunbirdMWSystem@actor-service:8088/user/RequestRouter
  sunbird_search_service_api_base_url: http://search-service:9000
  sunbird_sso_client_id: lms
  sunbird_sso_client_secret: lms_client_secret
  sunbird_sso_password: admin
  sunbird_sso_realm: sunbird
  sunbird_sso_username: admin
  sunbird_telemetry_base_url: http://telemetry-service:9001
  sunbird_time_zone: Asia/Kolkata
  sunbird_url_shortner_access_token: ""
  sunbird_url_shortner_enable: false
  sunbird_user_bulk_upload_size: 1001
  sunbird_user_org_api_base_url: http://userorg-service:9000
  sunbird_user_profile_field_default_visibility: private
  sunbird_user_qrcode_courses_limit: "5000"
  sunbird_user_search_cretordetails_fields: id,firstName,lastName
  sunbird_user_service_api_base_url: http://userorg:9000
  telemetry_pdata_pid: lms-service
  telemetry_queue_threshold_value: "100"
  tolerations: []
  user_enrolments_response_cache_enable: "true"
  user_enrolments_response_cache_ttl: "300"
migration:
  cassandra:
    jarUrl: https://github.com/user/repo/releases/download/v1.0/migration.jar
    waitTime: 120
  elasticsearch:
    waitTime: 120
  postgresql:
    waitTime: 120
neo4j:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  backend_event_topic_id: dev.knowlg.telemetry.backend
  boltPort: 8687
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    helm.sh/hook-weight: "-5"
    reloader.stakater.com/auto: "true"
  commonLabels: {}
  configmap:
    enabled: true
  enabled: true
  fullnameOverride: neo4j
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  host: neo4j
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/neo4j
    tag: 3.3.0
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - /
  kafka:
    host: kafka
    port: 9092
  learning_graph_events: dev.knowlg.learning.graph.events
  livenessProbe: {}
  logstash:
    configmap:
      name: logstash-config
    image: logstash:6.8.21
    imagePullPolicy: Always
    input:
      file_path: /txn-handler/learning_graph_event_neo4j.log
      sincedb_path: /usr/share/logstash/.sincedb_learning_graph_event_mw
      type: graph_event
    mountPath:
      config: /usr/share/logstash/pipeline/logstash.conf
      name: logstash.conf
      sharedData: /txn-handler
    name: logstash
  nameOverride: neo4j
  neo4j:
    env:
      name: NEO4J_dbms_security_auth__enabled
      value: "false"
    mountPath:
      neo4jData: /data
      sharedData: /var/lib/neo4j/logs/plugins/txn-handler
    pvc:
      accessModes: ReadWriteOnce
      annotations: keep
      claimName: neo4j-claim
      resources:
        requests:
          storage: 25Gi
  nodeSelector: {}
  podAnnotations: {}
  port: 7687
  provisioning:
    annotations:
      helm.sh/hook-weight: "-4"
  readinessProbe: {}
  replicaCount: 1
  resources:
    requests:
      cpu: "0.5"
      memory: 2Gi
  service:
    ports:
    - name: cypher-port
      port: 7474
      targetPort: 7474
    - name: bolt-port-1
      port: 7687
      targetPort: 7687
    - name: bolt-port-2
      port: 8687
      targetPort: 8687
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  shard_id: 1
  tolerations: []
notification:
  LEARNER_SERVICE_PORT: http://userorg-service:9000
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /config
  envoy_probes:
    failureThreshold: 2
    httpGet:
      path: /ready
      port: 10000
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  envoy_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  fullnameOverride: notification
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/notification_service
    tag: release-7.0.0_RC4_db7555c_10
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - /
  init_container_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  initContainers: {}
  isMultiDCEnabled: "false"
  keys_basepath: /keys/
  livenessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nameOverride: notification
  nodeSelector: {}
  notification_category_type_config: certificateUpdate
  opa_enabled: true
  opa_probes:
    failureThreshold: 3
    httpGet:
      path: /health?plugins
      port: 8282
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  opa_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  podAnnotations: {}
  podSecurityContext: {}
  readinessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  securityContext: {}
  service:
    ports:
    - name: http
      port: 9000
      targetPort: 9000
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: true
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels:
      release: monitoring
    scrapeTimeout: 10s
  sidecars: {}
  sunbird_cassandra_notification_keyspace: sunbird_notifications
  sunbird_keycloak_required_action_link_expiration_seconds: "2592000"
  sunbird_keycloak_user_federation_provider_id: cassandrafederationid
  sunbird_mail_server_from_email: ""
  sunbird_mail_server_host: ""
  sunbird_mail_server_password: ""
  sunbird_mail_server_port: ""
  sunbird_mail_server_username: ""
  sunbird_msg_91_auth: ""
  sunbird_notification_msg_default_sender: ""
  sunbird_sso_client_id: lms
  sunbird_sso_client_secret: lms
  sunbird_sso_password: admin
  sunbird_sso_realm: sunbird
  sunbird_sso_username: admin
  sunbird_us_org_read_url: /v1/org/read
  sunbird_us_system_setting_url: /api/data/v1/system/settings/list
  tolerations: []
postgres_migration_image: bitnami/postgresql:11.14.0-debian-10-r49
postgresql:
  audit:
    clientMinMessages: error
    logConnections: false
    logDisconnections: false
    logHostname: false
    logLinePrefix: ""
    logTimezone: ""
    pgAuditLog: ""
    pgAuditLogCatalog: "off"
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      imagePullSecrets: []
      imageRegistry: ""
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        existingSecret: ""
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlDatabase: ""
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        replicationPassword: ""
        servicePort: ""
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      storageClass: ""
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  commonLabels: {}
  configurationConfigMap: ""
  containerPorts:
    postgresql: 5432
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  databases:
  - name: keycloak
  - name: quartz
  - name: userorg
  - name: enc-keys
  - name: registry
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  existingSecret: ""
  extendedConfConfigMap: ""
  extraDeploy: []
  extraEnv: []
  extraEnvVarsCM: ""
  fullnameOverride: postgresql
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    imagePullSecrets: []
    imageRegistry: ""
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      existingSecret: ""
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlDatabase: ""
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      replicationPassword: ""
      servicePort: ""
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    storageClass: ""
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  host: postgresql
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/postgresql
    tag: 11.14.0-debian-10-r49
  initdbPassword: ""
  initdbScripts: {}
  initdbScriptsConfigMap: ""
  initdbScriptsSecret: ""
  initdbUser: ""
  ldap:
    baseDN: ""
    bind_password: ""
    bindDN: ""
    enabled: false
    port: ""
    prefix: ""
    scheme: ""
    search_attr: ""
    search_filter: ""
    server: ""
    suffix: ""
    tls: ""
    url: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    customMetrics: {}
    enabled: false
    extraEnvVars: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.10.1-debian-10-r14
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources: {}
    securityContext:
      enabled: false
      runAsUser: 1001
    service:
      annotations:
        prometheus.io/port: "9187"
        prometheus.io/scrape: "true"
      loadBalancerIP: ""
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      interval: ""
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
  nameOverride: ""
  networkPolicy:
    allowExternal: true
    enabled: false
    explicitNamespacesSelector: {}
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    mountPath: /bitnami/postgresql
    selector: {}
    size: 25Gi
    snapshotName: ""
    storageClass: ""
    subPath: ""
  pgHbaConfiguration: ""
  port: 5432
  postgresqlConfiguration: {}
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlDatabase: ""
  postgresqlDbUserConnectionLimit: ""
  postgresqlExtendedConf: {}
  postgresqlInitdbArgs: ""
  postgresqlInitdbWalDir: ""
  postgresqlMaxConnections: ""
  postgresqlPassword: postgres
  postgresqlPghbaRemoveFilters: ""
  postgresqlPostgresConnectionLimit: ""
  postgresqlPostgresPassword: ""
  postgresqlSharedPreloadLibraries: pgaudit
  postgresqlStatementTimeout: ""
  postgresqlTcpKeepalivesCount: ""
  postgresqlTcpKeepalivesIdle: ""
  postgresqlTcpKeepalivesInterval: ""
  postgresqlUsername: postgres
  primary:
    affinity: {}
    annotations: {}
    extraInitContainers: []
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    labels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    priorityClassName: ""
    service:
      clusterIP: ""
      nodePort: ""
      type: ""
    sidecars: []
    tolerations: []
  primaryAsStandBy:
    enabled: false
    primaryHost: ""
    primaryPort: ""
  provisioning:
    annotations:
      helm.sh/hook-weight: "-4"
  psp:
    create: false
  rbac:
    create: false
  readReplicas:
    affinity: {}
    annotations: {}
    extraInitContainers: []
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    labels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      enabled: true
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    priorityClassName: ""
    resources: {}
    service:
      clusterIP: ""
      nodePort: ""
      type: ""
    sidecars: []
    tolerations: []
    topologySpreadConstraints: []
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replication:
    applicationName: my_application
    enabled: false
    numSynchronousReplicas: 0
    password: repl_password
    readReplicas: 1
    singleService: true
    synchronousCommit: "off"
    uniqueServices: false
    user: repl_user
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
  schedulerName: ""
  securityContext:
    enabled: true
    fsGroup: 1001
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort: ""
    port: 5432
    type: ClusterIP
  serviceAccount:
    autoMount: false
    enabled: false
    name: ""
  shmVolume:
    chmod:
      enabled: true
    enabled: true
    sizeLimit: ""
  startupProbe:
    enabled: false
    failureThreshold: 10
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
  terminationGracePeriodSeconds: ""
  tls:
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    crlFilename: ""
    enabled: false
    preferServerCiphers: true
  updateStrategy:
    type: RollingUpdate
  usePasswordFile: false
  volumePermissions:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r326
    securityContext:
      runAsUser: 0
print:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  configmap:
    enabled: true
    mountPath: /config
  fullnameOverride: ""
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/print-service
    tag: release-3.1.0_f9a608c
  ingress: {}
  initContainers: {}
  livenessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 5000
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nameOverride: ""
  nodeSelector: {}
  opa:
    enabled: false
  podAnnotations: {}
  readinessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 5000
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  securityContext: {}
  service:
    ports:
    - name: http
      port: 5000
      targetPort: 5000
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: false
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels: {}
    scrapeTimeout: 10s
  sidecars: {}
  tolerations: []
provisioningAnnotations:
  helm.sh/hook-weight: "-4"
redis:
  architecture: replication
  auth:
    enabled: false
    existingSecret: ""
    existingSecretPasswordKey: ""
    password: ""
    sentinel: true
    usePasswordFiles: false
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      imagePullSecrets: []
      imageRegistry: ""
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        password: ""
        port: 6379
        replica:
          replicaCount: 0
      storageClass: ""
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
  commonAnnotations:
    helm.sh/hook-weight: "-5"
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  existingConfigmap: ""
  extraDeploy: []
  fullnameOverride: redis
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    imagePullSecrets: []
    imageRegistry: ""
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      password: ""
      port: 6379
      replica:
        replicaCount: 0
    storageClass: ""
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  host: redis-master
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/redis
    tag: 7.2.1-debian-11-r0
  kubeVersion: ""
  master:
    affinity: {}
    args: []
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      runAsGroup: 0
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
    count: 1
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    enableServiceLinks: true
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    kind: StatefulSet
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    minReadySeconds: 0
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      medium: ""
      path: /data
      selector: {}
      size: 25Gi
      sizeLimit: ""
      storageClass: ""
      subPath: ""
      subPathExpr: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalIPs: []
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: false
      name: ""
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  metrics:
    command: []
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      runAsGroup: 0
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraArgs: {}
    extraEnvVars: []
    extraVolumeMounts: []
    extraVolumes: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.54.0-debian-11-r0
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    podAnnotations:
      prometheus.io/port: "9121"
      prometheus.io/scrape: "true"
    podLabels: {}
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    redisTargetHost: localhost
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      port: 9121
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      podTargetLabels: []
      relabellings: []
      sampleLimit: false
      scrapeTimeout: ""
      targetLimit: false
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
  nameOverride: ""
  nameResolutionThreshold: 5
  nameResolutionTimeout: 5
  networkPolicy:
    allowExternal: true
    enabled: false
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
    metrics:
      allowExternal: true
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  podSecurityPolicy:
    create: false
    enabled: false
  port: 6379
  rbac:
    create: false
    rules: []
  replica:
    affinity: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 1
      targetCPU: ""
      targetMemory: ""
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      runAsGroup: 0
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    enableServiceLinks: true
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    minReadySeconds: 0
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      medium: ""
      path: /data
      selector: {}
      size: 8Gi
      sizeLimit: ""
      storageClass: ""
      subPath: ""
      subPathExpr: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 0
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: false
      name: ""
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  secretAnnotations: {}
  sentinel:
    annotations: {}
    args: []
    automateClusterRecovery: false
    command: []
    configuration: ""
    containerPorts:
      sentinel: 26379
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      runAsGroup: 0
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    downAfterMilliseconds: 60000
    enableServiceLinks: true
    enabled: false
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    failoverTimeout: 180000
    getMasterTimeout: 99
    image:
      debug: false
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 7.2.1-debian-11-r0
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 20
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    masterSet: mymaster
    parallelSyncs: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: false
      labels: {}
      medium: ""
      selector: {}
      size: 100Mi
      sizeLimit: ""
      storageClass: ""
    preExecCmds: []
    quorum: 2
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    redisShutdownWaitFailover: true
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
        sentinel: ""
      ports:
        redis: 6379
        sentinel: 26379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  serviceBindings:
    enabled: false
  sysctl:
    command: []
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/os-shell
      tag: 11-debian-11-r60
    mountHostSys: false
    resources:
      limits: {}
      requests: {}
  tls:
    authClients: true
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    dhParamsFilename: ""
    enabled: false
    existingSecret: ""
  useExternalDNS:
    additionalAnnotations: {}
    annotationKey: external-dns.alpha.kubernetes.io/
    enabled: false
    suffix: ""
  useHostnames: true
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/os-shell
      tag: 11-debian-11-r60
    resources:
      limits: {}
      requests: {}
registry:
  KAFKA_BROKER_ID: 1
  KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  ZOOKEEPER_TICK_TIME: 2000
  affinity: {}
  async_enabled: "true"
  auditTaskExecutor_queueCapacity: 100
  authentication_enabled: "false"
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /home/sunbirdrc/config/public/_schemas
  connectionInfo_maxPoolSize: 200
  elastic_search_enabled: "true"
  enable_external_templates: "true"
  envoy_probes:
    failureThreshold: 2
    httpGet:
      path: /ready
      port: 10000
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  envoy_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  fullnameOverride: registry
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/sunbird-rc-core
    tag: release-5.1.0_ece7ed3_14
  ingress: {}
  init_container_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  initContainers: {}
  kafka_advertised_listeners: kafka
  kafka_zookeeper_connect: zookeeper
  logging_level: INFO
  logging_level_root: INFO
  nodeSelector: {}
  opa_enabled: false
  opa_probes:
    failureThreshold: 3
    httpGet:
      path: /health?plugins
      port: 8282
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  opa_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  pdf_url: http://certificateapi-service:8078/api/v1/certificatePDF
  podAnnotations: {}
  registry_database: registry
  registry_inter_broker_listener_name: INTERNAL
  registry_kafka_broker_id: "1"
  registry_listener_security_protocol_map: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
  registry_offsets_topic_replication_factor: 1
  registry_zookeeper_tick_time: "2000"
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 2G
    requests:
      cpu: 100m
      memory: 100Mi
  search_provider: dev.sunbirdrc.registry.service.ElasticSearchService
  search_providerName: dev.sunbirdrc.registry.service.ElasticSearchService
  service:
    ports:
    - name: http
      port: 8081
      targetPort: 8081
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: true
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels:
      release: monitoring
    scrapeTimeout: 10s
  sidecars: {}
  sign_url: http://certificatesign-service:8079/sign
  signature_enabled: "true"
  taskExecutor_index_queueCapacity: 100
  template_base_url: http://registry-service:8081/api/v1/templates/
  tolerations: []
  upstream_url: ' {{ .Values.global.cloud_storage.cloud_public_storage_accountname
    }}:{{ .Values.global.cloud_storage.cloud_storage_content_bucketname }}'
  webhook_enabled: "true"
  workflow_enable: "false"
  zookeeper_client_port: "2181"
userorg:
  PORTAL_SERVICE_PORT: http://player:3000
  actor_hostname: actor-service
  affinity: {}
  api_actor_provider: local
  autoscaling:
    enabled: false
    maxReplicas: 100
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - resource:
        name: memory
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    minReplicas: 1
  background_actor_provider: local
  bind_hostname: 0.0.0.0
  common:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    fullnameOverride: ""
    global:
      cassandra:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        extraEnvVars:
        - name: CASSANDRA_AUTHENTICATOR
          value: AllowAllAuthenticator
        - name: CASSANDRA_AUTHORIZER
          value: AllowAllAuthorizer
        fullnameOverride: cassandra
        host: cassandra
        image:
          tag: 3.11.13-debian-11-r3
        nameOverride: cassandra
        persistence:
          size: 25Gi
        port: 9042
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      druid:
        brokerhost: druid-raw-brokers
        brokerport: 8082
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinatorhost: druid-raw-coordinators
        coordinatorport: 8081
        enabled: true
        fullnameOverride: druid
        host: druid-raw-routers
        overlordhost: druid-raw-overlords
        overlordport: 8090
        persistence:
          size: 25Gi
        port: 8888
      elasticsearch:
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        coordinating:
          replicaCount: 0
        data:
          replicaCount: 0
        enabled: true
        fullnameOverride: elasticsearch
        host: elasticsearch
        image:
          registry: docker.io
          repository: bitnami/elasticsearch
          tag: 6.8.23
        ingest:
          enabled: false
        master:
          heapSize: 2G
          masterOnly: false
          persistence:
            size: 25Gi
          replicaCount: 1
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
        port: 9200
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        sysctlImage:
          registry: docker.io
          repository: bitnami/bitnami-shell-archived
          tag: 11-debian-11-r54
      kafka:
        clientProtocol: PLAINTEXT
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: kafka
        host: kafka
        image:
          registry: docker.io
          repository: bitnami/kafka
          tag: 3.3.1-debian-11-r25
        persistence:
          size: 25Gi
        port: 9092
        zookeeper:
          fullnameOverride: zookeeper
          host: zookeeper
          nameOverride: zookeeper
          persistence:
            size: 2Gi
          port: 2181
      keycloak_key_configmap: keycloak-key
      keycloak_kid_keys_configmap: keycloak-kids-keys
      kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
      neo4j:
        boltPort: 8687
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        host: neo4j
        image:
          repository: sunbirded.azurecr.io/neo4j
          tag: 3.3.0
        port: 7687
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
        shard_id: 1
      postgresql:
        databases:
        - name: keycloak
        - name: quartz
        - name: userorg
        - name: enc-keys
        - name: registry
        enabled: true
        fullnameOverride: postgresql
        host: postgresql
        persistence:
          size: 25Gi
        port: 5432
        postgresqlPassword: postgres
        postgresqlUsername: postgres
        provisioning:
          annotations:
            helm.sh/hook-weight: "-4"
      provisioningAnnotations:
        helm.sh/hook-weight: "-4"
      redis:
        auth:
          enabled: false
        commonAnnotations:
          helm.sh/hook-weight: "-5"
        enabled: true
        fullnameOverride: redis
        host: redis-master
        master:
          persistence:
            size: 25Gi
        port: 6379
        replica:
          replicaCount: 0
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    image:
      pullPolicy: IfNotPresent
      repository: nginx
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      className: ""
      enabled: false
      hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    tolerations: []
  commonAnnotations:
    reloader.stakater.com/auto: "true"
  configmap:
    enabled: true
    mountPath: /home/sunbird/userorg-service-1.0-SNAPSHOT/config
  enable_captcha: "false"
  envoy_probes:
    failureThreshold: 2
    httpGet:
      path: /ready
      port: 10000
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  envoy_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  feed_limit: "30"
  form_api_endpoint: /plugin/v1/form/read
  fullnameOverride: userorg
  global:
    cassandra:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      extraEnvVars:
      - name: CASSANDRA_AUTHENTICATOR
        value: AllowAllAuthenticator
      - name: CASSANDRA_AUTHORIZER
        value: AllowAllAuthorizer
      fullnameOverride: cassandra
      host: cassandra
      image:
        tag: 3.11.13-debian-11-r3
      nameOverride: cassandra
      persistence:
        size: 25Gi
      port: 9042
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    druid:
      brokerhost: druid-raw-brokers
      brokerport: 8082
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinatorhost: druid-raw-coordinators
      coordinatorport: 8081
      enabled: true
      fullnameOverride: druid
      host: druid-raw-routers
      overlordhost: druid-raw-overlords
      overlordport: 8090
      persistence:
        size: 25Gi
      port: 8888
    elasticsearch:
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      coordinating:
        replicaCount: 0
      data:
        replicaCount: 0
      enabled: true
      fullnameOverride: elasticsearch
      host: elasticsearch
      image:
        registry: docker.io
        repository: bitnami/elasticsearch
        tag: 6.8.23
      ingest:
        enabled: false
      master:
        heapSize: 2G
        masterOnly: false
        persistence:
          size: 25Gi
        replicaCount: 1
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
      port: 9200
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      sysctlImage:
        registry: docker.io
        repository: bitnami/bitnami-shell-archived
        tag: 11-debian-11-r54
    kafka:
      clientProtocol: PLAINTEXT
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: kafka
      host: kafka
      image:
        registry: docker.io
        repository: bitnami/kafka
        tag: 3.3.1-debian-11-r25
      persistence:
        size: 25Gi
      port: 9092
      zookeeper:
        fullnameOverride: zookeeper
        host: zookeeper
        nameOverride: zookeeper
        persistence:
          size: 2Gi
        port: 2181
    keycloak_key_configmap: keycloak-key
    keycloak_kid_keys_configmap: keycloak-kids-keys
    kong_desktop_device_consumer_names_for_opa: '["portal", "desktop"]'
    neo4j:
      boltPort: 8687
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      host: neo4j
      image:
        repository: sunbirded.azurecr.io/neo4j
        tag: 3.3.0
      port: 7687
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
      shard_id: 1
    postgresql:
      databases:
      - name: keycloak
      - name: quartz
      - name: userorg
      - name: enc-keys
      - name: registry
      enabled: true
      fullnameOverride: postgresql
      host: postgresql
      persistence:
        size: 25Gi
      port: 5432
      postgresqlPassword: postgres
      postgresqlUsername: postgres
      provisioning:
        annotations:
          helm.sh/hook-weight: "-4"
    provisioningAnnotations:
      helm.sh/hook-weight: "-4"
    redis:
      auth:
        enabled: false
      commonAnnotations:
        helm.sh/hook-weight: "-5"
      enabled: true
      fullnameOverride: redis
      host: redis-master
      master:
        persistence:
          size: 25Gi
      port: 6379
      replica:
        replicaCount: 0
    zookeeper:
      fullnameOverride: zookeeper
      host: zookeeper
      nameOverride: zookeeper
      persistence:
        size: 2Gi
      port: 2181
  google_captcha_mobile_private_key: ""
  google_captcha_private_key: ""
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: sunbirded.azurecr.io/userorg-service
    tag: release-7.0.0_RC5_0d513be_31
  ingress: {}
  init_container_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  isMultiDCEnabled: "false"
  java_options: -Xmx600m
  keycloak_realm: sunbird
  keys_basepath: /keys/
  learner_in_memory_cache_ttl: "600"
  learning_service_url: http://learning:8080/learning-service
  livenessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  log4j_java_options: -Dlog4j2.formatMsgNoLookups=true
  mail_server_from_email: ""
  mail_server_host: ""
  mail_server_password: ""
  mail_server_port: ""
  mail_server_username: ""
  nodeSelector: {}
  notification_service_base_url: http://notification-service:9000
  opa_enabled: true
  opa_probes:
    failureThreshold: 3
    httpGet:
      path: /health?plugins
      port: 8282
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 5
  opa_resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  org_index_alias: org_alias
  podAnnotations: {}
  podSecurityContext: {}
  quartz_shadow_user_migration_timer: '''0 0 1 1/1 * ? *'''
  readinessProbe:
    failureThreshold: 6
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 100Mi
  securityContext: {}
  service:
    ports:
    - name: http
      port: 9000
      targetPort: 9000
    protocol: TCP
    type: ClusterIP
  serviceAccount:
    create: true
  serviceMonitor:
    enabled: true
    honorLabels: true
    interval: 30s
    jobLabel: app.kubernetes.io/name
    labels:
      release: monitoring
    scrapeTimeout: 10s
  sunbird_analytics_api_base_url: http://analytics-service:9000
  sunbird_api_base_url: http://knowledge-mw-service:5000
  sunbird_api_mgr_base_url: http://knowledge-mw-service:5000
  sunbird_app_name: sunbird
  sunbird_badger_baseurl: http://badger:8004
  sunbird_cache_enable: "false"
  sunbird_cassandra_keyspace: sunbird
  sunbird_cassandra_password: ""
  sunbird_cassandra_username: ""
  sunbird_cert_service_base_url: http://cert-service:9000
  sunbird_cloud_service_provider: azure
  sunbird_course_batch_notification_enabled: true
  sunbird_course_batch_notification_signature: sunbird
  sunbird_cs_search_path: /v1/content/search
  sunbird_default_channel: sunbird
  sunbird_email_max_recipients_limit: 100
  sunbird_encryption_mode: local
  sunbird_env_logo_url: ""
  sunbird_gzip_enable: "true"
  sunbird_gzip_size_threshold: "262144"
  sunbird_health_check_enable: "true"
  sunbird_installation_display_name_for_sms: Sunbird
  sunbird_installation_email: ""
  sunbird_keycloak_required_action_link_expiration_seconds: 2592000
  sunbird_keycloak_user_federation_provider_id: cassandrafederationid
  sunbird_msg_91_auth: ""
  sunbird_msg_sender: ""
  sunbird_mw_system_host: userorg-service
  sunbird_mw_system_port: 8088
  sunbird_open_saber_bridge_enable: "false"
  sunbird_otp_allowed_attempt: "5"
  sunbird_otp_expiration: 1800
  sunbird_otp_length: 6
  sunbird_pg_db: quartz
  sunbird_pg_port: 5432
  sunbird_quartz_mode: cluster
  sunbird_registry_service_baseurl: http://registry-service:8081
  sunbird_remote_bg_req_router_path: kka.tcp://SunbirdMWSystem@actor-service:8088/user/BackgroundRequestRouter
  sunbird_remote_req_router_path: akka.tcp://SunbirdMWSystem@actor-service:8088/user/RequestRouter
  sunbird_reset_pass_msg: 'You have requested to reset password. Click on the link
    to set a password:'
  sunbird_search_service_api_base_url: http://search-service:9000
  sunbird_sso_client_id: lms
  sunbird_sso_client_secret: lms
  sunbird_sso_lb_ip: http://keycloak:8080/
  sunbird_sso_password: admin
  sunbird_sso_username: admin
  sunbird_telemetry_base_url: http://telemetry-service:9001
  sunbird_time_zone: Asia/Kolkata
  sunbird_url_shortner_access_token: ""
  sunbird_url_shortner_enable: false
  sunbird_user_bulk_upload_size: "1001"
  sunbird_user_profile_field_default_visibility: private
  telemetry_pdata_pid: userorg-service
  telemetry_queue_threshold_value: "100"
  tolerations: []
  user_index_alias: user_alias
zookeeper:
  fullnameOverride: zookeeper
  host: zookeeper
  nameOverride: zookeeper
  persistence:
    size: 2Gi
  port: 2181

HOOKS:
---
# Source: learnbb/templates/provision/job-cleaner.yaml
# This chart is required because helm does not support deleting jobs if not having hooks.
# We can add pre-install, hook as some services may require schemas in db, and it'll cause catch22.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: learnbb-job-deleter
  annotations:
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-weight: "-5"
---
# Source: learnbb/templates/provision/job-cleaner.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: learnbb-job-deleter-role
  annotations:
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-weight: "-5"
rules:
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["delete", "get", "list"]
---
# Source: learnbb/templates/provision/job-cleaner.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: learnbb-job-deleter-rolebinding
  annotations:
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-weight: "-5"
subjects:
- kind: ServiceAccount
  name: learnbb-job-deleter
roleRef:
  kind: Role
  name: learnbb-job-deleter-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: learnbb/templates/provision/job-cleaner.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: learnbb-job-deleter
  annotations:
    helm.sh/hook: "pre-install,pre-upgrade"
    helm.sh/hook-weight: "-3"
spec:
  template:
    spec:
      serviceAccountName: learnbb-job-deleter
      containers:
      - name: kubectl-container
        image: bitnami/kubectl
        imagePullPolicy: IfNotPresent
        command: ["bash", "-c"]
        args:
          - |
            chart_name="learnbb"
            for job in $(kubectl get jobs -l scope=provisioning -o name | grep $chart_name); do
              if ! kubectl delete $job; then
                echo "Couldn't delete job $job"
                continue
              fi
              echo "deleted $job"
            done
      restartPolicy: Never
MANIFEST:
---
# Source: learnbb/charts/adminutils/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: adminutil
---
# Source: learnbb/charts/cassandra/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cassandra
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: cassandra
    helm.sh/chart: cassandra-10.1.0
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.1.0"
  annotations:
    helm.sh/hook-weight: "-5"
automountServiceAccountToken: true
---
# Source: learnbb/charts/cert/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert
---
# Source: learnbb/charts/certificateapi/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: certificateapi
---
# Source: learnbb/charts/certificatesign/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: certificatesign
---
# Source: learnbb/charts/certregistry/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-registry
---
# Source: learnbb/charts/druid-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: sunbird
  name: learnbb-druid-operator
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: druid-operator
    app.kubernetes.io/version: 0.0.7
    helm.sh/chart: druid-operator-0.1.1
---
# Source: learnbb/charts/druid-raw-cluster/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: obsrv-sa
  labels:
    helm.sh/chart: druid-raw-cluster-0.1.1
    app.kubernetes.io/name: druid-raw-cluster
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/version: "0.21.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    serviceAccountName: ""
---
# Source: learnbb/charts/flink/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: learnbb-flink
---
# Source: learnbb/charts/groups/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: groups
---
# Source: learnbb/charts/kafka/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-20.0.2
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.3.1"
    app.kubernetes.io/component: kafka
  annotations:
    helm.sh/hook-weight: "-5"
automountServiceAccountToken: true
---
# Source: learnbb/charts/keycloak-kids-keys/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keycloak-kids-keys
---
# Source: learnbb/charts/keycloak/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keycloak
---
# Source: learnbb/charts/lms/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: lms
---
# Source: learnbb/charts/neo4j/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: neo4j
---
# Source: learnbb/charts/notification/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: notification
---
# Source: learnbb/charts/print/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: learnbb-print
---
# Source: learnbb/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: redis
  namespace: "sunbird"
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.1
    helm.sh/chart: redis-18.1.1
  annotations:
    helm.sh/hook-weight: "-5"
---
# Source: learnbb/charts/registry/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: registry
---
# Source: learnbb/charts/userorg/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: userorg
---
# Source: learnbb/charts/cassandra/templates/cassandra-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cassandra
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: cassandra
    helm.sh/chart: cassandra-10.1.0
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.1.0"
  annotations:
    helm.sh/hook-weight: "-5"
type: Opaque
data:
  cassandra-password: "SGk1TDJaTGdZNg=="
---
# Source: learnbb/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.3
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
  annotations:
    reloader.stakater.com/auto: "true"
  namespace: sunbird
type: Opaque
data:
  postgresql-password: "cG9zdGdyZXM="
---
# Source: learnbb/charts/adminutils/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: adminutil
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: adminutils
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: adminutils-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
---
# Source: learnbb/charts/adminutils/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: adminutil-env
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: adminutils
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: adminutils-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  # You can add key value pair here, to create env values.
  ACCESS_TOKEN_VALIDITY: "86400"
  AM_ADMIN_API_ACCESS_BASEPATH: /keys/
  AM_ADMIN_API_ACCESS_KEYCOUNT: "2"
  AM_ADMIN_API_ACCESS_KEYPREFIX: access_v1_key
  AM_ADMIN_API_ACCESS_KEYSTART: "1"
  AM_ADMIN_API_DESKTOP_DEVICE_BASEPATH: /keys/
  AM_ADMIN_API_DESKTOP_DEVICE_KEYCOUNT: "2"
  AM_ADMIN_API_DESKTOP_DEVICE_KEYPREFIX: desktop_devicev2_key
  AM_ADMIN_API_DESKTOP_DEVICE_KEYSTART: "1"
  AM_ADMIN_API_ENDPOINT: http://kong:8001
  AM_ADMIN_API_KEYS: mobile_device,desktop_device,portal_anonymous,portal_loggedin,access
  AM_ADMIN_API_MOBILE_DEVICE_BASEPATH: /keys/
  AM_ADMIN_API_MOBILE_DEVICE_KEYCOUNT: "2"
  AM_ADMIN_API_MOBILE_DEVICE_KEYPREFIX: mobile_devicev2_key
  AM_ADMIN_API_MOBILE_DEVICE_KEYSTART: "1"
  AM_ADMIN_API_PORTAL_ANONYMOUS_BASEPATH: /keys/
  AM_ADMIN_API_PORTAL_ANONYMOUS_KEYCOUNT: "2"
  AM_ADMIN_API_PORTAL_ANONYMOUS_KEYPREFIX: portal_anonymous_key
  AM_ADMIN_API_PORTAL_ANONYMOUS_KEYSTART: "1"
  AM_ADMIN_API_PORTAL_LOGGEDIN_BASEPATH: /keys/
  AM_ADMIN_API_PORTAL_LOGGEDIN_KEYCOUNT: "2"
  AM_ADMIN_API_PORTAL_LOGGEDIN_KEYPREFIX: portal_loggedin_key
  AM_ADMIN_API_PORTAL_LOGGEDIN_KEYSTART: "1"
  DEFAULT_CONSUMER_GROUP: contentUser
  EMBED_ROLE: "true"
  ENDPOINTS_HEALTH_ID: apihealth
  ENDPOINTS_HEALTH_SENSITIVE: "false"
  ENDPOINTS_METRICS_ID: metrics
  ENDPOINTS_METRICS_SENSITIVE: "false"
  JAVA_OPTS: -Xms256m -Xmx256m
  LEARNER_API_AUTH_KEY: 
  LEARNER_BASE_API_URL: http://kong:8000
  REFRESH_TOKEN_DOMAIN: "https:///auth/realms/sunbird"
  REFRESH_TOKEN_LOG_OLDER_THAN: "30"
  REFRESH_TOKEN_OFFLINE_VALIDITY: "15552000"
  REFRESH_TOKEN_PRELOAD: "true"
  REFRESH_TOKEN_PUBLIC_BASEPATH: /keycloak-keys/
  REFRESH_TOKEN_PUBLIC_KEYPREFIX: KEYCLOAK_PUBLIC_KEY
  SERVER_PORT: "4000"
  SPRING_PROFILES_ACTIVE: production
---
# Source: learnbb/charts/adminutils/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: access-private-keys
data:
---
# Source: learnbb/charts/adminutils/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mobile-devicev2-private-keys
data:
---
# Source: learnbb/charts/adminutils/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: desktop-devicev2-private-keys
data:
---
# Source: learnbb/charts/adminutils/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: portal-anonymous-private-keys
data:
---
# Source: learnbb/charts/adminutils/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: portal-loggedin-private-keys
data:
---
# Source: learnbb/charts/cassandra/templates/metrics-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cassandra-metrics-conf
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: cassandra
    helm.sh/chart: cassandra-10.1.0
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.1.0"
    app.kubernetes.io/part-of: cassandra
    app.kubernetes.io/component: cassandra-exporter
  annotations:
    helm.sh/hook-weight: "-5"
data:
  config.yml: |-
    host: localhost:7199
    ssl: False
    user:
    password:
    listenPort: 8080
    blacklist:
      # To profile the duration of jmx call you can start the program with the following options
      # > java -Dorg.slf4j.simpleLogger.defaultLogLevel=trace -jar cassandra_exporter.jar config.yml --oneshot
      #
      # To get intuition of what is done by cassandra when something is called you can look in cassandra
      # https://github.com/apache/cassandra/tree/trunk/src/java/org/apache/cassandra/metrics
      # Please avoid to scrape frequently those calls that are iterating over all sstables
    
      # Unaccessible metrics (not enough privilege)
      - java:lang:memorypool:.*usagethreshold.*
    
      # Leaf attributes not interesting for us but that are presents in many path
      - .*:999thpercentile
      - .*:95thpercentile
      - .*:fifteenminuterate
      - .*:fiveminuterate
      - .*:durationunit
      - .*:rateunit
      - .*:stddev
      - .*:meanrate
      - .*:mean
      - .*:min
    
      # Path present in many metrics but uninterresting
      - .*:viewlockacquiretime:.*
      - .*:viewreadtime:.*
      - .*:cas[a-z]+latency:.*
      - .*:colupdatetimedeltahistogram:.*
    
      # Mostly for RPC, do not scrap them
      - org:apache:cassandra:db:.*
    
      # columnfamily is an alias for Table metrics
      # https://github.com/apache/cassandra/blob/8b3a60b9a7dbefeecc06bace617279612ec7092d/src/java/org/apache/cassandra/metrics/TableMetrics.java#L162
      - org:apache:cassandra:metrics:columnfamily:.*
    
      # Should we export metrics for system keyspaces/tables ?
      - org:apache:cassandra:metrics:[^:]+:system[^:]*:.*
    
      # Don't scrap us
      - com:criteo:nosql:cassandra:exporter:.*
    
    maxScrapFrequencyInSec:
      50:
        - .*
    
      # Refresh those metrics only every hour as it is costly for cassandra to retrieve them
      3600:
        - .*:snapshotssize:.*
        - .*:estimated.*
        - .*:totaldiskspaceused:.*
---
# Source: learnbb/charts/cert/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cert
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: cert-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
    
  cert-service_logback.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <configuration>
    
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>INFO</level>
            </filter>
            <encoder>
                <pattern>[%date{ISO8601}] [%level] %logger{0}:%line [%X{sourceThread}] [%mdc{msgId}] - %msg %n
                </pattern>
                <!--to print whole Mapped Diagnostic Context (MDC) properties( for eg: the actor’s path, the full address of the ActorSystem) in the logs  refer this link https://doc.akka.io/docs/akka/current/typed/logging.html#mdc-->
                <!--[%mdc] will print all akka variables akkaSource, akkaAddress, akkaTags, sourceActorSystem. for more info refer this link https://doc.akka.io/docs/akka/current/typed/logging.html#mdc-values-->
            </encoder>
        </appender>
    
    
        <!--   for async -->
        <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>app.log</file>
            <immediateFlush>false</immediateFlush>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>app_%d{yyyy-MM-dd}.log</fileNamePattern>
            </rollingPolicy>
            <encoder>
                <pattern>[%date{ISO8601}] [%level] %logger{0}:%line [%X{sourceThread}] [%mdc{msgId}] - %msg %n
                </pattern>
            </encoder>
        </appender>
    
        <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
            <queueSize>8192</queueSize>
            <neverBlock>true</neverBlock>
            <appender-ref ref="FILE"/>
        </appender>
    
        <appender name="defaultLoggerAppender" class="ch.qos.logback.core.ConsoleAppender">
            <encoder class="net.logstash.logback.encoder.LogstashEncoder">
                <layout class="net.logstash.logback.layout.LogstashLayout">
                    <fieldNames>
                        <timestamp>timestamp</timestamp>
                        <message>msg</message>
                        <logger>lname</logger>
                        <thread>tname</thread>
                        <levelValue>[ignore]</levelValue>
                        <version>[ignore]</version>
                        <stack_trace>exception</stack_trace>
                    </fieldNames>
                    <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                        <maxDepthPerThrowable>30</maxDepthPerThrowable>
                        <maxLength>2048</maxLength>
                        <exclude>sun\.reflect\..*\.invoke.*</exclude>
                        <rootCauseFirst>true</rootCauseFirst>
                        <inlineHash>true</inlineHash>
                    </throwableConverter>
                </layout>
            </encoder>
        </appender>
    
        <appender name="customLoggerAppender" class="ch.qos.logback.core.ConsoleAppender">
            <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder"/>
        </appender>
    
        <logger name="org.sunbird" level="INFO">
            <appender-ref ref="customLoggerAppender"/>
        </logger>
    
        <logger name="org.sunbird" level="DEBUG">
            <appender-ref ref="customLoggerAppender"/>
        </logger>
    
        <logger name="org.sunbird" level="WARN">
            <appender-ref ref="customLoggerAppender"/>
        </logger>
    
        <logger name="org.sunbird" level="ERROR">
            <appender-ref ref="customLoggerAppender"/>
        </logger>
    
        <root level="INFO">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="ASYNC"/>
        </root>
    </configuration>
---
# Source: learnbb/charts/cert/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cert-env
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: cert-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  CONTAINER_NAME: ""
  CLOUD_STORAGE_TYPE: ""
  PRIVATE_CLOUD_STORAGE_SECRET: ""
  PRIVATE_CLOUD_STORAGE_KEY: ""
  sunbird_cert_domain_url: ""
  sunbird_cert_enc_service_url: "http://enc-service:8013"
  download_link_expiry_timeout: "600"
  es_conn_info: "elasticsearch:9200"
  ITEXT_LICENSE_ENABLED: "false"
  ITEXT_LICENSE_PATH: "/home/sunbird/itext_trail_license.xml"
  PUBLIC_CLOUD_STORAGE_KEY: ""
  PUBLIC_CLOUD_STORAGE_SECRET: ""
  PUBLIC_CONTAINER_NAME: ""
  CLOUD_STORAGE_ENDPOINT: ""
  JAVA_OPTIONS: "-Xmx600m"
---
# Source: learnbb/charts/certificateapi/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: certificateapi-env
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: certificateapi
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: certificateapi-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  PORT: "8078"
  QR_TYPE: "URL"
  CERTIFICATE_DOMAIN_URL: "https://"
  CERTIFICATE_PUBLIC_KEY: ""
  CERTIFICATE_PRIVATE_KEY: ""
  JAVA_OPTIONS: "-Xmx600m"
---
# Source: learnbb/charts/certificatesign/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: certificatesign
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: certificatesign
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: certificatesign-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
    
  config.json: |-
    {
        "issuers": {
          "default": {
            "publicKey": "",
            "privateKey": "",
            "signatureType": "RSA",
            "verificationMethod": "did:india"
          }
        }
      }
---
# Source: learnbb/charts/certificatesign/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: certificatesign-env
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: certificatesign
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: certificatesign-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
    PORT: "8079"
    QR_TYPE: "URL"
    CERTIFICATE_DOMAIN_URL: "https://"
    CERTIFICATE_PUBLIC_KEY: ""
    CERTIFICATE_PRIVATE_KEY: ""
    SIGNING_KEY_TYPE: "RSA"
    CACHE_CONTEXT_URLS: "https:///schemas/v1_context.json, https:///schemas/sunbird_context.json, /schema/credential_template.json"
    JAVA_OPTIONS: "-Xmx600m"
---
# Source: learnbb/charts/certregistry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cert-registry
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: certregistry
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: certregistry-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  cert-registry_logback.xml: |-
      <configuration>
      
          <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
              <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                  <level>INFO</level>
              </filter>
              <encoder>
                  <pattern>[%date{ISO8601}] [%level] %logger{0}:%line [%X{sourceThread}] [%mdc{msgId}] - %msg %n
                  </pattern>
                  <!--to print whole Mapped Diagnostic Context (MDC) properties( for eg: the actor’s path, the full address of the ActorSystem) in the logs  refer this link https://doc.akka.io/docs/akka/current/typed/logging.html#mdc-->
                  <!--[%mdc] will print all akka variables akkaSource, akkaAddress, akkaTags, sourceActorSystem. for more info refer this link https://doc.akka.io/docs/akka/current/typed/logging.html#mdc-values-->
              </encoder>
          </appender>
      
      
          <!--   for async -->
          <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <file>app.log</file>
              <immediateFlush>false</immediateFlush>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                  <fileNamePattern>app_%d{yyyy-MM-dd}.log</fileNamePattern>
              </rollingPolicy>
              <encoder>
                  <pattern>[%date{ISO8601}] [%level] %logger{0}:%line [%X{sourceThread}] [%mdc{msgId}] - %msg %n
                  </pattern>
              </encoder>
          </appender>
      
          <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
              <queueSize>8192</queueSize>
              <neverBlock>true</neverBlock>
              <appender-ref ref="FILE"/>
          </appender>
      
          <appender name="defaultLoggerAppender" class="ch.qos.logback.core.ConsoleAppender">
              <encoder class="net.logstash.logback.encoder.LogstashEncoder">
                  <layout class="net.logstash.logback.layout.LogstashLayout">
                      <fieldNames>
                          <timestamp>timestamp</timestamp>
                          <message>msg</message>
                          <logger>lname</logger>
                          <thread>tname</thread>
                          <levelValue>[ignore]</levelValue>
                          <version>[ignore]</version>
                          <stack_trace>exception</stack_trace>
                      </fieldNames>
                      <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                          <maxDepthPerThrowable>30</maxDepthPerThrowable>
                          <maxLength>2048</maxLength>
                          <exclude>sun\.reflect\..*\.invoke.*</exclude>
                          <rootCauseFirst>true</rootCauseFirst>
                          <inlineHash>true</inlineHash>
                      </throwableConverter>
                  </layout>
              </encoder>
          </appender>
      
          <appender name="customLoggerAppender" class="ch.qos.logback.core.ConsoleAppender">
              <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder"/>
          </appender>
      
          <logger name="org.sunbird" level="INFO">
              <appender-ref ref="customLoggerAppender"/>
          </logger>
      
          <logger name="org.sunbird" level="DEBUG">
              <appender-ref ref="customLoggerAppender"/>
          </logger>
      
          <logger name="org.sunbird" level="WARN">
              <appender-ref ref="customLoggerAppender"/>
          </logger>
      
          <logger name="org.sunbird" level="ERROR">
              <appender-ref ref="customLoggerAppender"/>
          </logger>
      
          <root level="INFO">
              <appender-ref ref="STDOUT"/>
              <appender-ref ref="ASYNC"/>
          </root>
      </configuration> # Take only root level files (configs/*) for configmaps
---
# Source: learnbb/charts/certregistry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cert-registry-env
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: certregistry
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: certregistry-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  cert_service_base_url: "http://cert-service:9000"
  registry_credential_service_base_url: "http://registry-service:8081"
  rc_entity: "TrainingCertificate"
  sunbird_es_host: "elasticsearch"
  sunbird_es_port: "9200"
  sunbird_cassandra_keyspace: "sunbird"
  sunbird_cassandra_username: ""
  sunbird_cassandra_password: ""
  sunbird_cassandra_consistency_level: ""
  sunbird_cassandra_host: "cassandra"
  sunbird_cassandra_port: "9042"
  isMultiDCEnabled: "false"
  JAVA_OPTIONS: "-Xmx600m"
---
# Source: learnbb/charts/certregistry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cert-registry-opa
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: certregistry
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: certregistry-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  
  common.rego: |-
      package common
      
      import input.attributes.request.http as http_request
      import future.keywords.in
      
      ROLES := {
         "BOOK_REVIEWER": ["createLock", "publishContent", "listLock", "retireLock", "refreshLock", "rejectContent", "rejectContentV2"],
      
         "CONTENT_REVIEWER": ["createLock", "publishContent", "listLock", "retireLock", "refreshLock", "rejectContent", "rejectContentV2"],
      
         "FLAG_REVIEWER": ["publishContent", "rejectContent", "rejectContentV2"],
      
         "BOOK_CREATOR": ["copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock", "updateContent", "uploadContent"],
      
         "CONTENT_CREATOR": ["updateBatch", "copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock", "updateContent", "uploadContent", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "COURSE_CREATOR": ["updateBatch", "copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock",  "updateContent", "uploadContent", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "COURSE_MENTOR": ["updateBatch", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "PROGRAM_MANAGER": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest"],
      
         "PROGRAM_DESIGNER": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest"],
      
         "ORG_ADMIN": ["acceptTnc", "assignRole", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "getUserProfileV5", "updateUserV2", "readUserConsent", "createTenantPreferences", "updateTenantPreferences", "createReport", "deleteReport", "updateReport", "publishReport", "retireReport", "getReportSummary", "listReportSummary", "createReportSummary"],
      
         "REPORT_VIEWER": ["acceptTnc", "getReportSummary", "listReportSummary"],
      
         "REPORT_ADMIN": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "acceptTnc", "createReport", "deleteReport", "updateReport", "publishReport", "retireReport", "getReportSummary", "listReportSummary", "createReportSummary"],
      
         "PUBLIC": ["PUBLIC"]
      }
      
      x_authenticated_user_token := http_request.headers["x-authenticated-user-token"]
      x_authenticated_for := http_request.headers["x-authenticated-for"]
      private_ingressgateway_ip := ""
      
      jwt_public_keys := {
      "KEYCLOAK_KID": "KEYCLOAK_PUBLIC_KEY"
      }
      
      user_token := {"header": header, "payload": payload} {
        encoded := x_authenticated_user_token
        [header, payload, _] := io.jwt.decode(encoded)
      }
      
      for_token := {"payload": payload} {
        encoded := x_authenticated_for
        [_, payload, _] := io.jwt.decode(encoded)
      }
      
      iss := "https:///auth/realms/sunbird"
      token_kid := user_token.header.kid
      token_iss := user_token.payload.iss
      token_exp := user_token.payload.exp
      current_time := time.now_ns()
      
      token_sub := split(user_token.payload.sub, ":")
      # Check for both cases - With and without federation_id in sub field as below
      # sub := f:federation_id:user_id OR sub := user_id
      token_userid = token_sub[2] {
          count(token_sub) == 3
      } else = token_sub[0] {
          count(token_sub) == 1
      }
      for_token_userid := for_token.payload.sub
      for_token_parentid := for_token.payload.parentId
      
      # Desktop app is still using keycloak tokens which will not have roles
      # This is a temporary fix where we will append the roles as PUBLIC in OPA
      
      default_role := [{"role": "PUBLIC", "scope": []}]
      
      token_roles = user_token.payload.roles {
          user_token.payload.roles
      } else = default_role {
          not user_token.payload.roles
      }
      
      for_token_exists {
        x_authenticated_for
        count(x_authenticated_for) > 0
      }
      
      userid = token_userid {
          not x_authenticated_for
      } else = token_userid {
          count(x_authenticated_for) == 0 # This is a temporary fix as the mobile app is sending empty headers as x-authenticated-for: ""
      } else = for_token_userid {
          for_token_exists
      }
      
      validate_token {
        io.jwt.verify_rs256(x_authenticated_user_token, jwt_public_keys[token_kid])
        token_exp * 1000000000 > current_time
        token_iss == iss
      }
      
      is_an_internal_request {
        http_request.host == private_ingressgateway_ip
      }
      
      acls_check(acls) = indicies {
        validate_token
        indicies := [idx | some i; ROLES[token_roles[i].role][_] == acls[_]; idx := i]
        count(indicies) > 0
      }
      
      role_check(roles) = indicies {
        indicies := [idx | some i; token_roles[i].role in roles; idx := i]
        count(indicies) > 0
      }
      
      org_check(roles) = token_organisationids {
        indicies :=  role_check(roles)
        count(indicies) > 0
        token_organisationids := [ids | ids := token_roles[indicies[_]].scope[_].organisationId]
        count(token_organisationids) > 0
      }
      
      parent_id_check {
          x_authenticated_for
          count(x_authenticated_for) > 0
          token_userid == for_token_parentid
      }
      
      parent_id_check {
          count(x_authenticated_for) == 0
      }
      
      parent_id_check {
          not x_authenticated_for
      }
      
      public_role_check {
        acls := ["PUBLIC"]
        roles := ["PUBLIC"]
        acls_check(acls)
        role_check(roles)
        userid
        parent_id_check
      }
  
  main.rego: |-
      package main
      
      import input.attributes.request.http as http_request
      import data.policies as policy
      import future.keywords.in
      
      default allow = {
        "allowed": false,
        "headers": {"x-request-allowed": "no"},
        "body": "You do not have permission to perform this operation",
        "http_status": 403
      }
      
      urls[keys] { policy.urls_to_action_mapping[keys]}
      
      regex_urls := [url | url := regex.find_n(urls[_], http_request.path, 1)[0]]
      matching_urls := [url | some i; startswith(http_request.path, regex_urls[i]); url := regex_urls[i]]
      identified_url := max(matching_urls)
      identified_action := policy.urls_to_action_mapping[identified_url]
      
      # Desktop app is not sending x-authenticated-for header due to which managed user flow is breaking
      # This is a temporary fix till the desktop app issue is fixed
      skipped_consumers := ["portal", "desktop"]
      x_consumer_username := http_request.headers["x-consumer-username"]
      check_if_consumer_is_skipped {
         x_consumer_username in skipped_consumers
      }
      
      allow = status {
         not check_if_consumer_is_skipped
         policy[identified_action]
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Passed",
            "http_status": 200
         }
      }
      
      allow = status {
         not identified_action
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Skipped",
            "http_status": 200
         }
      }
      
      # Desktop app is not sending x-authenticated-for header due to which managed user flow is breaking
      # This is a temporary fix till the desktop app issue is fixed
      allow = status {
         check_if_consumer_is_skipped
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Skipped",
            "http_status": 200
         }
      }
  
  policies.rego: |-
      package policies
      
      import data.common as super
      
      urls_to_action_mapping := {
        "/certs/v1/registry/download": "downloadRegCertificate",
        "/certs/v2/registry/download": "downloadRegCertificateV2",
        "/certs/v1/registry/search": "searchRegCertificate"
      }
      
      downloadRegCertificate {
        super.public_role_check
      }
      
      downloadRegCertificateV2 {
        super.public_role_check
      }
      
      searchRegCertificate {
        super.public_role_check
        recipient_ids := {id | id = input.parsed_body.request.query.bool.must[_].match_phrase["recipient.id"]}
        count(recipient_ids) == 1
        recipient_ids[super.userid] == super.userid
      }
---
# Source: learnbb/charts/certregistry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cert-registry-envoy
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: certregistry
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: certregistry-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  
  config.yaml: |-
      static_resources:
        listeners:
        - name: listener_0
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 9999
          per_connection_buffer_limit_bytes: 62914560
          filter_chains:
          - filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                access_log:
                - name: envoy.access_loggers.stdout
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                    log_format:
                      text_format: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS_WITHOUT_PORT% - - [%START_TIME(%d/%b/%Y:%H:%M:%S %z)%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(X-DEVICE-ID)%\" \"%REQ(X-CHANNEL-ID)%\" \"%REQ(X-APP-ID)%\" \"%REQ(X-APP-VER)%\" \"%REQ(X-SESSION-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\"\n"
                route_config:
                  name: local_route
                  virtual_hosts:
                  - name: backend
                    domains:
                    - "*"
                    routes:
                    - match:
                        prefix: "/opa/metrics"
                      route:
                        prefix_rewrite: "/metrics"
                        cluster: opa
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/health"
                      route:
                        cluster: service
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/health"
                      route:
                        cluster: service
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/"
                      route:
                        cluster: service
                        timeout: 60s
                http_filters:
                - name: envoy.filters.http.ext_authz
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                    transport_api_version: V3
                    with_request_body:
                      max_request_bytes: 62914560
                      allow_partial_message: true
                    failure_mode_allow: true
                    grpc_service:
                      google_grpc:
                        target_uri: 127.0.0.1:9191
                        stat_prefix: ext_authz
                      timeout: 5s
                - name: envoy.filters.http.router
        clusters:
        - name: service
          connect_timeout: 5s
          per_connection_buffer_limit_bytes: 62914560
          type: static
          load_assignment:
            cluster_name: service
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 9000
        - name: opa
          connect_timeout: 5s
          type: static
          load_assignment:
            cluster_name: opa
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8181
      admin:
        access_log_path: "/dev/stdout"
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 10000
---
# Source: learnbb/charts/flink/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: activity-aggregate-updater-config
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  config: |-
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = ".coursebatch.job.request"
      output.audit.topic = ".telemetry.raw"
      output.failed.topic = ".activity.agg.failed"
      output.certissue.topic = ".issue.certificate.request"
      groupId = "-activity-aggregate-group"
    }
    task {
      window.shards = "1000"
      checkpointing.interval = "300000"
      checkpointing.pause.between.seconds = "90000"
      restart-strategy.attempts = "3"
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = "1"
      dedup.parallelism = "1"
      activity.agg.parallelism = "1"
      enrolment.complete.parallelism = "1"
    }
    lms-cassandra {
      keyspace = "sunbird_courses"
      consumption.table = "user_content_consumption"
      user_activity_agg.table = "user_activity_agg"
      user_enrolments.table = "user_enrolments"
    }
    redis {
      database {
        relationCache.id = 10
      }
    }
    dedup-redis {
      host = "redis-master"
      port = 6379
      database.index = "13"
      database.expiry = "604800"
    }
    threshold.batch.read.interval = "60"
    threshold.batch.read.size = "1"
    threshold.batch.write.size = "10"
    activity {
      module.aggs.enabled = true
      input.dedup.enabled = true
      filter.processed.enrolments = "true"
      collection.status.cache.expiry = "3600"
    }
    service {
      search.basePath = "http://search-service:9000"
    }
    
  flink-conf: |-
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    
  base-config: |-
    kafka {
        broker-servers = "kafka:9092"
        producer.broker-servers = "kafka:9092"
        consumer.broker-servers = "kafka:9092"
        zookeeper = "zookeeper:2181"
        producer {
          max-request-size = 1572864
          batch.size = 98304
          linger.ms = 10
        }
      }
      job {
        env = ""
        enable.distributed.checkpointing = true
        # No valid checkpoint_store_type configured, skipping statebackend.
      }
      
      
      
      task {
        parallelism = 1
        consumer.parallelism = 1
        checkpointing.compressed = true
        checkpointing.interval = 60000
        checkpointing.pause.between.seconds = 5000
        restart-strategy.attempts = 3
        restart-strategy.delay = 30000 # in milli-seconds
      }
      redisdb.connection.timeout = 30000
      redis {
        host = "redis-master"
        port = "6379"
      }
      redis-meta {
        host = "redis-master"
        port = 6379
      }
      lms-cassandra {
          host = "cassandra"
          port = "9042"
          isMultiDCEnabled = "false"
      }
      neo4j {
        routePath = "bolt://neo4j:7687"
        graph = "domain"
      }
      es {
          basePath = "elasticsearch:9200"
      }
      schema {
        basePath = "https://.//schemas/local"
        supportedVersion = {
          itemset = "2.0"
        }
      }
      ml-cassandra {
        host = "cassandra"
        port = "9042"
        isMultiDCEnabled = "false"
      }
      ml-mongo {
          host = ""
          port = "27017"
          database = ""
      }
      sunbird_instance_name = "Sunbird"
    
  log4j_console_properties: |-
    # This affects logging for both user code and Flink
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = ConsoleAppender
    
    # Uncomment this if you want to _only_ change Flink's logging
    #logger.flink.name = org.apache.flink
    #logger.flink.level = INFO
    
    # The following lines keep the log level of common libraries/connectors on
    # log level INFO. The root logger does not override this. You have to manually
    # change the log levels here.
    logger.akka.name = akka
    logger.akka.level = ERROR
    logger.kafka.name= org.apache.kafka
    logger.kafka.level = ERROR
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = ERROR
    logger.zookeeper.name = org.apache.zookeeper
    logger.zookeeper.level = ERROR
    
    # Log all infos to the console
    appender.console.name = ConsoleAppender
    appender.console.type = CONSOLE
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    
    # Suppress the irrelevant (wrong) warnings from the Netty channel handler
    logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
    logger.netty.level = OFF
---
# Source: learnbb/charts/flink/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: assessment-aggregator-config
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  config: |-
    include file("/data/flink/conf/base-config.conf")
    kafka {
      producer.broker-servers = "kafka:9092"
      consumer.broker-servers = "kafka:9092"
      zookeeper = "zookeeper:2181"
      input.topic = ".telemetry.assess"
      failed.topic= ".telemetry.assess.failed"
      groupId = "-assessment-aggregator-group"
      output.certissue.topic = ".issue.certificate.request"
    }
    task {
      consumer.parallelism = "1"
      downstream.parallelism = "1"
      assessaggregator {
        parallelism = "1"
      }
      scoreaggregator.parallelism = "1"
    }
    lms-cassandra {
      keyspace = "sunbird_courses"
      table = "assessment_aggregator"
      questionudttype= "question"
      enrolmentstable = "user_enrolments"
      activitytable = "user_activity_agg"
    }
    redis {
      database {
        relationCache.id = 10
        contentCache.id = 5
      }
    }
    assessment.skip.missingRecords = true
    content.read.api = "http://content-service:9000/content/v3/read/"
    user.activity.agg.type="attempt_metrics"
    
  flink-conf: |-
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    
  base-config: |-
    kafka {
        broker-servers = "kafka:9092"
        producer.broker-servers = "kafka:9092"
        consumer.broker-servers = "kafka:9092"
        zookeeper = "zookeeper:2181"
        producer {
          max-request-size = 1572864
          batch.size = 98304
          linger.ms = 10
        }
      }
      job {
        env = ""
        enable.distributed.checkpointing = true
        # No valid checkpoint_store_type configured, skipping statebackend.
      }
      
      
      
      task {
        parallelism = 1
        consumer.parallelism = 1
        checkpointing.compressed = true
        checkpointing.interval = 60000
        checkpointing.pause.between.seconds = 5000
        restart-strategy.attempts = 3
        restart-strategy.delay = 30000 # in milli-seconds
      }
      redisdb.connection.timeout = 30000
      redis {
        host = "redis-master"
        port = "6379"
      }
      redis-meta {
        host = "redis-master"
        port = 6379
      }
      lms-cassandra {
          host = "cassandra"
          port = "9042"
          isMultiDCEnabled = "false"
      }
      neo4j {
        routePath = "bolt://neo4j:7687"
        graph = "domain"
      }
      es {
          basePath = "elasticsearch:9200"
      }
      schema {
        basePath = "https://.//schemas/local"
        supportedVersion = {
          itemset = "2.0"
        }
      }
      ml-cassandra {
        host = "cassandra"
        port = "9042"
        isMultiDCEnabled = "false"
      }
      ml-mongo {
          host = ""
          port = "27017"
          database = ""
      }
      sunbird_instance_name = "Sunbird"
    
  log4j_console_properties: |-
    # This affects logging for both user code and Flink
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = ConsoleAppender
    
    # Uncomment this if you want to _only_ change Flink's logging
    #logger.flink.name = org.apache.flink
    #logger.flink.level = INFO
    
    # The following lines keep the log level of common libraries/connectors on
    # log level INFO. The root logger does not override this. You have to manually
    # change the log levels here.
    logger.akka.name = akka
    logger.akka.level = ERROR
    logger.kafka.name= org.apache.kafka
    logger.kafka.level = ERROR
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = ERROR
    logger.zookeeper.name = org.apache.zookeeper
    logger.zookeeper.level = ERROR
    
    # Log all infos to the console
    appender.console.name = ConsoleAppender
    appender.console.type = CONSOLE
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    
    # Suppress the irrelevant (wrong) warnings from the Netty channel handler
    logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
    logger.netty.level = OFF
---
# Source: learnbb/charts/flink/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: collection-cert-pre-processor-config
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  config: |-
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = ".issue.certificate.request"
      output.topic = ".generate.certificate.request"
      output.failed.topic = ".issue.certificate.failed"
      groupId = "-collection-cert-pre-processor-group"
    }
    task {
      restart-strategy.attempts = "3" # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      parallelism = "1"
      consumer.parallelism = "1"
      generate_certificate.parallelism = "1"
    }
    lms-cassandra {
      keyspace = "sunbird_courses"
      consumption.table = "user_content_consumption"
      user_enrolments.table = "user_enrolments"
      course_batch.table = "course_batch"
      assessment_aggregator.table = "assessment_aggregator"
      user_activity_agg.table = "user_activity_agg"
    }
    redis {
        database {
          contentCache.id = 5
          collectionCache.id = 0
        }
    }
    cert_domain_url = "https://"
    user_read_api = "/private/user/v1/read"
    content_read_api = "/content/v3/read"
    service {
      content.basePath = "http://content-service:9000"
      learner.basePath = "http://userorg-service:9000"
    }
    enable.suppress.exception = "false"
    redis-meta {
      host = "redis-master"
      port = 6379
    }
    assessment.metrics.supported.contenttype = ["SelfAssess"]
    cert_cloud_storage_type = "azure"
    cert_cloud_storage_secret = ""
    cert_cloud_storage_key = ""
    cloud_storage_base_url = "https://"
    cloud_store_base_path_placeholder = "CLOUD_BASE_PATH"
    content_cloud_storage_container = ""
    cloud_storage_cname_url = "https://"
    
  flink-conf: |-
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    
  base-config: |-
    kafka {
        broker-servers = "kafka:9092"
        producer.broker-servers = "kafka:9092"
        consumer.broker-servers = "kafka:9092"
        zookeeper = "zookeeper:2181"
        producer {
          max-request-size = 1572864
          batch.size = 98304
          linger.ms = 10
        }
      }
      job {
        env = ""
        enable.distributed.checkpointing = true
        # No valid checkpoint_store_type configured, skipping statebackend.
      }
      
      
      
      task {
        parallelism = 1
        consumer.parallelism = 1
        checkpointing.compressed = true
        checkpointing.interval = 60000
        checkpointing.pause.between.seconds = 5000
        restart-strategy.attempts = 3
        restart-strategy.delay = 30000 # in milli-seconds
      }
      redisdb.connection.timeout = 30000
      redis {
        host = "redis-master"
        port = "6379"
      }
      redis-meta {
        host = "redis-master"
        port = 6379
      }
      lms-cassandra {
          host = "cassandra"
          port = "9042"
          isMultiDCEnabled = "false"
      }
      neo4j {
        routePath = "bolt://neo4j:7687"
        graph = "domain"
      }
      es {
          basePath = "elasticsearch:9200"
      }
      schema {
        basePath = "https://.//schemas/local"
        supportedVersion = {
          itemset = "2.0"
        }
      }
      ml-cassandra {
        host = "cassandra"
        port = "9042"
        isMultiDCEnabled = "false"
      }
      ml-mongo {
          host = ""
          port = "27017"
          database = ""
      }
      sunbird_instance_name = "Sunbird"
    
  log4j_console_properties: |-
    # This affects logging for both user code and Flink
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = ConsoleAppender
    
    # Uncomment this if you want to _only_ change Flink's logging
    #logger.flink.name = org.apache.flink
    #logger.flink.level = INFO
    
    # The following lines keep the log level of common libraries/connectors on
    # log level INFO. The root logger does not override this. You have to manually
    # change the log levels here.
    logger.akka.name = akka
    logger.akka.level = ERROR
    logger.kafka.name= org.apache.kafka
    logger.kafka.level = ERROR
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = ERROR
    logger.zookeeper.name = org.apache.zookeeper
    logger.zookeeper.level = ERROR
    
    # Log all infos to the console
    appender.console.name = ConsoleAppender
    appender.console.type = CONSOLE
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    
    # Suppress the irrelevant (wrong) warnings from the Netty channel handler
    logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
    logger.netty.level = OFF
---
# Source: learnbb/charts/flink/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: collection-certificate-generator-config
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  config: |-
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = ".generate.certificate.request"
      output.audit.topic = ".telemetry.raw"
      groupId = "-certificate-generator-group"
    }
    task {
      restart-strategy.attempts = "3" # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = "1"
      parallelism = "1"
    }
    lms-cassandra {
      keyspace = "sunbird_courses"
      user_enrolments.table = "user_enrolments"
      course_batch.table = "course_batch"
      sbkeyspace = "sunbird"
      certreg.table ="cert_registry"
    }
    cert_domain_url = "https://"
    cert_container_name = ""
    cert_cloud_storage_type = "azure"
    cert_cloud_storage_secret = ""
    cert_cloud_storage_endpoint = ""
    cert_cloud_storage_key = ""
    cloud_storage_base_url = "https://"
    cloud_store_base_path_placeholder = "CLOUD_BASE_PATH"
    content_cloud_storage_container = ""
    cloud_storage_cname_url = "https://"
    service {
      certreg.basePath = "http://certreg:9000/certreg"
      learner.basePath = "http://userorg-service:9000"
      enc.basePath = "http://enc:9000/enc"
      rc.basePath = "http://registry-service:8081/api/v1"
      rc.entity = "TrainingCertificate"
      rc.rcApiKey = "token"
    }
    enable.suppress.exception = "false"
    enable.rc.certificate = "true"
    task.rc.badcharlist = "char_list"
    
  flink-conf: |-
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    
  base-config: |-
    kafka {
        broker-servers = "kafka:9092"
        producer.broker-servers = "kafka:9092"
        consumer.broker-servers = "kafka:9092"
        zookeeper = "zookeeper:2181"
        producer {
          max-request-size = 1572864
          batch.size = 98304
          linger.ms = 10
        }
      }
      job {
        env = ""
        enable.distributed.checkpointing = true
        # No valid checkpoint_store_type configured, skipping statebackend.
      }
      
      
      
      task {
        parallelism = 1
        consumer.parallelism = 1
        checkpointing.compressed = true
        checkpointing.interval = 60000
        checkpointing.pause.between.seconds = 5000
        restart-strategy.attempts = 3
        restart-strategy.delay = 30000 # in milli-seconds
      }
      redisdb.connection.timeout = 30000
      redis {
        host = "redis-master"
        port = "6379"
      }
      redis-meta {
        host = "redis-master"
        port = 6379
      }
      lms-cassandra {
          host = "cassandra"
          port = "9042"
          isMultiDCEnabled = "false"
      }
      neo4j {
        routePath = "bolt://neo4j:7687"
        graph = "domain"
      }
      es {
          basePath = "elasticsearch:9200"
      }
      schema {
        basePath = "https://.//schemas/local"
        supportedVersion = {
          itemset = "2.0"
        }
      }
      ml-cassandra {
        host = "cassandra"
        port = "9042"
        isMultiDCEnabled = "false"
      }
      ml-mongo {
          host = ""
          port = "27017"
          database = ""
      }
      sunbird_instance_name = "Sunbird"
    
  log4j_console_properties: |-
    # This affects logging for both user code and Flink
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = ConsoleAppender
    
    # Uncomment this if you want to _only_ change Flink's logging
    #logger.flink.name = org.apache.flink
    #logger.flink.level = INFO
    
    # The following lines keep the log level of common libraries/connectors on
    # log level INFO. The root logger does not override this. You have to manually
    # change the log levels here.
    logger.akka.name = akka
    logger.akka.level = ERROR
    logger.kafka.name= org.apache.kafka
    logger.kafka.level = ERROR
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = ERROR
    logger.zookeeper.name = org.apache.zookeeper
    logger.zookeeper.level = ERROR
    
    # Log all infos to the console
    appender.console.name = ConsoleAppender
    appender.console.type = CONSOLE
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    
    # Suppress the irrelevant (wrong) warnings from the Netty channel handler
    logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
    logger.netty.level = OFF
---
# Source: learnbb/charts/flink/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: enrolment-reconciliation-config
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  config: |-
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = ".batch.enrolment.sync.request"
      output.audit.topic = ".telemetry.raw"
      output.failed.topic = ".activity.agg.failed"
      output.certissue.topic = ".issue.certificate.request"
      groupId = "-enrolment-reconciliation-group"
    }
    task {
      restart-strategy.attempts = "3" # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = "1"
      enrolment.reconciliation.parallelism = "1"
      enrolment.complete.parallelism = "1"
    }
    lms-cassandra {
      keyspace = "sunbird_courses"
      consumption.table = "user_content_consumption"
      user_activity_agg.table = "user_activity_agg"
      user_enrolments.table = "user_enrolments"
    }
    redis {
      database {
        relationCache.id = 10
      }
    }
    threshold.batch.write.size = "10"
    activity {
      module.aggs.enabled = true
      collection.status.cache.expiry = "3600"
    }
    service {
      search.basePath = "http://search-service:9000"
    }
    
  flink-conf: |-
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    
  base-config: |-
    kafka {
        broker-servers = "kafka:9092"
        producer.broker-servers = "kafka:9092"
        consumer.broker-servers = "kafka:9092"
        zookeeper = "zookeeper:2181"
        producer {
          max-request-size = 1572864
          batch.size = 98304
          linger.ms = 10
        }
      }
      job {
        env = ""
        enable.distributed.checkpointing = true
        # No valid checkpoint_store_type configured, skipping statebackend.
      }
      
      
      
      task {
        parallelism = 1
        consumer.parallelism = 1
        checkpointing.compressed = true
        checkpointing.interval = 60000
        checkpointing.pause.between.seconds = 5000
        restart-strategy.attempts = 3
        restart-strategy.delay = 30000 # in milli-seconds
      }
      redisdb.connection.timeout = 30000
      redis {
        host = "redis-master"
        port = "6379"
      }
      redis-meta {
        host = "redis-master"
        port = 6379
      }
      lms-cassandra {
          host = "cassandra"
          port = "9042"
          isMultiDCEnabled = "false"
      }
      neo4j {
        routePath = "bolt://neo4j:7687"
        graph = "domain"
      }
      es {
          basePath = "elasticsearch:9200"
      }
      schema {
        basePath = "https://.//schemas/local"
        supportedVersion = {
          itemset = "2.0"
        }
      }
      ml-cassandra {
        host = "cassandra"
        port = "9042"
        isMultiDCEnabled = "false"
      }
      ml-mongo {
          host = ""
          port = "27017"
          database = ""
      }
      sunbird_instance_name = "Sunbird"
    
  log4j_console_properties: |-
    # This affects logging for both user code and Flink
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = ConsoleAppender
    
    # Uncomment this if you want to _only_ change Flink's logging
    #logger.flink.name = org.apache.flink
    #logger.flink.level = INFO
    
    # The following lines keep the log level of common libraries/connectors on
    # log level INFO. The root logger does not override this. You have to manually
    # change the log levels here.
    logger.akka.name = akka
    logger.akka.level = ERROR
    logger.kafka.name= org.apache.kafka
    logger.kafka.level = ERROR
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = ERROR
    logger.zookeeper.name = org.apache.zookeeper
    logger.zookeeper.level = ERROR
    
    # Log all infos to the console
    appender.console.name = ConsoleAppender
    appender.console.type = CONSOLE
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    
    # Suppress the irrelevant (wrong) warnings from the Netty channel handler
    logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
    logger.netty.level = OFF
---
# Source: learnbb/charts/flink/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: legacy-certificate-migrator-config
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  config: |-
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = ".legacy.certificate.migrate"
      output.audit.topic = ".telemetry.raw"
      groupId = "-certificate-migrator-group"
    }
    task {
      restart-strategy.attempts = "3" # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = "1"
      parallelism = "1"
    }
    lms-cassandra {
      keyspace = "sunbird_courses"
      user_enrolments.table = "user_enrolments"
      course_batch.table = "course_batch"
      sbkeyspace = "sunbird"
      certreg.table ="cert_registry"
    }
    cert_domain_url = ""
    cert_container_name = ""
    cert_cloud_storage_type = "azure"
    cert_cloud_storage_secret = ""
    cert_cloud_storage_key = ""
    cloud_storage_base_url = "https://"
    cloud_store_base_path_placeholder = "CLOUD_BASE_PATH"
    content_cloud_storage_container = ""
    cloud_storage_cname_url = "https://"
    service {
      certreg.basePath = "http://certreg:9000/certreg"
      learner.basePath = "http://userorg-service:9000"
      enc.basePath = "http://enc:9000/enc"
      rc.basePath = "http://registry-service:8081/api/v1"
      rc.entity = "TrainingCertificate"
      rc.rcApiKey = "token"
    }
    enable.suppress.exception = "false"
    enable.rc.certificate = "true"
    task.rc.badcharlist = "char_list"
    
  flink-conf: |-
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    
  base-config: |-
    kafka {
        broker-servers = "kafka:9092"
        producer.broker-servers = "kafka:9092"
        consumer.broker-servers = "kafka:9092"
        zookeeper = "zookeeper:2181"
        producer {
          max-request-size = 1572864
          batch.size = 98304
          linger.ms = 10
        }
      }
      job {
        env = ""
        enable.distributed.checkpointing = true
        # No valid checkpoint_store_type configured, skipping statebackend.
      }
      
      
      
      task {
        parallelism = 1
        consumer.parallelism = 1
        checkpointing.compressed = true
        checkpointing.interval = 60000
        checkpointing.pause.between.seconds = 5000
        restart-strategy.attempts = 3
        restart-strategy.delay = 30000 # in milli-seconds
      }
      redisdb.connection.timeout = 30000
      redis {
        host = "redis-master"
        port = "6379"
      }
      redis-meta {
        host = "redis-master"
        port = 6379
      }
      lms-cassandra {
          host = "cassandra"
          port = "9042"
          isMultiDCEnabled = "false"
      }
      neo4j {
        routePath = "bolt://neo4j:7687"
        graph = "domain"
      }
      es {
          basePath = "elasticsearch:9200"
      }
      schema {
        basePath = "https://.//schemas/local"
        supportedVersion = {
          itemset = "2.0"
        }
      }
      ml-cassandra {
        host = "cassandra"
        port = "9042"
        isMultiDCEnabled = "false"
      }
      ml-mongo {
          host = ""
          port = "27017"
          database = ""
      }
      sunbird_instance_name = "Sunbird"
    
  log4j_console_properties: |-
    # This affects logging for both user code and Flink
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = ConsoleAppender
    
    # Uncomment this if you want to _only_ change Flink's logging
    #logger.flink.name = org.apache.flink
    #logger.flink.level = INFO
    
    # The following lines keep the log level of common libraries/connectors on
    # log level INFO. The root logger does not override this. You have to manually
    # change the log levels here.
    logger.akka.name = akka
    logger.akka.level = ERROR
    logger.kafka.name= org.apache.kafka
    logger.kafka.level = ERROR
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = ERROR
    logger.zookeeper.name = org.apache.zookeeper
    logger.zookeeper.level = ERROR
    
    # Log all infos to the console
    appender.console.name = ConsoleAppender
    appender.console.type = CONSOLE
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    
    # Suppress the irrelevant (wrong) warnings from the Netty channel handler
    logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
    logger.netty.level = OFF
---
# Source: learnbb/charts/flink/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: merge-user-courses-config
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  config: |-
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = ".lms.user.account.merge"
      output.failed.topic = ".learning.events.failed"
      groupId = "-merge-courses-group"
      output.course.batch.updater.topic = ".coursebatch.job.request"
    }
    task {
      consumer.parallelism = "1"
      parallelism = "1"
      course_batch_updater.parallelism = "1"
    }
    lms-cassandra {
      keyspace = "sunbird_courses"
      content_consumption.table = "user_content_consumption"
      user_enrolments.table = "user_enrolments"
      user_activity_agg.table = "user_activity_agg"
    }
    course.date.format = "yyyy-MM-dd HH:mm:ss:SSSZ"
    
  flink-conf: |-
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    
  base-config: |-
    kafka {
        broker-servers = "kafka:9092"
        producer.broker-servers = "kafka:9092"
        consumer.broker-servers = "kafka:9092"
        zookeeper = "zookeeper:2181"
        producer {
          max-request-size = 1572864
          batch.size = 98304
          linger.ms = 10
        }
      }
      job {
        env = ""
        enable.distributed.checkpointing = true
        # No valid checkpoint_store_type configured, skipping statebackend.
      }
      
      
      
      task {
        parallelism = 1
        consumer.parallelism = 1
        checkpointing.compressed = true
        checkpointing.interval = 60000
        checkpointing.pause.between.seconds = 5000
        restart-strategy.attempts = 3
        restart-strategy.delay = 30000 # in milli-seconds
      }
      redisdb.connection.timeout = 30000
      redis {
        host = "redis-master"
        port = "6379"
      }
      redis-meta {
        host = "redis-master"
        port = 6379
      }
      lms-cassandra {
          host = "cassandra"
          port = "9042"
          isMultiDCEnabled = "false"
      }
      neo4j {
        routePath = "bolt://neo4j:7687"
        graph = "domain"
      }
      es {
          basePath = "elasticsearch:9200"
      }
      schema {
        basePath = "https://.//schemas/local"
        supportedVersion = {
          itemset = "2.0"
        }
      }
      ml-cassandra {
        host = "cassandra"
        port = "9042"
        isMultiDCEnabled = "false"
      }
      ml-mongo {
          host = ""
          port = "27017"
          database = ""
      }
      sunbird_instance_name = "Sunbird"
    
  log4j_console_properties: |-
    # This affects logging for both user code and Flink
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = ConsoleAppender
    
    # Uncomment this if you want to _only_ change Flink's logging
    #logger.flink.name = org.apache.flink
    #logger.flink.level = INFO
    
    # The following lines keep the log level of common libraries/connectors on
    # log level INFO. The root logger does not override this. You have to manually
    # change the log levels here.
    logger.akka.name = akka
    logger.akka.level = ERROR
    logger.kafka.name= org.apache.kafka
    logger.kafka.level = ERROR
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = ERROR
    logger.zookeeper.name = org.apache.zookeeper
    logger.zookeeper.level = ERROR
    
    # Log all infos to the console
    appender.console.name = ConsoleAppender
    appender.console.type = CONSOLE
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    
    # Suppress the irrelevant (wrong) warnings from the Netty channel handler
    logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
    logger.netty.level = OFF
---
# Source: learnbb/charts/flink/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: notification-job-config
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  config: |-
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = ".lms.notification"
      groupId = "-lms-notification"
    }
    task {
      restart-strategy.attempts = "3" # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = "1"
      parallelism = "1"
    }
    fcm_account_key= "your-fcm-account-key"
    sms_auth_key= ""
    mail_server_from_email= ""
    sms_default_sender= "msg-sender"
    mail_server_username= ""
    mail_server_password= ""
    mail_server_host= "smtp.sendgrid.net"
    mail_server_port= "587"
    
  flink-conf: |-
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    
  base-config: |-
    kafka {
        broker-servers = "kafka:9092"
        producer.broker-servers = "kafka:9092"
        consumer.broker-servers = "kafka:9092"
        zookeeper = "zookeeper:2181"
        producer {
          max-request-size = 1572864
          batch.size = 98304
          linger.ms = 10
        }
      }
      job {
        env = ""
        enable.distributed.checkpointing = true
        # No valid checkpoint_store_type configured, skipping statebackend.
      }
      
      
      
      task {
        parallelism = 1
        consumer.parallelism = 1
        checkpointing.compressed = true
        checkpointing.interval = 60000
        checkpointing.pause.between.seconds = 5000
        restart-strategy.attempts = 3
        restart-strategy.delay = 30000 # in milli-seconds
      }
      redisdb.connection.timeout = 30000
      redis {
        host = "redis-master"
        port = "6379"
      }
      redis-meta {
        host = "redis-master"
        port = 6379
      }
      lms-cassandra {
          host = "cassandra"
          port = "9042"
          isMultiDCEnabled = "false"
      }
      neo4j {
        routePath = "bolt://neo4j:7687"
        graph = "domain"
      }
      es {
          basePath = "elasticsearch:9200"
      }
      schema {
        basePath = "https://.//schemas/local"
        supportedVersion = {
          itemset = "2.0"
        }
      }
      ml-cassandra {
        host = "cassandra"
        port = "9042"
        isMultiDCEnabled = "false"
      }
      ml-mongo {
          host = ""
          port = "27017"
          database = ""
      }
      sunbird_instance_name = "Sunbird"
    
  log4j_console_properties: |-
    # This affects logging for both user code and Flink
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = ConsoleAppender
    
    # Uncomment this if you want to _only_ change Flink's logging
    #logger.flink.name = org.apache.flink
    #logger.flink.level = INFO
    
    # The following lines keep the log level of common libraries/connectors on
    # log level INFO. The root logger does not override this. You have to manually
    # change the log levels here.
    logger.akka.name = akka
    logger.akka.level = ERROR
    logger.kafka.name= org.apache.kafka
    logger.kafka.level = ERROR
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = ERROR
    logger.zookeeper.name = org.apache.zookeeper
    logger.zookeeper.level = ERROR
    
    # Log all infos to the console
    appender.console.name = ConsoleAppender
    appender.console.type = CONSOLE
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    
    # Suppress the irrelevant (wrong) warnings from the Netty channel handler
    logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
    logger.netty.level = OFF
---
# Source: learnbb/charts/flink/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: program-user-info-config
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  config: |-
    include file("/data/flink/conf/base-config.conf")
    kafka {
      producer.broker-servers = "kafka:9092"
      consumer.broker-servers = "kafka:9092"
      zookeeper = "zookeeper:2181"
      input.topic = ".programuser.info"
      groupId = "-programuser-group"
    }
    task {
      consumer.parallelism = "1"
      downstream.parallelism = "1"
      programuser {
        parallelism = "1"
      }
    
    }
    ml-cassandra {
      keyspace = "sunbird_programs"
      table = "program_enrollment"
    }
    
  flink-conf: |-
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    
  base-config: |-
    kafka {
        broker-servers = "kafka:9092"
        producer.broker-servers = "kafka:9092"
        consumer.broker-servers = "kafka:9092"
        zookeeper = "zookeeper:2181"
        producer {
          max-request-size = 1572864
          batch.size = 98304
          linger.ms = 10
        }
      }
      job {
        env = ""
        enable.distributed.checkpointing = true
        # No valid checkpoint_store_type configured, skipping statebackend.
      }
      
      
      
      task {
        parallelism = 1
        consumer.parallelism = 1
        checkpointing.compressed = true
        checkpointing.interval = 60000
        checkpointing.pause.between.seconds = 5000
        restart-strategy.attempts = 3
        restart-strategy.delay = 30000 # in milli-seconds
      }
      redisdb.connection.timeout = 30000
      redis {
        host = "redis-master"
        port = "6379"
      }
      redis-meta {
        host = "redis-master"
        port = 6379
      }
      lms-cassandra {
          host = "cassandra"
          port = "9042"
          isMultiDCEnabled = "false"
      }
      neo4j {
        routePath = "bolt://neo4j:7687"
        graph = "domain"
      }
      es {
          basePath = "elasticsearch:9200"
      }
      schema {
        basePath = "https://.//schemas/local"
        supportedVersion = {
          itemset = "2.0"
        }
      }
      ml-cassandra {
        host = "cassandra"
        port = "9042"
        isMultiDCEnabled = "false"
      }
      ml-mongo {
          host = ""
          port = "27017"
          database = ""
      }
      sunbird_instance_name = "Sunbird"
    
  log4j_console_properties: |-
    # This affects logging for both user code and Flink
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = ConsoleAppender
    
    # Uncomment this if you want to _only_ change Flink's logging
    #logger.flink.name = org.apache.flink
    #logger.flink.level = INFO
    
    # The following lines keep the log level of common libraries/connectors on
    # log level INFO. The root logger does not override this. You have to manually
    # change the log levels here.
    logger.akka.name = akka
    logger.akka.level = ERROR
    logger.kafka.name= org.apache.kafka
    logger.kafka.level = ERROR
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = ERROR
    logger.zookeeper.name = org.apache.zookeeper
    logger.zookeeper.level = ERROR
    
    # Log all infos to the console
    appender.console.name = ConsoleAppender
    appender.console.type = CONSOLE
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    
    # Suppress the irrelevant (wrong) warnings from the Netty channel handler
    logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
    logger.netty.level = OFF
---
# Source: learnbb/charts/flink/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: relation-cache-updater-config
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  config: |-
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = ".knowlg.content.postpublish.request"
      groupId = "-relation-cache-updater-group"
    }
    task {
      consumer.parallelism = "1"
      parallelism = "1"
    }
    lms-cassandra {
          keyspace = "_hierarchy_store"
          table = "content_hierarchy"
    }
    redis {
      database.index = 10
    }
    dp-redis {
      host = "redis-master"
      port = 6379
      database.index = 5
    }
    
  flink-conf: |-
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    
  base-config: |-
    kafka {
        broker-servers = "kafka:9092"
        producer.broker-servers = "kafka:9092"
        consumer.broker-servers = "kafka:9092"
        zookeeper = "zookeeper:2181"
        producer {
          max-request-size = 1572864
          batch.size = 98304
          linger.ms = 10
        }
      }
      job {
        env = ""
        enable.distributed.checkpointing = true
        # No valid checkpoint_store_type configured, skipping statebackend.
      }
      
      
      
      task {
        parallelism = 1
        consumer.parallelism = 1
        checkpointing.compressed = true
        checkpointing.interval = 60000
        checkpointing.pause.between.seconds = 5000
        restart-strategy.attempts = 3
        restart-strategy.delay = 30000 # in milli-seconds
      }
      redisdb.connection.timeout = 30000
      redis {
        host = "redis-master"
        port = "6379"
      }
      redis-meta {
        host = "redis-master"
        port = 6379
      }
      lms-cassandra {
          host = "cassandra"
          port = "9042"
          isMultiDCEnabled = "false"
      }
      neo4j {
        routePath = "bolt://neo4j:7687"
        graph = "domain"
      }
      es {
          basePath = "elasticsearch:9200"
      }
      schema {
        basePath = "https://.//schemas/local"
        supportedVersion = {
          itemset = "2.0"
        }
      }
      ml-cassandra {
        host = "cassandra"
        port = "9042"
        isMultiDCEnabled = "false"
      }
      ml-mongo {
          host = ""
          port = "27017"
          database = ""
      }
      sunbird_instance_name = "Sunbird"
    
  log4j_console_properties: |-
    # This affects logging for both user code and Flink
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = ConsoleAppender
    
    # Uncomment this if you want to _only_ change Flink's logging
    #logger.flink.name = org.apache.flink
    #logger.flink.level = INFO
    
    # The following lines keep the log level of common libraries/connectors on
    # log level INFO. The root logger does not override this. You have to manually
    # change the log levels here.
    logger.akka.name = akka
    logger.akka.level = ERROR
    logger.kafka.name= org.apache.kafka
    logger.kafka.level = ERROR
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = ERROR
    logger.zookeeper.name = org.apache.zookeeper
    logger.zookeeper.level = ERROR
    
    # Log all infos to the console
    appender.console.name = ConsoleAppender
    appender.console.type = CONSOLE
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    
    # Suppress the irrelevant (wrong) warnings from the Netty channel handler
    logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
    logger.netty.level = OFF
---
# Source: learnbb/charts/flink/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-deletion-cleanup-config
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  config: |-
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = ".delete.user"
      groupId = "-delete-user-group"
    }
    task {
      user.deletion.cleanup.parallelism = "1"
    }
    
    service {
        lms {
            basePath = "http://lms-service:9000"
        }
        userorg {
            basePath = "http://userorg-service:9000"
        }
    }
    
    sunbird_keycloak_user_federation_provider_id=""
    user_read_api = "/user/v5/read/"
    batch_search_api = "/course/v1/batch/list"
    
    user {
        keyspace = "sunbird"
        lookup.table = "user_lookup"
        table = "user"
        externalIdentity.table = "usr_external_identity"
        org.table = "user_organisation"
    }
    
  flink-conf: |-
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    
  base-config: |-
    kafka {
        broker-servers = "kafka:9092"
        producer.broker-servers = "kafka:9092"
        consumer.broker-servers = "kafka:9092"
        zookeeper = "zookeeper:2181"
        producer {
          max-request-size = 1572864
          batch.size = 98304
          linger.ms = 10
        }
      }
      job {
        env = ""
        enable.distributed.checkpointing = true
        # No valid checkpoint_store_type configured, skipping statebackend.
      }
      
      
      
      task {
        parallelism = 1
        consumer.parallelism = 1
        checkpointing.compressed = true
        checkpointing.interval = 60000
        checkpointing.pause.between.seconds = 5000
        restart-strategy.attempts = 3
        restart-strategy.delay = 30000 # in milli-seconds
      }
      redisdb.connection.timeout = 30000
      redis {
        host = "redis-master"
        port = "6379"
      }
      redis-meta {
        host = "redis-master"
        port = 6379
      }
      lms-cassandra {
          host = "cassandra"
          port = "9042"
          isMultiDCEnabled = "false"
      }
      neo4j {
        routePath = "bolt://neo4j:7687"
        graph = "domain"
      }
      es {
          basePath = "elasticsearch:9200"
      }
      schema {
        basePath = "https://.//schemas/local"
        supportedVersion = {
          itemset = "2.0"
        }
      }
      ml-cassandra {
        host = "cassandra"
        port = "9042"
        isMultiDCEnabled = "false"
      }
      ml-mongo {
          host = ""
          port = "27017"
          database = ""
      }
      sunbird_instance_name = "Sunbird"
    
  log4j_console_properties: |-
    # This affects logging for both user code and Flink
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = ConsoleAppender
    
    # Uncomment this if you want to _only_ change Flink's logging
    #logger.flink.name = org.apache.flink
    #logger.flink.level = INFO
    
    # The following lines keep the log level of common libraries/connectors on
    # log level INFO. The root logger does not override this. You have to manually
    # change the log levels here.
    logger.akka.name = akka
    logger.akka.level = ERROR
    logger.kafka.name= org.apache.kafka
    logger.kafka.level = ERROR
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = ERROR
    logger.zookeeper.name = org.apache.zookeeper
    logger.zookeeper.level = ERROR
    
    # Log all infos to the console
    appender.console.name = ConsoleAppender
    appender.console.type = CONSOLE
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
    
    # Suppress the irrelevant (wrong) warnings from the Netty channel handler
    logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
    logger.netty.level = OFF
---
# Source: learnbb/charts/groups/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: groups
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: groups
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: groups-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps
---
# Source: learnbb/charts/groups/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: groups-env
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: groups
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: groups-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  # You can add key value pair here, to create env values.
  sunbird_cassandra_consistency_level: 
  sunbird_cassandra_host: cassandra
  sunbird_cassandra_password: 
  sunbird_cassandra_port: "9042"
  sunbird_cassandra_username: 
  LEARNER_SERVICE_PORT: http://userorg-service:9000
  sunbird_redis_host: redis-master
  sunbird_redis_port: "6379"
  CONTENT_SERVICE_PORT: http://search-service:9000
  sunbird_sso_url: https:///auth/
  sunbird_sso_realm: sunbird
  sunbird_sso_client_id: lms
  sunbird_sso_client_secret: lms_client_secret
  sunbird_sso_username: 
  sunbird_sso_password: 
  sunbird_keycloak_user_federation_provider_id: cassandrafederationid
  sunbird_keycloak_required_action_link_expiration_seconds: "2592000"
  accesstoken.publickey.basepath: /keys/
  sunbird_user_service_search_url: /private/user/v1/search
  sunbird_cs_search_url: /v3/search
  ENV_NAME: 
  SUNBIRD_KAFKA_URL: http://kafka:9092
  max_group_members_limit: "150"
  max_activity_limit: "100"
  max_group_limit: "50"
  enable_userid_redis_cache: "true"
  groups_redis_ttl: "86400"
  user_redis_ttl: "3600"
  notification_service_base_url: http://notification-service:9000
  notification_service_api_url: /v2/notification/send
  enable_tenant_config: "*"
  isMultiDCEnabled: "false"
  JAVA_OPTIONS: -Xmx500m
  _JAVA_OPTIONS: "\"-Dlog4j2.formatMsgNoLookups=true\""
---
# Source: learnbb/charts/groups/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: groups-access-keys
data:
---
# Source: learnbb/charts/kafka/charts/zookeeper/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-scripts
  namespace: sunbird
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-11.0.2
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.8.0"
    app.kubernetes.io/component: zookeeper
data:
  init-certs.sh: |-
    #!/bin/bash
  setup.sh: |-
    #!/bin/bash

    # Execute entrypoint as usual after obtaining ZOO_SERVER_ID
    # check ZOO_SERVER_ID in persistent volume via myid
    # if not present, set based on POD hostname
    if [[ -f "/bitnami/zookeeper/data/myid" ]]; then
        export ZOO_SERVER_ID="$(cat /bitnami/zookeeper/data/myid)"
    else
        HOSTNAME="$(hostname -s)"
        if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
            ORD=${BASH_REMATCH[2]}
            export ZOO_SERVER_ID="$((ORD + 1 ))"
        else
            echo "Failed to get index from hostname $HOST"
            exit 1
        fi
    fi
    exec /entrypoint.sh /run.sh
---
# Source: learnbb/charts/kafka/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-scripts
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-20.0.2
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.3.1"
  annotations:
    helm.sh/hook-weight: "-5"
data:
  setup.sh: |-
    #!/bin/bash

    ID="${MY_POD_NAME#"kafka-"}"
    if [[ -f "/bitnami/kafka/data/meta.properties" ]]; then
        export KAFKA_CFG_BROKER_ID="$(grep "broker.id" "/bitnami/kafka/data/meta.properties" | awk -F '=' '{print $2}')"
    else
        export KAFKA_CFG_BROKER_ID="$((ID + 0))"
    fi

    # Configure zookeeper client

    exec /entrypoint.sh /run.sh
---
# Source: learnbb/charts/keycloak-kids-keys/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-kids-keys-env
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak-kids-keys
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: keycloak-kids-keys-0.1.0
data:
  # You can add key value pair here, to create env values.
  POSTGRES_HOST: "postgresql"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "keycloak"
  POSTGRES_USER: "postgres"
  PGPASSWORD: "postgres"
  KEYCLOAK_URL: "keycloak"
  KEYCLOAK_PORT: "8080"
  KEYCLOAK_REALM: "sunbird"
  KEYCLOAK_ADMIN_USERNAME: "admin"
  KEYCLOAK_ADMIN_PASSWORD: "admin"
  NAMESPACE: "sunbird"
---
# Source: learnbb/charts/keycloak/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: keycloak-0.1.0
  annotations:

    helm.sh/hook-weight: "-3"
    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  realm.json: |-
      {
          "id": "sunbird",
          "realm": "sunbird",
          "displayName": "sunbird",
          "notBefore": 1548955037,
          "revokeRefreshToken": false,
          "refreshTokenMaxReuse": 0,
          "accessTokenLifespan": 43200,
          "accessTokenLifespanForImplicitFlow": 5184000,
          "ssoSessionIdleTimeout": 86400,
          "ssoSessionMaxLifespan": 86400,
          "ssoSessionIdleTimeoutRememberMe": 0,
          "ssoSessionMaxLifespanRememberMe": 0,
          "offlineSessionIdleTimeout": 259200,
          "offlineSessionMaxLifespanEnabled": false,
          "offlineSessionMaxLifespan": 5184000,
          "accessCodeLifespan": 1800,
          "accessCodeLifespanUserAction": 1800,
          "accessCodeLifespanLogin": 43200,
          "actionTokenGeneratedByAdminLifespan": 43200,
          "actionTokenGeneratedByUserLifespan": 300,
          "enabled": true,
          "sslRequired": "none",
          "registrationAllowed": true,
          "registrationEmailAsUsername": false,
          "rememberMe": true,
          "verifyEmail": false,
          "loginWithEmailAllowed": true,
          "duplicateEmailsAllowed": false,
          "resetPasswordAllowed": true,
          "editUsernameAllowed": false,
          "bruteForceProtected": true,
          "permanentLockout": false,
          "maxFailureWaitSeconds": 900,
          "minimumQuickLoginWaitSeconds": 60,
          "waitIncrementSeconds": 86400,
          "quickLoginCheckMilliSeconds": 1000,
          "maxDeltaTimeSeconds": 43200,
          "failureFactor": 10,
          "roles": {
            "realm": [
              {
                "id": "7b955d7f-0a1e-4935-8391-642886d34612",
                "name": "offline_access",
                "description": "${role_offline-access}",
                "composite": false,
                "clientRole": false,
                "containerId": "sunbird",
                "attributes": {}
              },
              {
                "id": "d6e505fe-c3c5-4689-946e-7f69d3f64c6c",
                "name": "admin",
                "description": "role_admin",
                "composite": true,
                "composites": {
                  "realm": [
                    "offline_access",
                    "uma_authorization"
                  ]
                },
                "clientRole": false,
                "containerId": "sunbird",
                "attributes": {}
              },
              {
                "id": "96adf368-c8e2-4b39-b2a5-2559573edb63",
                "name": "uma_authorization",
                "description": "${role_uma_authorization}",
                "composite": false,
                "clientRole": false,
                "containerId": "sunbird",
                "attributes": {}
              }
            ],
            "client": {
              "direct-grant": [],
              "nodebb": [],
              "realm-management": [
                {
                  "id": "3f8bf7e5-5d66-4394-8f06-1270529c605f",
                  "name": "manage-authorization",
                  "description": "${role_manage-authorization}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "601fa2c9-29d4-49c1-87ac-939a1260f6ce",
                  "name": "query-realms",
                  "description": "${role_query-realms}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "9aa1dcd9-cb93-4496-af5f-41b9ecacc1da",
                  "name": "view-authorization",
                  "description": "${role_view-authorization}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "98999987-faf5-4c4e-958a-e5463bc4edc6",
                  "name": "manage-events",
                  "description": "${role_manage-events}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "f898fca8-5361-49d5-900a-ebf5b775a939",
                  "name": "impersonation",
                  "description": "${role_impersonation}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "698dfeb0-b8d2-4240-b8a8-acd4b7a12ad3",
                  "name": "view-realm",
                  "description": "${role_view-realm}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "3ff462fc-b33c-431a-b54b-861c3298d910",
                  "name": "manage-users",
                  "description": "${role_manage-users}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "be1802b1-558c-404c-bcb9-b9bf77af9788",
                  "name": "manage-identity-providers",
                  "description": "${role_manage-identity-providers}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "387b44e4-e901-4431-b9af-6abd9377ed46",
                  "name": "query-clients",
                  "description": "${role_query-clients}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "a408b6e8-03c9-46a2-97ba-305d09db0c3c",
                  "name": "view-events",
                  "description": "${role_view-events}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "41c2f39a-3008-4f9d-9e1e-a7738c118570",
                  "name": "query-groups",
                  "description": "${role_query-groups}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "26d3289b-d2eb-4cf2-a501-f1e3fa07344c",
                  "name": "manage-clients",
                  "description": "${role_manage-clients}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "e2077ab0-6efb-450d-9cba-89cacd887b71",
                  "name": "create-client",
                  "description": "${role_create-client}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "46019462-3dc8-46a8-9786-ffcbad293f43",
                  "name": "view-users",
                  "description": "${role_view-users}",
                  "composite": true,
                  "composites": {
                    "client": {
                      "realm-management": [
                        "query-groups",
                        "query-users"
                      ]
                    }
                  },
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "d269f220-e93f-4b43-96a1-9f2c117a2dfb",
                  "name": "view-clients",
                  "description": "${role_view-clients}",
                  "composite": true,
                  "composites": {
                    "client": {
                      "realm-management": [
                        "query-clients"
                      ]
                    }
                  },
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "0c998f1b-7363-47fb-a493-4b6f4aacb0ba",
                  "name": "realm-admin",
                  "description": "${role_realm-admin}",
                  "composite": true,
                  "composites": {
                    "client": {
                      "realm-management": [
                        "manage-authorization",
                        "query-realms",
                        "view-authorization",
                        "manage-events",
                        "impersonation",
                        "view-realm",
                        "manage-users",
                        "manage-identity-providers",
                        "query-clients",
                        "view-events",
                        "query-groups",
                        "manage-clients",
                        "create-client",
                        "view-users",
                        "view-clients",
                        "manage-realm",
                        "view-identity-providers",
                        "query-users"
                      ]
                    }
                  },
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "d77bf5a5-5877-450b-b11e-5f874f410e10",
                  "name": "manage-realm",
                  "description": "${role_manage-realm}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "d97009ed-d0c7-4afb-b9a3-6ee03ef01a74",
                  "name": "view-identity-providers",
                  "description": "${role_view-identity-providers}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                },
                {
                  "id": "57118202-c5e5-4c49-829b-c2ed796bfdea",
                  "name": "query-users",
                  "description": "${role_query-users}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "b2f45201-1362-4b10-83c3-207d470f44bf",
                  "attributes": {}
                }
              ],
              "google-auth-desktop": [],
              "security-admin-console": [],
              "android": [],
              "broker": [
                {
                  "id": "19ef58ac-2d90-40a4-a158-0e2f8893264a",
                  "name": "read-token",
                  "description": "${role_read-token}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "c3950efa-6684-44c2-b50a-c7b3d16df04b",
                  "attributes": {}
                }
              ],
              "trampoline-android": [],
              "desktop": [],
              "lms": [
                {
                  "id": "058715c3-bda2-42f8-b217-d3c8ad10875b",
                  "name": "manage-users",
                  "description": "${role_manage-users}",
                  "composite": true,
                  "composites": {
                    "client": {
                      "realm-management": [
                        "manage-users"
                      ],
                      "lms": [
                        "manage-users"
                      ]
                    }
                  },
                  "clientRole": true,
                  "containerId": "f1e29715-91d7-4f2a-b11f-c10786f737e5",
                  "attributes": {}
                },
                {
                  "id": "670b76e1-643b-449e-bd02-057eac587b32",
                  "name": "uma_protection",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "f1e29715-91d7-4f2a-b11f-c10786f737e5",
                  "attributes": {}
                }
              ],
              "trampoline-desktop": [],
              "google-auth-android": [],
              "admin-cli": [],
              "trampoline": [],
              "portal": [],
              "account": [
                {
                  "id": "1fef7ac5-b042-462b-8298-0446044788b3",
                  "name": "manage-account",
                  "description": "${role_manage-account}",
                  "composite": true,
                  "composites": {
                    "client": {
                      "account": [
                        "manage-account-links"
                      ]
                    }
                  },
                  "clientRole": true,
                  "containerId": "c2d24d3f-65ca-46de-9cd8-3eeb71a7f83d",
                  "attributes": {}
                },
                {
                  "id": "f8786348-6fa4-4b13-828e-9f080c9c6824",
                  "name": "manage-account-links",
                  "description": "${role_manage-account-links}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "c2d24d3f-65ca-46de-9cd8-3eeb71a7f83d",
                  "attributes": {}
                },
                {
                  "id": "91c5c738-9c39-4c4d-bae8-75f18fd7c5e4",
                  "name": "view-profile",
                  "description": "${role_view-profile}",
                  "composite": false,
                  "clientRole": true,
                  "containerId": "c2d24d3f-65ca-46de-9cd8-3eeb71a7f83d",
                  "attributes": {}
                }
              ],
              "google-auth": []
            }
          },
          "groups": [],
          "defaultRoles": [
            "offline_access",
            "uma_authorization"
          ],
          "requiredCredentials": [
            "password"
          ],
          "passwordPolicy": "hashIterations(20000) and length and upperCase and specialChars and lowerCase and digits and passwordHistory(1)",
          "otpPolicyType": "totp",
          "otpPolicyAlgorithm": "HmacSHA1",
          "otpPolicyInitialCounter": 0,
          "otpPolicyDigits": 6,
          "otpPolicyLookAheadWindow": 1,
          "otpPolicyPeriod": 120,
          "otpSupportedApplications": [
            "FreeOTP"
          ],
          "scopeMappings": [
            {
              "clientScope": "offline_access",
              "roles": [
                "offline_access"
              ]
            }
          ],
          "clients": [
            {
              "id": "26320feb-8a5d-49e4-80c5-20eb7428a11e",
              "clientId": "nodebb",
              "rootUrl": "https:///discussions",
              "adminUrl": "https:///discussions",
              "baseUrl": "/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "nodebb",
              "redirectUris": [
                "https:///auth/fusionauth-oidc/callback",
                "https:///discussions/*",
                "https:///discussions/auth/fusionauth-oidc/callback"
              ],
              "webOrigins": [
                "https://"
              ],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": true,
              "serviceAccountsEnabled": false,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.multivalued.roles": "false",
                "saml.force.post.binding": "false",
                "saml.encrypt": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "saml.authnstatement": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "ccaa12e5-c02d-43d6-be17-a9589058a59a",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "beecffc2-7cee-46d2-95bf-4fe6d9083c8b",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "ae5ab74e-4e43-4e5f-9ed3-7cc9b5420247",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true"
                  }
                },
                {
                  "id": "9dd1607d-5fc2-4d13-9ec7-4a08d9139217",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "bc5fee3f-ee82-4a34-bfdb-7be32445b7e6",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "224ab538-bc07-41a0-8dfd-20327e475aa5",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "9a901d18-377b-4615-9b89-677b544be3c5",
              "clientId": "trampoline",
              "rootUrl": "https://",
              "adminUrl": "",
              "baseUrl": "/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "trampoline",
              "redirectUris": [],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": false,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": true,
              "serviceAccountsEnabled": false,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.multivalued.roles": "false",
                "saml.force.post.binding": "false",
                "saml.encrypt": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "saml.authnstatement": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "12134027-94cc-401c-bbf6-be565078ddfb",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "6a956bf1-6c40-4549-b335-9fe8c788b18f",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "d32ba1d4-3fef-42ff-aa2b-98cb4bfef6f9",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                },
                {
                  "id": "9e899fc7-1ddd-447d-810c-d91333d6621c",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "74e4d13f-bd02-4f17-bbbc-d4b79bab1971",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "48fe23c2-a6fb-4c5e-8930-28ad1913829a",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "da893beb-6ac7-420d-b51b-f05dadf56bbc",
              "clientId": "android",
              "rootUrl": "https://",
              "baseUrl": "/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "android",
              "redirectUris": [
                "https:///oauth2callback",
                ".sunbird.app://mobile"
              ],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": false,
              "publicClient": true,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.multivalued.roles": "false",
                "saml.force.post.binding": "false",
                "saml.encrypt": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "saml.authnstatement": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "ff7dac46-16b4-4ab6-a054-dd03d5411fa9",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "32fad9c0-0dfe-45b2-94a1-3e2f74d756ec",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "4fb4d644-c609-4a27-a407-d451bcd83e16",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "84e7c6e5-1afb-44d8-b507-1ed31fa0f351",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "e7ca189f-94de-4996-a192-e93ba960bbba",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                },
                {
                  "id": "16bedb3b-7571-4106-9a47-66151915ac31",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "4e8f751d-5caa-489f-a281-636b56576cee",
              "clientId": "google-auth-desktop",
              "rootUrl": "https://",
              "adminUrl": "",
              "baseUrl": "/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "google-auth-desktop",
              "redirectUris": [
                "https:///*"
              ],
              "webOrigins": [
                "https://"
              ],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": false,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": true,
              "serviceAccountsEnabled": false,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.multivalued.roles": "false",
                "saml.force.post.binding": "false",
                "saml.encrypt": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "saml.authnstatement": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "d63f24fa-6ea0-4445-89db-18cbeb06f24a",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "c2ab9976-561e-4ba0-8599-e573e6abafe3",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "f06b6720-9ee5-42b3-8ba1-ad232f622570",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "10dce5cc-503e-4dff-9f07-f1c534956747",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "8c97679c-aa11-4794-a157-5e08bb315033",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true"
                  }
                },
                {
                  "id": "66405b47-d570-414f-bbfb-5f9bdbcc6132",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "21529800-33dd-11eb-adc1-0242ac120002",
              "clientId": "desktop",
              "rootUrl": "https://",
              "adminUrl": "https://",
              "baseUrl": "/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "",
              "redirectUris": [
                "https:///oauth2callback"
              ],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": false,
              "publicClient": true,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.multivalued.roles": "false",
                "saml.force.post.binding": "false",
                "saml.encrypt": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "saml.authnstatement": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "f9d3b3b4-b2f7-44dd-9a88-3c3e84498af4",
                  "name": "Client Host",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usersessionmodel-note-mapper",
                  "consentRequired": false,
                  "config": {
                    "user.session.note": "clientHost",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "clientHost",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "21529a26-33dd-11eb-adc1-0242ac120002",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "2152a052-33dd-11eb-adc1-0242ac120002",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "005d98d7-be8b-4847-8616-12ec41a05382",
                  "name": "Client IP Address",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usersessionmodel-note-mapper",
                  "consentRequired": false,
                  "config": {
                    "user.session.note": "clientAddress",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "clientAddress",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "21529c10-33dd-11eb-adc1-0242ac120002",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "21529ce2-33dd-11eb-adc1-0242ac120002",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "21529b2a-33dd-11eb-adc1-0242ac120002",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "b6432e79-2303-43a5-bc9b-a848aef35789",
                  "name": "Client ID",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usersessionmodel-note-mapper",
                  "consentRequired": false,
                  "config": {
                    "user.session.note": "clientId",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "clientId",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "21529daa-33dd-11eb-adc1-0242ac120002",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "b2f45201-1362-4b10-83c3-207d470f44bf",
              "clientId": "realm-management",
              "name": "${client_realm-management}",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "",
              "redirectUris": [],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": true,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": false,
              "authorizationServicesEnabled": true,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {},
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": false,
              "nodeReRegistrationTimeout": 0,
              "protocolMappers": [
                {
                  "id": "71605238-bf41-400e-8c03-a5d78f54b00b",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "a0cb6f3a-30ef-4475-b73f-ca6c2f1f3675",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "3a7708b1-63b9-4116-af7f-969fc1bf61a4",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "c393d7b7-fa22-4e90-9ad7-07d520632c20",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "e77aae69-8ea4-4ee4-bcd6-ba7ef3958c02",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                },
                {
                  "id": "2d8cbac4-e4dd-4fa6-bf71-98adf826b9dd",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [],
              "optionalClientScopes": [],
              "authorizationSettings": {
                "allowRemoteResourceManagement": false,
                "policyEnforcementMode": "ENFORCING",
                "resources": [
                  {
                    "name": "role.resource.d6e505fe-c3c5-4689-946e-7f69d3f64c6c",
                    "type": "Role",
                    "ownerManagedAccess": false,
                    "attributes": {},
                    "_id": "88e477b6-2f34-40cb-8762-89ba9a1d66eb",
                    "uris": [],
                    "scopes": [
                      {
                        "name": "map-role-composite"
                      },
                      {
                        "name": "map-role-client-scope"
                      },
                      {
                        "name": "map-role"
                      }
                    ]
                  },
                  {
                    "name": "client.resource.8c12290d-d62f-48ce-913b-c93bf995ca59",
                    "type": "Client",
                    "ownerManagedAccess": false,
                    "attributes": {},
                    "_id": "78be7d45-828c-46ce-b8ee-bbc7d654eda6",
                    "uris": [],
                    "scopes": [
                      {
                        "name": "view"
                      },
                      {
                        "name": "map-roles-client-scope"
                      },
                      {
                        "name": "configure"
                      },
                      {
                        "name": "map-roles"
                      },
                      {
                        "name": "manage"
                      },
                      {
                        "name": "map-roles-composite"
                      }
                    ]
                  }
                ],
                "policies": [
                  {
                    "id": "f50ba18c-aa7c-4925-8225-38610d77066a",
                    "name": "map-role.permission.d6e505fe-c3c5-4689-946e-7f69d3f64c6c",
                    "type": "scope",
                    "logic": "POSITIVE",
                    "decisionStrategy": "AFFIRMATIVE",
                    "config": {
                      "resources": "[\"role.resource.d6e505fe-c3c5-4689-946e-7f69d3f64c6c\"]",
                      "scopes": "[\"map-role\"]"
                    }
                  },
                  {
                    "id": "735e8e6f-feaa-4865-be21-3c463f058b9e",
                    "name": "map-role-client-scope.permission.d6e505fe-c3c5-4689-946e-7f69d3f64c6c",
                    "type": "scope",
                    "logic": "POSITIVE",
                    "decisionStrategy": "AFFIRMATIVE",
                    "config": {
                      "resources": "[\"role.resource.d6e505fe-c3c5-4689-946e-7f69d3f64c6c\"]",
                      "scopes": "[\"map-role-client-scope\"]"
                    }
                  },
                  {
                    "id": "7b1400f7-28fa-46b0-ac62-5029208bf5cd",
                    "name": "map-role-composite.permission.d6e505fe-c3c5-4689-946e-7f69d3f64c6c",
                    "type": "scope",
                    "logic": "POSITIVE",
                    "decisionStrategy": "AFFIRMATIVE",
                    "config": {
                      "resources": "[\"role.resource.d6e505fe-c3c5-4689-946e-7f69d3f64c6c\"]",
                      "scopes": "[\"map-role-composite\"]"
                    }
                  },
                  {
                    "id": "280a230c-2c62-4f15-b6c1-c60ccbaebb49",
                    "name": "manage.permission.client.8c12290d-d62f-48ce-913b-c93bf995ca59",
                    "type": "scope",
                    "logic": "POSITIVE",
                    "decisionStrategy": "UNANIMOUS",
                    "config": {
                      "resources": "[\"client.resource.8c12290d-d62f-48ce-913b-c93bf995ca59\"]",
                      "scopes": "[\"manage\"]"
                    }
                  },
                  {
                    "id": "05accf91-18b6-4473-8797-97270784d7f0",
                    "name": "configure.permission.client.8c12290d-d62f-48ce-913b-c93bf995ca59",
                    "type": "scope",
                    "logic": "POSITIVE",
                    "decisionStrategy": "UNANIMOUS",
                    "config": {
                      "resources": "[\"client.resource.8c12290d-d62f-48ce-913b-c93bf995ca59\"]",
                      "scopes": "[\"configure\"]"
                    }
                  },
                  {
                    "id": "d6c34ee5-3513-4779-b866-969c3b239a86",
                    "name": "view.permission.client.8c12290d-d62f-48ce-913b-c93bf995ca59",
                    "type": "scope",
                    "logic": "POSITIVE",
                    "decisionStrategy": "UNANIMOUS",
                    "config": {
                      "resources": "[\"client.resource.8c12290d-d62f-48ce-913b-c93bf995ca59\"]",
                      "scopes": "[\"view\"]"
                    }
                  },
                  {
                    "id": "2d078a8f-3b8d-49bf-8777-1ec008750f5d",
                    "name": "map-roles.permission.client.8c12290d-d62f-48ce-913b-c93bf995ca59",
                    "type": "scope",
                    "logic": "POSITIVE",
                    "decisionStrategy": "UNANIMOUS",
                    "config": {
                      "resources": "[\"client.resource.8c12290d-d62f-48ce-913b-c93bf995ca59\"]",
                      "scopes": "[\"map-roles\"]"
                    }
                  },
                  {
                    "id": "4094a5e8-5344-404a-b7fc-105a9449665c",
                    "name": "map-roles-client-scope.permission.client.8c12290d-d62f-48ce-913b-c93bf995ca59",
                    "type": "scope",
                    "logic": "POSITIVE",
                    "decisionStrategy": "UNANIMOUS",
                    "config": {
                      "resources": "[\"client.resource.8c12290d-d62f-48ce-913b-c93bf995ca59\"]",
                      "scopes": "[\"map-roles-client-scope\"]"
                    }
                  },
                  {
                    "id": "dbd7f47f-47bf-4040-ab10-8d34ff02810c",
                    "name": "map-roles-composite.permission.client.8c12290d-d62f-48ce-913b-c93bf995ca59",
                    "type": "scope",
                    "logic": "POSITIVE",
                    "decisionStrategy": "UNANIMOUS",
                    "config": {
                      "resources": "[\"client.resource.8c12290d-d62f-48ce-913b-c93bf995ca59\"]",
                      "scopes": "[\"map-roles-composite\"]"
                    }
                  }
                ],
                "scopes": [
                  {
                    "id": "8cbcc54b-e113-4b3b-afdd-2b1c0ce53a72",
                    "name": "map-role"
                  },
                  {
                    "id": "74001b3e-c52e-40e0-9ad1-dfcaa7c068b1",
                    "name": "map-role-client-scope"
                  },
                  {
                    "id": "d5f2f548-4856-4191-b196-1901d79a1376",
                    "name": "map-role-composite"
                  },
                  {
                    "id": "1dbc819e-8612-478e-b0da-e8573954b60e",
                    "name": "manage"
                  },
                  {
                    "id": "e7067636-4620-480c-afb4-efe104a6ad69",
                    "name": "view"
                  },
                  {
                    "id": "60f9a211-96d0-4ab7-b0c2-d4f0214d717c",
                    "name": "map-roles"
                  },
                  {
                    "id": "56022a9b-33cd-4b2b-90c6-5a4aa1302dcd",
                    "name": "map-roles-client-scope"
                  },
                  {
                    "id": "73b840d5-e62b-46a6-aee4-9891be59d723",
                    "name": "map-roles-composite"
                  },
                  {
                    "id": "9daa40c7-bbba-49a3-bc96-e1ef93bb48d2",
                    "name": "configure"
                  }
                ],
                "decisionStrategy": "UNANIMOUS"
              }
            },
            {
              "id": "79e661df-66d6-4020-b5b0-57ec229db534",
              "clientId": "admin-cli",
              "name": "${client_admin-cli}",
              "surrogateAuthRequired": false,
              "enabled": false,
              "clientAuthenticatorType": "client-secret",
              "secret": "",
              "redirectUris": [],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": false,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": true,
              "serviceAccountsEnabled": false,
              "publicClient": true,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.multivalued.roles": "false",
                "saml.force.post.binding": "false",
                "saml.encrypt": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "saml.authnstatement": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": false,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "8a48e88a-2512-4f7f-98ca-12b089e558ec",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "6486f986-af84-45b9-acab-0af181f82b25",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true"
                  }
                },
                {
                  "id": "76a95ad8-a613-44f5-ae05-1a44a3bde639",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "30cb61be-772a-4589-b381-e2080c74cfcf",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "af80ae44-1e32-46a2-8784-14261c92b80e",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "90d13750-e6cc-439e-9e7e-7483ce90eb1b",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "microprofile-jwt"
              ]
            },
            {
              "id": "8c12290d-d62f-48ce-913b-c93bf995ca59",
              "clientId": "portal",
              "rootUrl": "https://",
              "adminUrl": "/oauth2callback",
              "baseUrl": "/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "",
              "redirectUris": [
                "https:///private/*",
                "https:///*",
                "https:///"
              ],
              "webOrigins": [
                ""
              ],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": false,
              "publicClient": true,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.multivalued.roles": "false",
                "saml.force.post.binding": "false",
                "saml.encrypt": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "exclude.session.state.from.auth.response": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "tls.client.certificate.bound.access.tokens": "false",
                "saml.authnstatement": "false",
                "display.on.consent.screen": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "63071ff2-a5e5-4d38-b534-a9f25a075403",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                },
                {
                  "id": "9bf9cad5-dbce-41e9-aa36-d84cc5a768a2",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "238e55b7-6545-467e-856b-f95477afe1ff",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "edb1ff4e-b452-46bc-8c3b-d6075f6ee579",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "7a0118e2-57ff-4d23-bf74-cbfe1f545d1d",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "b59a913e-118a-4dc4-a8d7-66c44ced5345",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "349dad8b-6e03-4f22-8368-50a43ba08f6f",
              "clientId": "google-auth-android",
              "rootUrl": "https://",
              "adminUrl": "",
              "baseUrl": "/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "google-auth-android",
              "redirectUris": [
                "https:///*"
              ],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": false,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": true,
              "serviceAccountsEnabled": false,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.multivalued.roles": "false",
                "saml.force.post.binding": "false",
                "saml.encrypt": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "saml.authnstatement": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "0f977731-0434-4b22-92e9-71b5c89c1c38",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "5675d8c8-771a-4fa2-9278-7239c007c22b",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "22f8b83d-f207-4d2b-8884-8fe8d73e0f88",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "e3334f7a-a4cc-4922-bd54-a69a59a53908",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                },
                {
                  "id": "df970ff2-5097-4657-943a-d1ff20a9ca68",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "4ecd9267-5bf0-4eea-91d4-ee2ad9cf5f69",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "f1e29715-91d7-4f2a-b11f-c10786f737e5",
              "clientId": "lms",
              "rootUrl": "https://",
              "adminUrl": "https://",
              "baseUrl": "/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "lms",
              "redirectUris": [
                "https:///*",
                "https:///resources"
              ],
              "webOrigins": [
                "https://"
              ],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": true,
              "authorizationServicesEnabled": true,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.multivalued.roles": "false",
                "saml.force.post.binding": "false",
                "saml.encrypt": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "saml.authnstatement": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "99d66c08-4cc6-4a26-b9a0-6e8200078a0b",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true"
                  }
                },
                {
                  "id": "2739a92e-c49f-4670-8b77-86d169e54e32",
                  "name": "Client IP Address",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usersessionmodel-note-mapper",
                  "consentRequired": false,
                  "config": {
                    "user.session.note": "clientAddress",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "clientAddress",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "75770bd7-b072-48b6-800f-acdb3a8ed578",
                  "name": "Client ID",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usersessionmodel-note-mapper",
                  "consentRequired": false,
                  "config": {
                    "user.session.note": "clientId",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "clientId",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "60ab68af-b145-4b2e-8b39-53bd6196a266",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "7d645724-6fe2-4939-afff-0ba716158d7c",
                  "name": "Client Host",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usersessionmodel-note-mapper",
                  "consentRequired": false,
                  "config": {
                    "user.session.note": "clientHost",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "clientHost",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "4edb4528-7b27-4df9-b341-57b0059958c6",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "e585f727-a10f-431b-977e-dd362f99388c",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "76cb2ee1-1ab8-4753-a486-34d071ad1e3a",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "94f9c52f-c019-4818-8b2c-30fd26274328",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "offline_access",
                "microprofile-jwt"
              ],
              "authorizationSettings": {
                "allowRemoteResourceManagement": false,
                "policyEnforcementMode": "ENFORCING",
                "resources": [
                  {
                    "name": "Default Resource",
                    "type": "urn:lms:resources:default",
                    "ownerManagedAccess": false,
                    "attributes": {},
                    "_id": "2195090a-af1c-4c71-a281-14fefa90c555",
                    "uris": [
                      "/*"
                    ]
                  }
                ],
                "policies": [
                  {
                    "id": "d2ccb04e-78fa-4118-a20c-34feb3d9b0a4",
                    "name": "Default Policy",
                    "description": "A policy that grants access only for users within this realm",
                    "type": "js",
                    "logic": "POSITIVE",
                    "decisionStrategy": "AFFIRMATIVE",
                    "config": {
                      "code": "// by default, grants any permission associated with this policy\n$evaluation.grant();\n"
                    }
                  },
                  {
                    "id": "2ecb87d6-ed47-4176-a437-ebd57833769f",
                    "name": "Default Permission",
                    "description": "A permission that applies to the default resource type",
                    "type": "resource",
                    "logic": "POSITIVE",
                    "decisionStrategy": "UNANIMOUS",
                    "config": {
                      "defaultResourceType": "urn:lms:resources:default",
                      "applyPolicies": "[\"Default Policy\"]"
                    }
                  }
                ],
                "scopes": [],
                "decisionStrategy": "UNANIMOUS"
              }
            },
            {
              "id": "dad84085-32b6-4a06-96bd-62edbbce9e68",
              "clientId": "direct-grant",
              "rootUrl": "https://",
              "adminUrl": "https://",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "direct-grant",
              "redirectUris": [
                "https:///*"
              ],
              "webOrigins": [
                "https://"
              ],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": true,
              "serviceAccountsEnabled": false,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.multivalued.roles": "false",
                "saml.force.post.binding": "false",
                "saml.encrypt": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "exclude.session.state.from.auth.response": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "tls.client.certificate.bound.access.tokens": "false",
                "saml.authnstatement": "false",
                "display.on.consent.screen": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "defaultClientScopes": [
                "web-origins",
                "role_list",
                "profile",
                "roles",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "647aa742-d849-41d2-b174-c06b59e6d5b6",
              "clientId": "google-auth",
              "rootUrl": "https://",
              "adminUrl": "",
              "baseUrl": "/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "google-auth",
              "redirectUris": [
                "https:///*"
              ],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": false,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": true,
              "serviceAccountsEnabled": false,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.multivalued.roles": "false",
                "saml.force.post.binding": "false",
                "saml.encrypt": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "saml.authnstatement": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "bdb4cdf5-0ee5-475b-bb47-25a5f90f1305",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "4b3632c9-8055-4f9f-9702-3c975d93bf8d",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                },
                {
                  "id": "702df96e-686f-4b68-bafd-1cb820fff7fb",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "03617f2e-6b45-4844-a81c-0df09ea89988",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "93b57ddf-9f32-4c0e-95eb-258ad19693db",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "b38527eb-dbed-4868-8075-69038ee3072a",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "c3950efa-6684-44c2-b50a-c7b3d16df04b",
              "clientId": "broker",
              "name": "${client_broker}",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "",
              "redirectUris": [],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": false,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {},
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": false,
              "nodeReRegistrationTimeout": 0,
              "protocolMappers": [
                {
                  "id": "54c3bbc3-850b-4636-82d1-ed4f3a46a00a",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "0f0d9b74-c476-4981-a783-dd4bdbe041ec",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "d6f625cc-eac1-49d0-bea5-17e6f9d3860c",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "bbf35056-9bbe-49a0-aefc-2bde2379ccdc",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "38b04951-1043-4dc6-9504-7b0f31ed71a4",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "88bb836b-7feb-45eb-b004-fb3be8436908",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "microprofile-jwt"
              ]
            },
            {
              "id": "79c518d7-b41a-4e6f-be42-4ef365824100",
              "clientId": "security-admin-console",
              "name": "${client_security-admin-console}",
              "baseUrl": "/auth/admin/sunbird/console/index.html",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "",
              "redirectUris": [
                "/auth/admin/sunbird/console/*"
              ],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": false,
              "publicClient": true,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {},
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": false,
              "nodeReRegistrationTimeout": 0,
              "protocolMappers": [
                {
                  "id": "c989a8c8-cb8b-40ff-b4b9-86122bad7aa9",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "b180fb8c-997c-4f6a-b774-af677f903139",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "c373dc9a-49d7-4d28-9b94-06cf20fb1955",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                },
                {
                  "id": "24c7b1c4-62c2-4d92-ab19-49bfaedcc3d4",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "883a39a7-37b4-46ef-a761-3e51b95ccc35",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "95ed8e44-38cc-4f09-8adc-19c12d5eada0",
                  "name": "locale",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "locale",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "locale",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "c66c6a41-eb22-443f-8a77-e68d404ad26f",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "microprofile-jwt"
              ]
            },
            {
              "id": "7d86da86-b107-4ec7-bfe7-84f202d4030c",
              "clientId": "trampoline-desktop",
              "rootUrl": "https://",
              "adminUrl": "",
              "baseUrl": "/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "trampoline-desktop",
              "redirectUris": [
                "https:///*"
              ],
              "webOrigins": [
                "https://"
              ],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": false,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": true,
              "serviceAccountsEnabled": false,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.multivalued.roles": "false",
                "saml.force.post.binding": "false",
                "saml.encrypt": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "saml.authnstatement": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "a5110145-04b0-4841-a4a1-4de10a78e7dd",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "5b0c88d6-1815-4813-90a2-df35ef036d86",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "9be4a0f5-daa8-4806-bf46-aaa87eeac22f",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "18bdcae0-00f6-4208-90a5-61d69adb5fa9",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "2ef53e45-67d1-4e40-9272-ef8f73a6f9f9",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "5681c015-160b-4bd4-9765-929d786b879b",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "586ad4d3-c063-4df0-91c1-9d4ab64da7ca",
              "clientId": "trampoline-android",
              "rootUrl": "https://",
              "adminUrl": "",
              "baseUrl": "/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "trampoline-android",
              "redirectUris": [
                "https:///*"
              ],
              "webOrigins": [
                "https://"
              ],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": false,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": true,
              "serviceAccountsEnabled": false,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "saml.assertion.signature": "false",
                "saml.multivalued.roles": "false",
                "saml.force.post.binding": "false",
                "saml.encrypt": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "saml.authnstatement": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "saml.onetimeuse.condition": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "3228bc78-cd5a-439f-a9ed-2d4c1a2539a3",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                },
                {
                  "id": "101f9a64-99e1-4343-9f10-9bb010bde29f",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "c4d6864a-545c-4f3d-8659-59cdca98c3c2",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "c7bb7135-5a97-4c4b-a561-c215cf757793",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "1da2f49d-8b2d-4c3b-819c-4cc9ec4a7912",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "5b4dd4d2-945a-4664-aa3d-10ba26fd872d",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "c2d24d3f-65ca-46de-9cd8-3eeb71a7f83d",
              "clientId": "account",
              "name": "${client_account}",
              "baseUrl": "/auth/realms/sunbird/account",
              "surrogateAuthRequired": false,
              "enabled": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "",
              "defaultRoles": [
                "manage-account",
                "view-profile"
              ],
              "redirectUris": [
                "/auth/realms/sunbird/account/*"
              ],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": false,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {},
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": false,
              "nodeReRegistrationTimeout": 0,
              "protocolMappers": [
                {
                  "id": "a64118ab-33c8-4060-9f3e-3ed817ba8e0d",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                },
                {
                  "id": "1f4a0c5e-7c8a-4693-8be5-14681b243868",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "8d88a133-a399-4e75-b051-5b0d4ae850ab",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                },
                {
                  "id": "45593258-916c-4158-8577-d9806c16415a",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "027be48e-b7dc-4c3a-a648-414a466b67dd",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "c93937f9-0446-4be9-8b47-3c6de857497e",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "roles"
              ],
              "optionalClientScopes": [
                "microprofile-jwt"
              ]
            }
          ],
          "clientScopes": [
            {
              "id": "49aa07cf-2be3-41a9-9692-16227da802d2",
              "name": "microprofile-jwt",
              "description": "Microprofile - JWT built-in scope",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "display.on.consent.screen": "false"
              },
              "protocolMappers": [
                {
                  "id": "21f0347f-cd91-4932-9e98-0d37457a43dc",
                  "name": "groups",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-realm-role-mapper",
                  "consentRequired": false,
                  "config": {
                    "multivalued": "true",
                    "user.attribute": "foo",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "groups",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "47b23f32-966d-47dc-900c-0d775e6709a5",
                  "name": "upn",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "upn",
                    "jsonType.label": "String"
                  }
                }
              ]
            },
            {
              "id": "72ea83e7-968e-4a2e-9f7c-ecb2ec846b6c",
              "name": "web-origins",
              "description": "OpenID Connect scope for add allowed web origins to the access token",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "false",
                "display.on.consent.screen": "false",
                "consent.screen.text": ""
              },
              "protocolMappers": [
                {
                  "id": "8e5b9603-d93b-4b95-a430-a8142a9715b9",
                  "name": "allowed web origins",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-allowed-origins-mapper",
                  "consentRequired": false,
                  "config": {}
                }
              ]
            },
            {
              "id": "32f30b60-6713-43de-9e73-a5d95b334ac8",
              "name": "roles",
              "description": "OpenID Connect scope for add user roles to the access token",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "false",
                "display.on.consent.screen": "true",
                "consent.screen.text": "${rolesScopeConsentText}"
              },
              "protocolMappers": [
                {
                  "id": "35c5fb33-cf30-43e8-a996-b1d06ae6960a",
                  "name": "realm roles",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-realm-role-mapper",
                  "consentRequired": false,
                  "config": {
                    "user.attribute": "foo",
                    "access.token.claim": "true",
                    "claim.name": "realm_access.roles",
                    "jsonType.label": "String",
                    "multivalued": "true"
                  }
                },
                {
                  "id": "2783521d-9e13-46ea-8844-f881fe91997b",
                  "name": "audience resolve",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-audience-resolve-mapper",
                  "consentRequired": false,
                  "config": {}
                },
                {
                  "id": "1121a9ed-badc-44fb-85fc-ba81159da709",
                  "name": "client roles",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-client-role-mapper",
                  "consentRequired": false,
                  "config": {
                    "user.attribute": "foo",
                    "access.token.claim": "true",
                    "claim.name": "resource_access.${client_id}.roles",
                    "jsonType.label": "String",
                    "multivalued": "true"
                  }
                }
              ]
            },
            {
              "id": "0203e8e9-684c-4ce8-b692-40539b6fd98e",
              "name": "offline_access",
              "description": "OpenID Connect built-in scope: offline_access",
              "protocol": "openid-connect",
              "attributes": {
                "consent.screen.text": "${offlineAccessScopeConsentText}",
                "display.on.consent.screen": "true"
              }
            },
            {
              "id": "b3719a37-3f11-44d7-ac8f-df8d2b6eb782",
              "name": "phone",
              "description": "OpenID Connect built-in scope: phone",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "display.on.consent.screen": "true",
                "consent.screen.text": "${phoneScopeConsentText}"
              },
              "protocolMappers": [
                {
                  "id": "71b8571d-5f50-4afb-a45b-adade55182f9",
                  "name": "phone number verified",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "phoneNumberVerified",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "phone_number_verified",
                    "jsonType.label": "boolean"
                  }
                },
                {
                  "id": "ab426b49-638f-4ea9-bd38-628aa0f9d163",
                  "name": "phone number",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "phoneNumber",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "phone_number",
                    "jsonType.label": "String"
                  }
                }
              ]
            },
            {
              "id": "49e021ee-bab8-4f5d-9ba3-bbb493e0cca8",
              "name": "address",
              "description": "OpenID Connect built-in scope: address",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "display.on.consent.screen": "true",
                "consent.screen.text": "${addressScopeConsentText}"
              },
              "protocolMappers": [
                {
                  "id": "91895519-0e7c-4b65-8e4e-885ce79fe843",
                  "name": "address",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-address-mapper",
                  "consentRequired": false,
                  "config": {
                    "user.attribute.formatted": "formatted",
                    "user.attribute.country": "country",
                    "user.attribute.postal_code": "postal_code",
                    "userinfo.token.claim": "true",
                    "user.attribute.street": "street",
                    "id.token.claim": "true",
                    "user.attribute.region": "region",
                    "access.token.claim": "true",
                    "user.attribute.locality": "locality"
                  }
                }
              ]
            },
            {
              "id": "b6c67246-7fba-45cd-b9b0-39d41c8e7433",
              "name": "email",
              "description": "OpenID Connect built-in scope: email",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "display.on.consent.screen": "true",
                "consent.screen.text": "${emailScopeConsentText}"
              },
              "protocolMappers": [
                {
                  "id": "f29b09fa-7720-4fda-a393-04fcb6973ccb",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "a66f58cf-6646-4e8d-ae68-efa1a7ceae52",
                  "name": "email verified",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "emailVerified",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email_verified",
                    "jsonType.label": "boolean"
                  }
                }
              ]
            },
            {
              "id": "f568ba57-88e3-4a14-baaa-3c63e4d69c99",
              "name": "profile",
              "description": "OpenID Connect built-in scope: profile",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "display.on.consent.screen": "true",
                "consent.screen.text": "${profileScopeConsentText}"
              },
              "protocolMappers": [
                {
                  "id": "08dc3928-41af-4be8-b2dd-6eaffec1adc8",
                  "name": "updated at",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "updatedAt",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "updated_at",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "2f6698aa-d21f-40e0-b502-9f52646b1f0b",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "2f7e53fe-c507-4284-9c96-fb174c5af75a",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                },
                {
                  "id": "fc101011-383f-4fa0-8aa0-8a8fe1bb2795",
                  "name": "profile",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "profile",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "profile",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "e354d68e-032d-4a9c-9e08-88c9d9f0d0d1",
                  "name": "picture",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "picture",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "picture",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "fc60b6f8-33cd-4e5a-ae7e-b755b3d7af00",
                  "name": "middle name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "middleName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "middle_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "02f8257b-1e5d-48e0-a9e7-0b32f11c8b3d",
                  "name": "gender",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "gender",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "gender",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "9593a67d-9747-4064-b842-579aa84183d3",
                  "name": "nickname",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "nickname",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "nickname",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "3e627adf-6765-464b-a95c-7261547c44c3",
                  "name": "zoneinfo",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "zoneinfo",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "zoneinfo",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "cea2927e-2db5-404d-af7b-405625f88b8f",
                  "name": "locale",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "locale",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "locale",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "85054561-3829-4049-95b4-0f7e7a39610c",
                  "name": "birthdate",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "birthdate",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "birthdate",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "9b9727e4-6301-443d-89a6-45d7e23b82e8",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "d0cafe88-819f-425b-911c-9fd07388f9f0",
                  "name": "website",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "website",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "website",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "3c25a5f1-13d6-4ab4-a13e-874ca09e77bf",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                }
              ]
            },
            {
              "id": "905e3a63-0220-41c0-aef3-e5cd7bd21062",
              "name": "role_list",
              "description": "SAML role list",
              "protocol": "saml",
              "attributes": {
                "consent.screen.text": "${samlRoleListScopeConsentText}",
                "display.on.consent.screen": "true"
              },
              "protocolMappers": [
                {
                  "id": "adb0f817-07d2-41a6-ba5f-10ee483d01ef",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                }
              ]
            }
          ],
          "defaultDefaultClientScopes": [
            "role_list",
            "profile",
            "email",
            "roles",
            "web-origins"
          ],
          "defaultOptionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ],
          "browserSecurityHeaders": {
            "xContentTypeOptions": "nosniff",
            "xRobotsTag": "none",
            "xFrameOptions": "SAMEORIGIN",
            "xXSSProtection": "1; mode=block",
            "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
            "strictTransportSecurity": "max-age=31536000; includeSubDomains"
          },
          "smtpServer": {
            "password": "",
            "starttls": "",
            "auth": "true",
            "port": "587",
            "host": "",
            "from": "",
            "ssl": "",
            "user": ""
          },
          "loginTheme": "sunbird",
          "accountTheme": "keycloak",
          "adminTheme": "keycloak",
          "emailTheme": "keycloak",
          "eventsEnabled": false,
          "eventsListeners": [
            "jboss-logging"
          ],
          "enabledEventTypes": [],
          "adminEventsEnabled": false,
          "adminEventsDetailsEnabled": false,
          "components": {
            "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
              {
                "id": "84078bbb-e005-44c8-9c7d-a1b4821558da",
                "name": "Max Clients Limit",
                "providerId": "max-clients",
                "subType": "anonymous",
                "subComponents": {},
                "config": {
                  "max-clients": [
                    "200"
                  ]
                }
              },
              {
                "id": "346d857e-4385-4f8f-a2fc-072fd11a10ec",
                "name": "Allowed Protocol Mapper Types",
                "providerId": "allowed-protocol-mappers",
                "subType": "authenticated",
                "subComponents": {},
                "config": {
                  "allowed-protocol-mapper-types": [
                    "oidc-full-name-mapper",
                    "oidc-address-mapper",
                    "saml-user-property-mapper",
                    "oidc-usermodel-property-mapper",
                    "saml-user-attribute-mapper",
                    "oidc-usermodel-attribute-mapper",
                    "saml-role-list-mapper",
                    "oidc-sha256-pairwise-sub-mapper"
                  ]
                }
              },
              {
                "id": "eed64f9f-4b66-45ad-bdb4-4070e3802366",
                "name": "Allowed Client Templates",
                "providerId": "allowed-client-templates",
                "subType": "authenticated",
                "subComponents": {},
                "config": {
                  "allow-default-scopes": [
                    "true"
                  ]
                }
              },
              {
                "id": "17ac4eaa-9139-4b3a-b1db-c82d44c1531d",
                "name": "Allowed Client Templates",
                "providerId": "allowed-client-templates",
                "subType": "anonymous",
                "subComponents": {},
                "config": {
                  "allow-default-scopes": [
                    "true"
                  ]
                }
              },
              {
                "id": "38532936-be91-40e4-b65d-c0abfaf9547c",
                "name": "Full Scope Disabled",
                "providerId": "scope",
                "subType": "anonymous",
                "subComponents": {},
                "config": {}
              },
              {
                "id": "8c1690a2-6eea-4d61-ab66-7a015e3bea3c",
                "name": "Allowed Protocol Mapper Types",
                "providerId": "allowed-protocol-mappers",
                "subType": "anonymous",
                "subComponents": {},
                "config": {
                  "allowed-protocol-mapper-types": [
                    "oidc-full-name-mapper",
                    "oidc-usermodel-attribute-mapper",
                    "saml-role-list-mapper",
                    "oidc-usermodel-property-mapper",
                    "oidc-address-mapper",
                    "saml-user-property-mapper",
                    "saml-user-attribute-mapper",
                    "oidc-sha256-pairwise-sub-mapper"
                  ]
                }
              },
              {
                "id": "3dcc314c-07f8-484d-9535-29424dbaddfc",
                "name": "Trusted Hosts",
                "providerId": "trusted-hosts",
                "subType": "anonymous",
                "subComponents": {},
                "config": {
                  "host-sending-registration-request-must-match": [
                    "true"
                  ],
                  "client-uris-must-match": [
                    "true"
                  ]
                }
              },
              {
                "id": "ab52b781-64b9-42a0-99f5-cbeba6710763",
                "name": "Consent Required",
                "providerId": "consent-required",
                "subType": "anonymous",
                "subComponents": {},
                "config": {}
              }
            ],
            "org.keycloak.storage.UserStorageProvider": [
              {
                "id": "cassandrafederationid",
                "name": "cassandra-storage-provider",
                "providerId": "cassandra-storage-provider",
                "subComponents": {},
                "config": {
                  "host": [
                    "localhost"
                  ],
                  "cachePolicy": [
                    "DEFAULT"
                  ],
                  "priority": [
                    "0"
                  ]
                }
              }
            ],
            "org.keycloak.keys.KeyProvider": [
              {
                "id": "bd30c46f-9ee3-443d-9faa-6ed8075aac87",
                "name": "rsa-generated",
                "providerId": "rsa-generated",
                "subComponents": {},
                "config": {
                  "priority": [
                    "100"
                  ]
                }
              },
              {
                "id": "21b13684-2eca-4814-95ce-45de76b8ab16",
                "name": "aes-generated",
                "providerId": "aes-generated",
                "subComponents": {},
                "config": {
                  "priority": [
                    "100"
                  ]
                }
              },
              {
                "id": "a93cc73f-b070-48cd-bf08-9b290707c2f5",
                "name": "hmac-generated",
                "providerId": "hmac-generated",
                "subComponents": {},
                "config": {
                  "priority": [
                    "100"
                  ]
                }
              }
            ]
          },
          "internationalizationEnabled": false,
          "supportedLocales": [],
          "defaultLocale": "en",
          "authenticationFlows": [
            {
              "id": "976a6147-7a63-48cd-ab6d-ac3a2f0ffa42",
              "alias": "Direct Grant 2",
              "description": "OpenID Connect Resource Owner Grant",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": false,
              "authenticationExecutions": [
                {
                  "authenticator": "direct-grant-validate-username",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "direct-grant-validate-password",
                  "requirement": "DISABLED",
                  "priority": 20,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "direct-grant-validate-otp",
                  "requirement": "OPTIONAL",
                  "priority": 30,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                }
              ]
            },
            {
              "id": "fe01a5ba-9b8b-4211-8a71-273800b0309d",
              "alias": "Direct Grant w/o Password",
              "description": "Grant user access using only the username and no password.",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": false,
              "authenticationExecutions": []
            },
            {
              "id": "797d8e90-1fb5-48bc-b6f0-e44766721af0",
              "alias": "Handle Existing Account",
              "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "idp-confirm-link",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "idp-email-verification",
                  "requirement": "ALTERNATIVE",
                  "priority": 20,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "requirement": "ALTERNATIVE",
                  "priority": 30,
                  "flowAlias": "Verify Existing Account by Re-authentication",
                  "userSetupAllowed": false,
                  "autheticatorFlow": true
                }
              ]
            },
            {
              "id": "5f70fc7a-42b6-41cd-aaf9-a3837fc05f43",
              "alias": "Phone number login",
              "description": "browser based authentication",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": false,
              "authenticationExecutions": [
                {
                  "authenticator": "auth-cookie",
                  "requirement": "ALTERNATIVE",
                  "priority": 10,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "auth-spnego",
                  "requirement": "DISABLED",
                  "priority": 20,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "identity-provider-redirector",
                  "requirement": "ALTERNATIVE",
                  "priority": 25,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "requirement": "ALTERNATIVE",
                  "priority": 30,
                  "flowAlias": "Phone number login forms",
                  "userSetupAllowed": false,
                  "autheticatorFlow": true
                }
              ]
            },
            {
              "id": "b886ae3f-e90a-4309-bb05-5367c3ec977b",
              "alias": "Phone number login forms",
              "description": "Username, password, otp and other auth forms.",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": false,
              "authenticationExecutions": [
                {
                  "authenticator": "auth-phone-password-form",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "auth-otp-form",
                  "requirement": "DISABLED",
                  "priority": 21,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                }
              ]
            },
            {
              "id": "8dc1276b-946b-4c49-97d2-ade016fd9df8",
              "alias": "Reset Credentials Via SMS OTP",
              "description": "Reset credentials for a user if they forgot their password or something",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": false,
              "authenticationExecutions": [
                {
                  "authenticator": "reset-credentials-choose-user",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticatorConfig": "Reset Credentials Via SMS OTP",
                  "authenticator": "sms-authentication",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "reset-password",
                  "requirement": "REQUIRED",
                  "priority": 40,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "reset-otp",
                  "requirement": "OPTIONAL",
                  "priority": 41,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                }
              ]
            },
            {
              "id": "14838047-af17-4104-a714-bf51bd0aa699",
              "alias": "Verify Existing Account by Re-authentication",
              "description": "Reauthentication of existing account",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "idp-username-password-form",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "auth-otp-form",
                  "requirement": "OPTIONAL",
                  "priority": 20,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                }
              ]
            },
            {
              "id": "7ab0a65d-641e-4ba0-8793-35e363ba8362",
              "alias": "browser",
              "description": "browser based authentication",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "auth-cookie",
                  "requirement": "ALTERNATIVE",
                  "priority": 10,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "auth-spnego",
                  "requirement": "DISABLED",
                  "priority": 20,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "identity-provider-redirector",
                  "requirement": "ALTERNATIVE",
                  "priority": 25,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "requirement": "ALTERNATIVE",
                  "priority": 30,
                  "flowAlias": "forms",
                  "userSetupAllowed": false,
                  "autheticatorFlow": true
                }
              ]
            },
            {
              "id": "b2aedbfb-9432-4f47-8114-c6031c884b5f",
              "alias": "clients",
              "description": "Base authentication for clients",
              "providerId": "client-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "client-secret",
                  "requirement": "ALTERNATIVE",
                  "priority": 10,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "client-jwt",
                  "requirement": "ALTERNATIVE",
                  "priority": 20,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                }
              ]
            },
            {
              "id": "78809b88-19c3-4351-ac1a-e1c43dd71143",
              "alias": "direct grant",
              "description": "OpenID Connect Resource Owner Grant",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "direct-grant-validate-username",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "direct-grant-validate-password",
                  "requirement": "DISABLED",
                  "priority": 20,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "direct-grant-validate-otp",
                  "requirement": "OPTIONAL",
                  "priority": 30,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                }
              ]
            },
            {
              "id": "025a77cf-895a-4622-95a0-fdd9912aeb9a",
              "alias": "docker auth",
              "description": "Used by Docker clients to authenticate against the IDP",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "docker-http-basic-authenticator",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                }
              ]
            },
            {
              "id": "1ea8d8e5-7997-43d0-9ce4-0ec187d9c5be",
              "alias": "first broker login",
              "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticatorConfig": "review profile config",
                  "authenticator": "idp-review-profile",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticatorConfig": "create unique user config",
                  "authenticator": "idp-create-user-if-unique",
                  "requirement": "ALTERNATIVE",
                  "priority": 20,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "requirement": "ALTERNATIVE",
                  "priority": 30,
                  "flowAlias": "Handle Existing Account",
                  "userSetupAllowed": false,
                  "autheticatorFlow": true
                }
              ]
            },
            {
              "id": "5ae10869-08a5-489b-97c6-b6f65a40de21",
              "alias": "forms",
              "description": "Username, password, otp and other auth forms.",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "auth-username-password-form",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "auth-otp-form",
                  "requirement": "OPTIONAL",
                  "priority": 20,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                }
              ]
            },
            {
              "id": "1be582c9-b469-4092-82d4-365fb6d02963",
              "alias": "registration",
              "description": "registration flow",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "registration-page-form",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "flowAlias": "registration form",
                  "userSetupAllowed": false,
                  "autheticatorFlow": true
                }
              ]
            },
            {
              "id": "e71bd4ef-a33e-4a75-a8fc-8cfaf6a1119b",
              "alias": "registration form",
              "description": "registration form",
              "providerId": "form-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "registration-user-creation",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "registration-profile-action",
                  "requirement": "REQUIRED",
                  "priority": 40,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "registration-password-action",
                  "requirement": "REQUIRED",
                  "priority": 50,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "registration-recaptcha-action",
                  "requirement": "DISABLED",
                  "priority": 60,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                }
              ]
            },
            {
              "id": "6c4e8128-0eb4-4303-bbec-3e5baec31022",
              "alias": "reset credentials",
              "description": "Reset credentials for a user if they forgot their password or something",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "reset-credentials-choose-user",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "reset-credential-email",
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "reset-password",
                  "requirement": "REQUIRED",
                  "priority": 30,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                },
                {
                  "authenticator": "reset-otp",
                  "requirement": "OPTIONAL",
                  "priority": 40,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                }
              ]
            },
            {
              "id": "ec7bae86-99e4-403a-a041-1039bacba45e",
              "alias": "saml ecp",
              "description": "SAML ECP Profile Authentication Flow",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "http-basic-authenticator",
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "userSetupAllowed": false,
                  "autheticatorFlow": false
                }
              ]
            }
          ],
          "authenticatorConfig": [
            {
              "id": "7d7aa155-54cd-4b62-bc7f-558ce934e0a5",
              "alias": "Reset Credentials Via SMS OTP",
              "config": {
                "sms-auth.code.length": "6",
                "sms-auth.msg.text": "Reset your password on PREPROD with the OTP %sms-code%. The OTP is valid for 5 minutes.",
                "sms-auth.code.ttl": "300"
              }
            },
            {
              "id": "cc029554-f8bc-49c2-81cc-f0f7141bf178",
              "alias": "create unique user config",
              "config": {
                "require.password.update.after.registration": "false"
              }
            },
            {
              "id": "6a2402e1-b718-43a0-9b65-2a7b62d3b935",
              "alias": "review profile config",
              "config": {
                "update.profile.on.first.login": "missing"
              }
            }
          ],
          "requiredActions": [
            {
              "alias": "CONFIGURE_TOTP",
              "name": "Configure OTP",
              "providerId": "CONFIGURE_TOTP",
              "enabled": true,
              "defaultAction": false,
              "priority": 10,
              "config": {}
            },
            {
              "alias": "terms_and_conditions",
              "name": "Terms and Conditions",
              "providerId": "terms_and_conditions",
              "enabled": true,
              "defaultAction": false,
              "priority": 20,
              "config": {}
            },
            {
              "alias": "UPDATE_PASSWORD",
              "name": "Update Password",
              "providerId": "UPDATE_PASSWORD",
              "enabled": true,
              "defaultAction": false,
              "priority": 30,
              "config": {}
            },
            {
              "alias": "UPDATE_PROFILE",
              "name": "Update Profile",
              "providerId": "UPDATE_PROFILE",
              "enabled": true,
              "defaultAction": false,
              "priority": 40,
              "config": {}
            },
            {
              "alias": "VERIFY_EMAIL",
              "name": "Verify Email",
              "providerId": "VERIFY_EMAIL",
              "enabled": true,
              "defaultAction": false,
              "priority": 50,
              "config": {}
            }
          ],
          "browserFlow": "Phone number login",
          "registrationFlow": "registration",
          "directGrantFlow": "Direct Grant 2",
          "resetCredentialsFlow": "Reset Credentials Via SMS OTP",
          "clientAuthenticationFlow": "clients",
          "dockerAuthenticationFlow": "docker auth",
          "attributes": {
            "_browser_header.xXSSProtection": "1; mode=block",
            "_browser_header.xFrameOptions": "SAMEORIGIN",
            "_browser_header.strictTransportSecurity": "max-age=31536000; includeSubDomains",
            "permanentLockout": "false",
            "quickLoginCheckMilliSeconds": "1000",
            "displayName": "sunbird",
            "_browser_header.xRobotsTag": "none",
            "maxFailureWaitSeconds": "900",
            "minimumQuickLoginWaitSeconds": "60",
            "failureFactor": "10",
            "actionTokenGeneratedByUserLifespan": "300",
            "maxDeltaTimeSeconds": "43200",
            "_browser_header.xContentTypeOptions": "nosniff",
            "actionTokenGeneratedByAdminLifespan": "43200",
            "offlineSessionMaxLifespan": "5184000",
            "bruteForceProtected": "true",
            "_browser_header.contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
            "waitIncrementSeconds": "86400",
            "offlineSessionMaxLifespanEnabled": "false"
          },
          "keycloakVersion": "7.0.1",
          "userManagedAccessAllowed": false
        }
---
# Source: learnbb/charts/keycloak/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-env
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: keycloak-0.1.0
  annotations:

    helm.sh/hook-weight: "-3"
    reloader.stakater.com/auto: "true"
data:
  # You can add key value pair here, to create env values.
  # for example,
  
  KEYCLOAK_USER: "admin"
  KEYCLOAK_PASSWORD: "admin"
  DB_VENDOR: "postgres"
  DB_ADDR: "postgresql"
  DB_DATABASE: "keycloak"
  DB_USER: "postgres"
  DB_PASSWORD: "postgres"
  DB_PORT: "5432"
  JAVA_TOOL_OPTIONS: "-Dkeycloak.profile.feature.upload_scripts=enabled"
  PROXY_ADDRESS_FORWARDING: "true"
  KEYCLOAK_IMPORT: "/config/realm.json"
  sunbird_user_service_base_url:  "http://userorg-service:9000"
---
# Source: learnbb/charts/lms/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lms
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: lms
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: lms-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  logback.xml: |-
      <configuration>
      
          <conversionRule conversionWord="coloredLevel" converterClass="play.api.libs.logback.ColoredLevel" />
      
          <!-- transaction-event-trigger START -->
          <timestamp key="timestamp" datePattern="yyyy-MM-dd"/>
          <!-- common transactions logs -->
          <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
              <encoder>
                  <pattern>%d %msg%n</pattern>
              </encoder>
          </appender>
      
          <appender name="ASYNCSTDOUT" class="ch.qos.logback.classic.AsyncAppender">
              <appender-ref ref="STDOUT" />
          </appender>
      
          <appender name="queryLoggerAppender" class="ch.qos.logback.core.ConsoleAppender">
              <encoder class="net.logstash.logback.encoder.LogstashEncoder">
                  <layout class="ch.qos.logback.contrib.json.classic.JsonLayout">
                      <timestampFormat>yyyy-MM-dd'T'HH:mm:ss.SSSX</timestampFormat>
                      <timestampFormatTimezoneId>Etc/UTC</timestampFormatTimezoneId>
                      <fieldNames>
                          <timestamp>timestamp</timestamp>
                          <message>msg</message>
                          <logger>lname</logger>
                          <thread>tname</thread>
                          <levelValue>[ignore]</levelValue>
                          <version>[ignore]</version>
                      </fieldNames>
                  </layout>
              </encoder>
          </appender>
      
          <appender name="defaultLoggerAppender" class="ch.qos.logback.core.ConsoleAppender">
              <encoder class="net.logstash.logback.encoder.LogstashEncoder">
                  <layout class="net.logstash.logback.layout.LogstashLayout">
                      <fieldNames>
                          <timestamp>timestamp</timestamp>
                          <message>msg</message>
                          <logger>lname</logger>
                          <thread>tname</thread>
                          <levelValue>[ignore]</levelValue>
                          <version>[ignore]</version>
                          <stack_trace>exception</stack_trace>
                      </fieldNames>
                      <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                          <maxDepthPerThrowable>30</maxDepthPerThrowable>
                          <maxLength>2048</maxLength>
                          <exclude>sun\.reflect\..*\.invoke.*</exclude>
                          <rootCauseFirst>true</rootCauseFirst>
                          <inlineHash>true</inlineHash>
                      </throwableConverter>
                  </layout>
              </encoder>
          </appender>
      
          <appender name="customLoggerAppender" class="ch.qos.logback.core.ConsoleAppender">
              <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder"/>
          </appender>
      
          <logger name="org.sunbird" level="INFO">
              <appender-ref ref="customLoggerAppender"/>
          </logger>
      
          <logger name="play" level="INFO" />
          <logger name="defaultLogger" level="INFO">
              <appender-ref ref = "defaultLoggerAppender" />
          </logger>
          <!-- Telemetry Loggers-->
          <logger name="TelemetryEventLogger" level="INFO" />
          <logger name="queryLogger" level="DEBUG">
              <appender-ref ref="queryLoggerAppender" />
          </logger>
      
          <root level="INFO">
              <appender-ref ref="ASYNCSTDOUT" />
          </root>
      
      </configuration>
---
# Source: learnbb/charts/lms/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lms-env
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: lms
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: lms-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  JAVA_OPTIONS: "-Xmx600m"
  _JAVA_OPTIONS: "-Dlog4j2.formatMsgNoLookups=true"
  sunbird_sso_url: "https:///auth/"
  sunbird_sso_realm: "sunbird"
  sunbird_sso_username: "admin"
  sunbird_sso_password: "admin"
  sunbird_sso_client_id: "lms"
  sunbird_sso_client_secret: "lms_client_secret"
  sunbird_es_host: "elasticsearch"
  sunbird_es_port: "9200"
  sunbird_cassandra_username: ""
  sunbird_cassandra_password: ""
  actor_hostname: "actor-service"
  bind_hostname: "0.0.0.0"
  ekstep_authorization: ""
  sunbird_pg_host: "postgresql"
  sunbird_pg_port: "5432"
  sunbird_pg_db: "quartz"
  sunbird_pg_user: "postgres"
  sunbird_pg_password: ""
  sunbird_installation: ""
  sunbird_analytics_api_base_url: "http://analytics-service:9000"
  sunbird_search_service_api_base_url: "http://search-service:9000"
  content_service_base_url: "http://content-service:9000"
  content_read_url: "/content/v3/read/"
  sunbird_group_service_api_base_url: "http://groups-service:9000"
  sunbird_mail_server_host: ""
  sunbird_mail_server_port: ""
  sunbird_mail_server_username: ""
  sunbird_mail_server_password: ""
  sunbird_mail_server_from_email: ""
  sunbird_encryption_key: ""
  sunbird_encryption_mode: "local"
  sunbird_account_name: ""
  sunbird_account_key: ""
  sunbird_quartz_mode: "cluster"
  sunbird_web_url: ""
  sunbird_msg_91_auth: ""
  sunbird_msg_sender: ""
  sunbird_installation_email: ""
  sunbird_cassandra_host: "cassandra"
  sunbird_cassandra_port: "9042"
  sunbird_cassandra_consistency_level: ""
  sunbird_mw_system_host: "lms-service"
  sunbird_mw_system_port: "8088"
  background_actor_provider: "local"
  api_actor_provider: "local"
  sunbird_badger_baseurl: "http://badger:8004"
  sunbird_remote_req_router_path: "akka.tcp://SunbirdMWSystem@actor-service:8088/user/RequestRouter"
  sunbird_remote_bg_req_router_path: "kka.tcp://SunbirdMWSystem@actor-service:8088/user/BackgroundRequestRouter"
  sunbird_api_base_url: "http://knowledge-mw-service:5000"
  sunbird_authorization: ""
  telemetry_pdata_id: ".sunbird.learning.service"
  telemetry_pdata_pid: "lms-service"
  sunbird_telemetry_base_url: "http://telemetry-service:9001"
  telemetry_queue_threshold_value: "100"
  sunbird_default_channel: "sunbird"
  sunbird_api_mgr_base_url: "http://knowledge-mw-service:5000"
  sunbird_cs_base_url: "http://knowledge-mw-service:5000"
  sunbird_cs_search_path: "/v1/content/search"
  sunbird_env_logo_url: ""
  sunbird_user_bulk_upload_size: "1001"
  sunbird_installation_display_name: "sunbird "
  sunbird_app_name: sunbird
  sunbird_registry_service_baseurl: http://registry-service:8081
  sunbird_open_saber_bridge_enable: "false"
  sunbird_environment: ""
  sunbird_instance: ""
  sunbird_email_max_recipients_limit: "100"
  sunbird_url_shortner_access_token: ""
  sunbird_url_shortner_enable: "false"
  sunbird_user_profile_field_default_visibility: "private"
  sunbird_keycloak_required_action_link_expiration_seconds: "2592000"
  sunbird_course_batch_notification_enabled: "true"
  sunbird_course_batch_notification_signature: "sunbird"
  sunbird_otp_expiration: "1800"
  sunbird_otp_length: "6"
  sunbird_content_cloud_storage_container: ""
  sunbird_time_zone: "Asia/Kolkata"
  sunbird_health_check_enable: "true"
  sunbird_keycloak_user_federation_provider_id: "cassandrafederationid"
  sunbird_gzip_enable: "true"
  sunbird_gzip_size_threshold: "262144"
  sunbird_analytics_blob_account_name: ""
  sunbird_analytics_blob_account_key: ""
  sunbird_cache_enable: "false"
  sunbird_redis_host: "redis-master"
  sunbird_redis_port: "6379"
  sunbird_user_org_api_base_url: "http://userorg-service:9000"
  kafka_topics_instruction: ".coursebatch.job.request"
  kafka_urls: "kafka:9092"
  kafka_topics_certificate_instruction: ".issue.certificate.request"
  kafka_assessment_topic: ".telemetry.assess"
  kafka_topics_contentstate_invalid: ".contentstate.invalid"
  kafka_enrolment_sync_topic: ".batch.enrolment.sync.request"
  sunbird_cert_service_base_url: "http://cert-service:9000"
  learning_service_base_url: "http://learning:8080/learning-service"
  sunbird_user_search_cretordetails_fields: "id,firstName,lastName"
  sunbird_user_service_api_base_url: "http://userorg:9000"
  limit_managed_user_creation: "true"
  managed_user_limit: "30"
  sunbird_user_qrcode_courses_limit: "5000"
  accesstoken.publickey.basepath: "/keys/"
  learning.content.props.to.add: "mimeType,contentType,name,code,description,keywords,framework,copyright,topic"
  group_activity_agg_cache_ttl: "3600"
  group_activity_agg_cache_enable: "false"
  redis.connection.max: "64"
  redis.connection.idle.max: "32"
  redis.connection.idle.min: "1"
  redis.connection.minEvictableIdleTimeSeconds: "120"
  redis.connection.timeBetweenEvictionRunsSeconds: "300"
  redis.experimentIndex: "10"
  redis.dbIndex: "2"
  user_enrolments_response_cache_enable: "true"
  user_enrolments_response_cache_ttl: "300"
  druid_proxy_api_host: "druid-raw-routers"
  druid_proxy_api_port: "8082"
  druid_proxy_api_endpoint: "/druid/v2/"
  collection_summary_agg_data_source: "audit-rollup-syncts"
  collection_summary_agg_cache_ttl: "21600"
  enrollment_list_size: "1000"
  sunbird_cloud_service_provider: ""
  isMultiDCEnabled: "false"
  cloud_storage_base_url: https://
  cloud_storage_cname_url: https://
  cloud_storage_dial_bucketname: 
  cloud_storage_path_prefix_dial: "dial"
  cloud_store_base_path_placeholder: 
  sunbird_dial_service_base_url: http://dial-service:9000
  sunbird_dial_service_search_url: /dialcode/v3/search
---
# Source: learnbb/charts/lms/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lms-opa
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: lms
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: lms-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  
  common.rego: |-
      package common
      
      import input.attributes.request.http as http_request
      import future.keywords.in
      
      ROLES := {
         "BOOK_REVIEWER": ["createLock", "publishContent", "listLock", "retireLock", "refreshLock", "rejectContent", "rejectContentV2"],
      
         "CONTENT_REVIEWER": ["createLock", "publishContent", "listLock", "retireLock", "refreshLock", "rejectContent", "rejectContentV2"],
      
         "FLAG_REVIEWER": ["publishContent", "rejectContent", "rejectContentV2"],
      
         "BOOK_CREATOR": ["copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock", "updateContent", "uploadContent"],
      
         "CONTENT_CREATOR": ["updateBatch", "copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock", "updateContent", "uploadContent", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "COURSE_CREATOR": ["updateBatch", "copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock",  "updateContent", "uploadContent", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "COURSE_MENTOR": ["updateBatch", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "PROGRAM_MANAGER": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest"],
      
         "PROGRAM_DESIGNER": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest"],
      
         "ORG_ADMIN": ["acceptTnc", "assignRole", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "getUserProfileV5", "updateUserV2", "readUserConsent", "createTenantPreferences", "updateTenantPreferences", "createReport", "deleteReport", "updateReport", "publishReport", "retireReport", "getReportSummary", "listReportSummary", "createReportSummary"],
      
         "REPORT_VIEWER": ["acceptTnc", "getReportSummary", "listReportSummary"],
      
         "REPORT_ADMIN": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "acceptTnc", "createReport", "deleteReport", "updateReport", "publishReport", "retireReport", "getReportSummary", "listReportSummary", "createReportSummary"],
      
         "PUBLIC": ["PUBLIC"]
      }
      
      x_authenticated_user_token := http_request.headers["x-authenticated-user-token"]
      x_authenticated_for := http_request.headers["x-authenticated-for"]
      private_ingressgateway_ip := ""
      
      jwt_public_keys := {
      "KEYCLOAK_KID": "KEYCLOAK_PUBLIC_KEY"
      }
      
      user_token := {"header": header, "payload": payload} {
        encoded := x_authenticated_user_token
        [header, payload, _] := io.jwt.decode(encoded)
      }
      
      for_token := {"payload": payload} {
        encoded := x_authenticated_for
        [_, payload, _] := io.jwt.decode(encoded)
      }
      
      iss := "https:///auth/realms/sunbird"
      token_kid := user_token.header.kid
      token_iss := user_token.payload.iss
      token_exp := user_token.payload.exp
      current_time := time.now_ns()
      
      token_sub := split(user_token.payload.sub, ":")
      # Check for both cases - With and without federation_id in sub field as below
      # sub := f:federation_id:user_id OR sub := user_id
      token_userid = token_sub[2] {
          count(token_sub) == 3
      } else = token_sub[0] {
          count(token_sub) == 1
      }
      for_token_userid := for_token.payload.sub
      for_token_parentid := for_token.payload.parentId
      
      # Desktop app is still using keycloak tokens which will not have roles
      # This is a temporary fix where we will append the roles as PUBLIC in OPA
      
      default_role := [{"role": "PUBLIC", "scope": []}]
      
      token_roles = user_token.payload.roles {
          user_token.payload.roles
      } else = default_role {
          not user_token.payload.roles
      }
      
      for_token_exists {
        x_authenticated_for
        count(x_authenticated_for) > 0
      }
      
      userid = token_userid {
          not x_authenticated_for
      } else = token_userid {
          count(x_authenticated_for) == 0 # This is a temporary fix as the mobile app is sending empty headers as x-authenticated-for: ""
      } else = for_token_userid {
          for_token_exists
      }
      
      validate_token {
        io.jwt.verify_rs256(x_authenticated_user_token, jwt_public_keys[token_kid])
        token_exp * 1000000000 > current_time
        token_iss == iss
      }
      
      is_an_internal_request {
        http_request.host == private_ingressgateway_ip
      }
      
      acls_check(acls) = indicies {
        validate_token
        indicies := [idx | some i; ROLES[token_roles[i].role][_] == acls[_]; idx := i]
        count(indicies) > 0
      }
      
      role_check(roles) = indicies {
        indicies := [idx | some i; token_roles[i].role in roles; idx := i]
        count(indicies) > 0
      }
      
      org_check(roles) = token_organisationids {
        indicies :=  role_check(roles)
        count(indicies) > 0
        token_organisationids := [ids | ids := token_roles[indicies[_]].scope[_].organisationId]
        count(token_organisationids) > 0
      }
      
      parent_id_check {
          x_authenticated_for
          count(x_authenticated_for) > 0
          token_userid == for_token_parentid
      }
      
      parent_id_check {
          count(x_authenticated_for) == 0
      }
      
      parent_id_check {
          not x_authenticated_for
      }
      
      public_role_check {
        acls := ["PUBLIC"]
        roles := ["PUBLIC"]
        acls_check(acls)
        role_check(roles)
        userid
        parent_id_check
      }
  
  main.rego: |-
      package main
      
      import input.attributes.request.http as http_request
      import data.policies as policy
      import future.keywords.in
      
      default allow = {
        "allowed": false,
        "headers": {"x-request-allowed": "no"},
        "body": "You do not have permission to perform this operation",
        "http_status": 403
      }
      
      urls[keys] { policy.urls_to_action_mapping[keys]}
      
      regex_urls := [url | url := regex.find_n(urls[_], http_request.path, 1)[0]]
      matching_urls := [url | some i; startswith(http_request.path, regex_urls[i]); url := regex_urls[i]]
      identified_url := max(matching_urls)
      identified_action := policy.urls_to_action_mapping[identified_url]
      
      # Desktop app is not sending x-authenticated-for header due to which managed user flow is breaking
      # This is a temporary fix till the desktop app issue is fixed
      skipped_consumers := ["portal", "desktop"]
      x_consumer_username := http_request.headers["x-consumer-username"]
      check_if_consumer_is_skipped {
         x_consumer_username in skipped_consumers
      }
      
      allow = status {
         not check_if_consumer_is_skipped
         policy[identified_action]
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Passed",
            "http_status": 200
         }
      }
      
      allow = status {
         not identified_action
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Skipped",
            "http_status": 200
         }
      }
      
      # Desktop app is not sending x-authenticated-for header due to which managed user flow is breaking
      # This is a temporary fix till the desktop app issue is fixed
      allow = status {
         check_if_consumer_is_skipped
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Skipped",
            "http_status": 200
         }
      }
  
  policies.rego: |-
      package policies
      
      import data.common as super
      import input.attributes.request.http as http_request
      
      urls_to_action_mapping := {
        "/v1/course/batch/update": "updateBatch",
        "/v1/user/courses/list": "listCourseEnrollments",
        "/v1/course/enroll": "courseEnrollment",
        "/v1/course/unenroll": "courseUnEnrollment",
        "/v1/content/state/read": "readContentState",
        "/v1/content/state/update": "updateContentState",
        "/v1/course/batch/cert/template/add": "courseBatchAddCertificateTemplate",
        "/v1/course/batch/cert/template/remove": "courseBatchRemoveCertificateTemplate",
        "/v1/course/batch/create": "createBatch",
        "/v1/course/batch/read": "getBatch"
      }
      
      updateBatch {
        acls := ["updateBatch"]
        roles := ["CONTENT_CREATOR", "COURSE_CREATOR", "COURSE_MENTOR"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      listCourseEnrollments {
        super.public_role_check
        user_id := split(http_request.path, "/")[5]
        split(user_id, "?")[0] == super.userid
      }
      
      courseEnrollment {
        super.public_role_check
        input.parsed_body.request.userId == super.userid
      }
      
      courseUnEnrollment {
        super.public_role_check
        input.parsed_body.request.userId == super.userid
      }
      
      readContentState {
        super.public_role_check
        input.parsed_body.request.userId == super.userid
      }
      
      readContentState {
        super.public_role_check
        not input.parsed_body.request.userId
      }
      
      # With userid and without assessments event in payload
      updateContentState {
        super.public_role_check
        not input.parsed_body.request.assessments
        input.parsed_body.request.userId == super.userid
      }
      
      # Without userid and without assessments event in payload
      updateContentState {
        super.public_role_check
        not input.parsed_body.request.userId
        not input.parsed_body.request.assessments
      }
      
      # With userid and with assessments event in payload
      updateContentState {
        super.public_role_check
        input.parsed_body.request.userId == super.userid
        assessment_userids := {ids | ids := input.parsed_body.request.assessments[_].userId}
        count(assessment_userids) == 1
        assessment_userids[super.userid] == super.userid
      }
      
      # Without userid and with assessments event in payload
      updateContentState {
        super.public_role_check
        not input.parsed_body.request.userId
        assessment_userids := {ids | ids := input.parsed_body.request.assessments[_].userId}
        count(assessment_userids) == 1
        assessment_userids[super.userid] == super.userid
      }
      
      courseBatchAddCertificateTemplate {
        acls := ["courseBatchAddCertificateTemplate"]
        roles := ["CONTENT_CREATOR", "COURSE_CREATOR", "COURSE_MENTOR"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      courseBatchRemoveCertificateTemplate {
        acls := ["courseBatchRemoveCertificateTemplate"]
        roles := ["CONTENT_CREATOR", "COURSE_CREATOR", "COURSE_MENTOR"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      createBatch {
        acls := ["createBatch"]
        roles := ["CONTENT_CREATOR", "COURSE_CREATOR", "COURSE_MENTOR"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      getBatch {
        super.public_role_check
      }
---
# Source: learnbb/charts/lms/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lms-envoy
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: lms
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: lms-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  
  config.yaml: |-
      static_resources:
        listeners:
        - name: listener_0
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 9999
          per_connection_buffer_limit_bytes: 62914560
          filter_chains:
          - filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                access_log:
                - name: envoy.access_loggers.stdout
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                    log_format:
                      text_format: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS_WITHOUT_PORT% - - [%START_TIME(%d/%b/%Y:%H:%M:%S %z)%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(X-DEVICE-ID)%\" \"%REQ(X-CHANNEL-ID)%\" \"%REQ(X-APP-ID)%\" \"%REQ(X-APP-VER)%\" \"%REQ(X-SESSION-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\"\n"
                route_config:
                  name: local_route
                  virtual_hosts:
                  - name: backend
                    domains:
                    - "*"
                    routes:
                    - match:
                        prefix: "/opa/metrics"
                      route:
                        prefix_rewrite: "/metrics"
                        cluster: opa
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/health"
                      route:
                        cluster: service
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/health"
                      route:
                        cluster: service
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/"
                      route:
                        cluster: service
                        timeout: 60s
                http_filters:
                - name: envoy.filters.http.ext_authz
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                    transport_api_version: V3
                    with_request_body:
                      max_request_bytes: 62914560
                      allow_partial_message: true
                    failure_mode_allow: true
                    grpc_service:
                      google_grpc:
                        target_uri: 127.0.0.1:9191
                        stat_prefix: ext_authz
                      timeout: 5s
                - name: envoy.filters.http.router
        clusters:
        - name: service
          connect_timeout: 5s
          per_connection_buffer_limit_bytes: 62914560
          type: static
          load_assignment:
            cluster_name: service
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 9000
        - name: opa
          connect_timeout: 5s
          type: static
          load_assignment:
            cluster_name: opa
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8181
      admin:
        access_log_path: "/dev/stdout"
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 10000
---
# Source: learnbb/charts/lms/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lms-access-keys
data:
---
# Source: learnbb/charts/neo4j/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: neo4j
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: neo4j-0.1.0
  annotations:
    helm.sh/hook-weight: "-5"
    reloader.stakater.com/auto: "true"
data:
  logstash.conf: |-
    input {
      file {
        start_position =>"beginning"
        type => "graph_event"
        path => ["/txn-handler/learning_graph_event_neo4j.log"]
        sincedb_path => "/usr/share/logstash/.sincedb_learning_graph_event_mw"
      }
    }
    filter {
      grok {
        match => [ "message",
                  "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:msg}"]
      }
      mutate {
          gsub => [ "message","%{timestamp}","" ]
          strip => [ "message" ]
      }
      json {
          source => "message"
      }
    }
    output {
      kafka {
        bootstrap_servers => "kafka:9092"
        codec => plain {
            format => "%{message}"
        }
        message_key => "%{nodeUniqueId}"
        topic_id => "dev.knowlg.learning.graph.events"
        retries => 20
        retry_backoff_ms => 180000
      }
    }
---
# Source: learnbb/charts/notification/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: notification
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: notification
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: notification-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps
---
# Source: learnbb/charts/notification/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: notification-env
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: notification
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: notification-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  
  sunbird_cassandra_host: "cassandra"
  sunbird_cassandra_port: "9042"
  sunbird_cassandra_consistency_level: ""
  sunbird_cassandra_notification_keyspace: sunbird_notifications
  sunbird_cassandra_password: ""
  sunbird_cassandra_username: ""
  sunbird_notification_kafka_servers_config: "kafka:9092"
  sunbird_notification_kafka_topic: ".lms.notification"
  sunbird_notification_msg_default_sender: ""
  sunbird_msg_91_auth: ""
  sunbird_mail_server_from_email: ""
  sunbird_mail_server_host: ""
  sunbird_mail_server_password: ""
  sunbird_mail_server_username: " "
  sunbird_mail_server_port: ""
  SUNBIRD_KAFKA_URL: "kafka:9092"
  sunbird_sso_url: "https:///auth/"
  sunbird_sso_realm: "sunbird"
  sunbird_sso_client_id: "lms"
  sunbird_sso_client_secret: "lms"
  sunbird_sso_username: "admin"
  sunbird_sso_password: "admin"
  sunbird_keycloak_user_federation_provider_id: "cassandrafederationid"
  sunbird_keycloak_required_action_link_expiration_seconds: "2592000"
  accesstoken.publickey.basepath: "/keys/"
  ENV_NAME: ""
  LEARNER_SERVICE_PORT: "http://userorg-service:9000"
  sunbird_us_system_setting_url: "/api/data/v1/system/settings/list"
  sunbird_us_org_read_url: "/v1/org/read"
  notification_category_type_config: "certificateUpdate"
  isMultiDCEnabled: ""
---
# Source: learnbb/charts/notification/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: notification-opa
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: notification
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: notification-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  
  common.rego: |-
      package common
      
      import input.attributes.request.http as http_request
      import future.keywords.in
      
      ROLES := {
         "BOOK_REVIEWER": ["createLock", "publishContent", "listLock", "retireLock", "refreshLock", "rejectContent", "rejectContentV2"],
      
         "CONTENT_REVIEWER": ["createLock", "publishContent", "listLock", "retireLock", "refreshLock", "rejectContent", "rejectContentV2"],
      
         "FLAG_REVIEWER": ["publishContent", "rejectContent", "rejectContentV2"],
      
         "BOOK_CREATOR": ["copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock", "updateContent", "uploadContent"],
      
         "CONTENT_CREATOR": ["updateBatch", "copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock", "updateContent", "uploadContent", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "COURSE_CREATOR": ["updateBatch", "copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock",  "updateContent", "uploadContent", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "COURSE_MENTOR": ["updateBatch", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "PROGRAM_MANAGER": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest"],
      
         "PROGRAM_DESIGNER": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest"],
      
         "ORG_ADMIN": ["acceptTnc", "assignRole", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "getUserProfileV5", "updateUserV2", "readUserConsent", "createTenantPreferences", "updateTenantPreferences", "createReport", "deleteReport", "updateReport", "publishReport", "retireReport", "getReportSummary", "listReportSummary", "createReportSummary"],
      
         "REPORT_VIEWER": ["acceptTnc", "getReportSummary", "listReportSummary"],
      
         "REPORT_ADMIN": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "acceptTnc", "createReport", "deleteReport", "updateReport", "publishReport", "retireReport", "getReportSummary", "listReportSummary", "createReportSummary"],
      
         "PUBLIC": ["PUBLIC"]
      }
      
      x_authenticated_user_token := http_request.headers["x-authenticated-user-token"]
      x_authenticated_for := http_request.headers["x-authenticated-for"]
      private_ingressgateway_ip := ""
      
      jwt_public_keys := {
      "KEYCLOAK_KID": "KEYCLOAK_PUBLIC_KEY"
      }
      
      user_token := {"header": header, "payload": payload} {
        encoded := x_authenticated_user_token
        [header, payload, _] := io.jwt.decode(encoded)
      }
      
      for_token := {"payload": payload} {
        encoded := x_authenticated_for
        [_, payload, _] := io.jwt.decode(encoded)
      }
      
      iss := "https:///auth/realms/sunbird"
      token_kid := user_token.header.kid
      token_iss := user_token.payload.iss
      token_exp := user_token.payload.exp
      current_time := time.now_ns()
      
      token_sub := split(user_token.payload.sub, ":")
      # Check for both cases - With and without federation_id in sub field as below
      # sub := f:federation_id:user_id OR sub := user_id
      token_userid = token_sub[2] {
          count(token_sub) == 3
      } else = token_sub[0] {
          count(token_sub) == 1
      }
      for_token_userid := for_token.payload.sub
      for_token_parentid := for_token.payload.parentId
      
      # Desktop app is still using keycloak tokens which will not have roles
      # This is a temporary fix where we will append the roles as PUBLIC in OPA
      
      default_role := [{"role": "PUBLIC", "scope": []}]
      
      token_roles = user_token.payload.roles {
          user_token.payload.roles
      } else = default_role {
          not user_token.payload.roles
      }
      
      for_token_exists {
        x_authenticated_for
        count(x_authenticated_for) > 0
      }
      
      userid = token_userid {
          not x_authenticated_for
      } else = token_userid {
          count(x_authenticated_for) == 0 # This is a temporary fix as the mobile app is sending empty headers as x-authenticated-for: ""
      } else = for_token_userid {
          for_token_exists
      }
      
      validate_token {
        io.jwt.verify_rs256(x_authenticated_user_token, jwt_public_keys[token_kid])
        token_exp * 1000000000 > current_time
        token_iss == iss
      }
      
      is_an_internal_request {
        http_request.host == private_ingressgateway_ip
      }
      
      acls_check(acls) = indicies {
        validate_token
        indicies := [idx | some i; ROLES[token_roles[i].role][_] == acls[_]; idx := i]
        count(indicies) > 0
      }
      
      role_check(roles) = indicies {
        indicies := [idx | some i; token_roles[i].role in roles; idx := i]
        count(indicies) > 0
      }
      
      org_check(roles) = token_organisationids {
        indicies :=  role_check(roles)
        count(indicies) > 0
        token_organisationids := [ids | ids := token_roles[indicies[_]].scope[_].organisationId]
        count(token_organisationids) > 0
      }
      
      parent_id_check {
          x_authenticated_for
          count(x_authenticated_for) > 0
          token_userid == for_token_parentid
      }
      
      parent_id_check {
          count(x_authenticated_for) == 0
      }
      
      parent_id_check {
          not x_authenticated_for
      }
      
      public_role_check {
        acls := ["PUBLIC"]
        roles := ["PUBLIC"]
        acls_check(acls)
        role_check(roles)
        userid
        parent_id_check
      }
  
  main.rego: |-
      package main
      
      import input.attributes.request.http as http_request
      import data.policies as policy
      import future.keywords.in
      
      default allow = {
        "allowed": false,
        "headers": {"x-request-allowed": "no"},
        "body": "You do not have permission to perform this operation",
        "http_status": 403
      }
      
      urls[keys] { policy.urls_to_action_mapping[keys]}
      
      regex_urls := [url | url := regex.find_n(urls[_], http_request.path, 1)[0]]
      matching_urls := [url | some i; startswith(http_request.path, regex_urls[i]); url := regex_urls[i]]
      identified_url := max(matching_urls)
      identified_action := policy.urls_to_action_mapping[identified_url]
      
      # Desktop app is not sending x-authenticated-for header due to which managed user flow is breaking
      # This is a temporary fix till the desktop app issue is fixed
      skipped_consumers := ["portal", "desktop"]
      x_consumer_username := http_request.headers["x-consumer-username"]
      check_if_consumer_is_skipped {
         x_consumer_username in skipped_consumers
      }
      
      allow = status {
         not check_if_consumer_is_skipped
         policy[identified_action]
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Passed",
            "http_status": 200
         }
      }
      
      allow = status {
         not identified_action
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Skipped",
            "http_status": 200
         }
      }
      
      # Desktop app is not sending x-authenticated-for header due to which managed user flow is breaking
      # This is a temporary fix till the desktop app issue is fixed
      allow = status {
         check_if_consumer_is_skipped
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Skipped",
            "http_status": 200
         }
      }
  
  policies.rego: |-
      package policies
      
      import data.common as super
      import input.attributes.request.http as http_request
      
      urls_to_action_mapping := {
        "/v1/notification/feed/read": "readNotificationFeed",
        "/v1/notification/feed/delete": "deleteNotificationFeed",
        "/v1/notification/feed/update": "updateNotificationFeed"
      }
      
      readNotificationFeed {
        super.public_role_check
        user_id := split(http_request.path, "/")[5]
        split(user_id, "?")[0] == super.userid
      }
      
      deleteNotificationFeed {
        super.public_role_check
        input.parsed_body.request.userId == super.userid
      }
      
      updateNotificationFeed {
        super.public_role_check
        input.parsed_body.request.userId == super.userid
      }
---
# Source: learnbb/charts/notification/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: notification-envoy
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: notification
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: notification-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  
  config.yaml: |-
      static_resources:
        listeners:
        - name: listener_0
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 9999
          per_connection_buffer_limit_bytes: 62914560
          filter_chains:
          - filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                access_log:
                - name: envoy.access_loggers.stdout
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                    log_format:
                      text_format: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS_WITHOUT_PORT% - - [%START_TIME(%d/%b/%Y:%H:%M:%S %z)%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(X-DEVICE-ID)%\" \"%REQ(X-CHANNEL-ID)%\" \"%REQ(X-APP-ID)%\" \"%REQ(X-APP-VER)%\" \"%REQ(X-SESSION-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\"\n"
                route_config:
                  name: local_route
                  virtual_hosts:
                  - name: backend
                    domains:
                    - "*"
                    routes:
                    - match:
                        prefix: "/opa/metrics"
                      route:
                        prefix_rewrite: "/metrics"
                        cluster: opa
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/health"
                      route:
                        cluster: service
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/health"
                      route:
                        cluster: service
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/"
                      route:
                        cluster: service
                        timeout: 60s
                http_filters:
                - name: envoy.filters.http.ext_authz
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                    transport_api_version: V3
                    with_request_body:
                      max_request_bytes: 62914560
                      allow_partial_message: true
                    failure_mode_allow: true
                    grpc_service:
                      google_grpc:
                        target_uri: 127.0.0.1:9191
                        stat_prefix: ext_authz
                      timeout: 5s
                - name: envoy.filters.http.router
        clusters:
        - name: service
          connect_timeout: 5s
          per_connection_buffer_limit_bytes: 62914560
          type: static
          load_assignment:
            cluster_name: service
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 9000
        - name: opa
          connect_timeout: 5s
          type: static
          load_assignment:
            cluster_name: opa
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8181
      admin:
        access_log_path: "/dev/stdout"
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 10000
---
# Source: learnbb/charts/notification/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: notification-access-keys
data:
---
# Source: learnbb/charts/print/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: learnbb-print
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: print
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: print-0.1.0
data: # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  dummy.conf: |-
      name=sunbird
      config={
          name=dummy
        }
       # Take only root level files (configs/*) for configmaps
---
# Source: learnbb/charts/print/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: learnbb-print-env
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: print
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: print-0.1.0
data:
  service_threads: "2"
  sunbird_azure_account_name: ""
  sunbird_azure_account_key: ""
  sunbird_azure_container_name: ""
  
  sunbird_pvt_azure_account_name: ""
  sunbird_pvt_azure_account_key: ""
  sunbird_pvt_azure_container_name: ""
---
# Source: learnbb/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-configuration
  namespace: "sunbird"
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.1
    helm.sh/chart: redis-18.1.1
  annotations:
    helm.sh/hook-weight: "-5"
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: learnbb/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-health
  namespace: "sunbird"
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.1
    helm.sh/chart: redis-18.1.1
  annotations:
    helm.sh/hook-weight: "-5"
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: learnbb/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-scripts
  namespace: "sunbird"
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.1
    helm.sh/chart: redis-18.1.1
  annotations:
    helm.sh/hook-weight: "-5"
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")
    HEADLESS_SERVICE="redis-headless.sunbird.svc.cluster.local"

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: learnbb/charts/registry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: registry
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: registry-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data: # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  Issuer.json: |-
      {
      	"$schema": "http://json-schema.org/draft-07/schema",
      	"type": "object",
      	"properties": {
      		"Issuer": {
      			"$ref": "#/definitions/Issuer"
      		}
      	},
      	"required": [
      		"Issuer"
      	],
      	"title": "Issuer",
      	"definitions": {
      		"Issuer": {
      			"$id": "#/properties/Issuer",
      			"type": "object",
      			"title": "The Issuer Schema",
      			"required": [
      				"name"
      			],
      			"properties": {
      				"name": {
      					"type": "string"
      				},
      				"url": {
      					"type": "string"
      				},
      				"kid": {
      					"type": "string"
      				}
      
      			}
      		}
      	}
      
      } # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  ProjectCertificate.json: |-
      {
      	"$schema": "http://json-schema.org/draft-07/schema",
      	"type": "object",
      	"properties": {
      		"ProjectCertificate": {
      			"$ref": "#/definitions/ProjectCertificate"
      		}
      	},
      	"required": [
      		"ProjectCertificate"
      	],
      	"title": "ProjectCertificate",
      	"definitions": {
              "ProjectCertificate": {
                  "$id": "#/properties/ProjectCertificate",
                  "type": "object",
                  "title": "The ProjectCertificate Schema",
                  "required": [
                      "recipient"
                  ],
                  "properties": {
                      "status": {
                          "type": "string",
                          "enum": ["ACTIVE", "REVOKED", "DELETED"]
                      },
                      "recipient":{
                          "$id": "#/properties/recipient",
                          "$ref": "Recipient.json#/definitions/Recipient"
                      },
                      "templateUrl": {
                          "type": "string"
                      },
                      "issuer":{
                          "$id": "#/properties/issuer",
                          "$ref": "Issuer.json#/definitions/Issuer"
                      },
                      "projectName":{
                          "type": "string"
                      },
                      "projectId":{
                          "type": "string"
                      },
                      "solutionId":{
                          "type": "string"
                      },
                      "solutionName":{
                          "type": "string"
                      },
                      "programId":{
                          "type": "string"
                      },
                      "programName":{
                          "type": "string"
                      },
                      "completedDate": {
                          "type": "string"
                      }
      
                  }
              }
          },
      	"_osConfig": {
      		"uniqueIndexFields": [
      		],
      		"ownershipAttributes": [],
      		"roles": [
      			"anonymous"
      		],
      		"inviteRoles": [
      			"anonymous"
      		],
      		"systemFields": ["osCreatedAt", "osUpdatedAt", "osCreatedBy", "osUpdatedBy"],
      		"enableLogin": false,
      		"credentialTemplate": "https:////schemas/project_credential_template.json"
      	}
      } # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  PublicKey.json: |-
      {
          "$schema": "http://json-schema.org/draft-07/schema",
          "type": "object",
          "properties": {
            "PublicKey": {
              "$ref": "#/definitions/PublicKey"
            }
          },
          "required": [
            "PublicKey"
          ],
          "title": "PublicKey",
          "definitions": {
            "PublicKey": {
              "$id": "#/properties/PublicKey",
              "type": "object",
              "title": "The PublicKey Schema",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "string"
                },
                "alg": {
                  "type": "string"
                }
              }
            }
          },
          "_osConfig": {
            "uniqueIndexFields": [
              "value"
            ],
            "ownershipAttributes": [],
            "roles": [
            ],
            "inviteRoles": [
              "anonymous"
            ],
            "systemFields": ["osCreatedAt", "osUpdatedAt", "osCreatedBy", "osUpdatedBy"],
            "enableLogin": false
          }
        } # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  Recipient.json: |-
      {
      	"$schema": "http://json-schema.org/draft-07/schema",
      	"type": "object",
      	"properties": {
      		"Recipient": {
      			"$ref": "#/definitions/Recipient"
      		}
      	},
      	"required": [
      		"Recipient"
      	],
      	"title": "Recipient",
      	"definitions": {
      		"Recipient": {
      			"$id": "#/properties/Recipient",
      			"type": "object",
      			"title": "The Recipient Schema",
      			"required": [
      				"id"
      			],
      			"properties": {
      				"id": {
      					"type": "string"
      				},
      				"type": {
      					"type": "string"
      				},
      				"name": {
      					"type": "string"
      				}
      
      			}
      		}
      	}
      
      } # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  Signatory.json: |-
      {
      	"$schema": "http://json-schema.org/draft-07/schema",
      	"type": "object",
      	"properties": {
      		"Signatory": {
      			"$ref": "#/definitions/Signatory"
      		}
      	},
      	"required": [
      		"Signatory"
      	],
      	"title": "Signatory",
      	"definitions": {
      		"Signatory": {
      			"$id": "#/properties/Signatory",
      			"type": "object",
      			"title": "The Signatory Schema",
      			"required": [
      
      			],
      			"properties": {
      				"identity": {
      					"type": "string"
      				},
      				"designation": {
      					"type": "string"
      				},
      				"image": {
      					"type": "string"
      				},
      				"name":{
      					"type":"string"
      				}
      			}
      		}
      	}
      
      } # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  Training.json: |-
      {
      	"$schema": "http://json-schema.org/draft-07/schema",
      	"type": "object",
      	"properties": {
      		"Training": {
      			"$ref": "#/definitions/Training"
      		}
      	},
      	"required": [
      		"Training"
      	],
      	"title": "Training",
      	"definitions": {
      		"Training": {
      			"$id": "#/properties/Training",
      			"type": "object",
      			"title": "The Training Schema",
      			"required": [
      				"id",
      				"type"
      			],
      			"properties": {
      				"id": {
      					"type": "string"
      				},
      				"batchId": {
      					"type": "string"
      				},
      				"type": {
      					"type": "string"
      				},
      				"name":{
      					"type":"string"
      				}
      			}
      		}
      	}
      
      } # Take only root level files (configs/*) for configmaps # Skip env.yaml as configmap, as it's env file
    
  TrainingCertificate.json: |-
      {
      	"$schema": "http://json-schema.org/draft-07/schema",
      	"type": "object",
      	"properties": {
      		"TrainingCertificate": {
      			"$ref": "#/definitions/TrainingCertificate"
      		}
      	},
      	"required": [
      		"TrainingCertificate"
      	],
      	"title": "TrainingCertificate",
      	"definitions": {
      		"TrainingCertificate": {
      			"$id": "#/properties/TrainingCertificate",
      			"type": "object",
      			"title": "The TrainingCertificate Schema",
      			"required": [
      				"recipient",
      				"training"
      			],
      			"properties": {
      
      				"status": {
      					"type": "string",
      					"enum": ["ACTIVE", "REVOKED", "DELETED"]
      				},
      				"jsonUrl": {
      					"type": "string"
      				},
      				"recipient":{
      					"$id": "#/properties/recipient",
      					"$ref": "Recipient.json#/definitions/Recipient"
      				},
      				"templateUrl": {
      					"type": "string"
      				},
      				"training":{
      					"$id": "#/properties/training",
      					"$ref": "Training.json#/definitions/Training"
      				},
      				"issuer":{
      					"$id": "#/properties/issuer",
      					"$ref": "Issuer.json#/definitions/Issuer"
      				},
      				"signatory":{
      					"$id": "#/properties/signatory",
      					"type":"array",
      					"items":{
      						"$ref": "Signatory.json#/definitions/Signatory"
      					}
      
      				},
      				"certificateLabel":{
      					"type": "string"
      				},
      				"issuedOn": {
      					"type": "string"
      				}
      			}
      		}
      	},
      	"_osConfig": {
      		"uniqueIndexFields": [
      		],
      		"ownershipAttributes": [],
      		"roles": [
      		],
      		"inviteRoles": [
      			"anonymous"
      		],
      		"systemFields": ["osCreatedAt", "osUpdatedAt", "osCreatedBy", "osUpdatedBy"],
      		"enableLogin": false,
      		"credentialTemplate": "https://///schemas/credential_template.json"
      	}
      }
       # Take only root level files (configs/*) for configmaps
---
# Source: learnbb/charts/registry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-env
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: registry
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: registry-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  # You can add key value pair here, to create env values.
  connectionInfo_uri: "jdbc:postgresql://postgresql:5432/registry"
  connectionInfo_username: "postgres"
  elastic_search_enabled: "true"
  elastic_search_connection_url: "elasticsearch:9200"
  search_provider: "dev.sunbirdrc.registry.service.ElasticSearchService"
  search_providerName: "dev.sunbirdrc.registry.service.ElasticSearchService"
  enable_external_templates: "true"
  sign_url: "http://certificatesign-service:8079/sign"
  signature_enabled: "true"
  pdf_url: "http://certificateapi-service:8078/api/v1/certificatePDF"
  template_base_url: "http://registry-service:8081/api/v1/templates/"
  workflow.enable: "false"
  connectionInfo_maxPoolSize: "200"
  auditTaskExecutor_queueCapacity: "100"
  taskExecutor_index_queueCapacity: "100"
  authentication_enabled: "false"
  async_enabled: "true"
  webhook_enabled: "true"
  ZOOKEEPER_CLIENT_PORT: "2181"
  ZOOKEEPER_TICK_TIME: "2000"
  KAFKA_BROKER_ID: "1"
  KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  KAFKA_ADVERTISED_LISTENERS: "kafka:9092"
  kafka_bootstrap_address: "kafka:9092"
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:  "INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT"
  KAFKA_INTER_BROKER_LISTENER_NAME:  "INTERNAL"
  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:  ""
  logging.level.root : "INFO"
---
# Source: learnbb/charts/userorg/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: userorg
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: userorg
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: userorg-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
    
  userorg-service_logback.xml: |-
      <configuration>
      
        <conversionRule conversionWord="coloredLevel" converterClass="play.api.libs.logback.ColoredLevel" />
      
        <!-- transaction-event-trigger START -->
        <timestamp key="timestamp" datePattern="yyyy-MM-dd"/>
        <!-- common transactions logs -->
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
          <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <layout class="net.logstash.logback.layout.LogstashLayout">
              <fieldNames>
                <timestamp>timestamp</timestamp>
                <message>msg</message>
                <logger>lname</logger>
                <thread>tname</thread>
                <levelValue>[ignore]</levelValue>
                <version>[ignore]</version>
                <stack_trace>exception</stack_trace>
              </fieldNames>
              <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                <maxDepthPerThrowable>30</maxDepthPerThrowable>
                <maxLength>2048</maxLength>
                <exclude>sun\.reflect\..*\.invoke.*</exclude>
                <rootCauseFirst>true</rootCauseFirst>
                <inlineHash>true</inlineHash>
              </throwableConverter>
            </layout>
          </encoder>
        </appender>
      
        <appender name="ASYNCSTDOUT" class="ch.qos.logback.classic.AsyncAppender">
          <appender-ref ref="STDOUT" />
        </appender>
      
        <appender name="queryLoggerAppender" class="ch.qos.logback.core.ConsoleAppender">
          <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <layout class="ch.qos.logback.contrib.json.classic.JsonLayout">
              <timestampFormat>yyyy-MM-dd'T'HH:mm:ss.SSSX</timestampFormat>
              <timestampFormatTimezoneId>Etc/UTC</timestampFormatTimezoneId>
              <fieldNames>
                <timestamp>timestamp</timestamp>
                <message>msg</message>
                <logger>lname</logger>
                <thread>tname</thread>
                <levelValue>[ignore]</levelValue>
                <version>[ignore]</version>
              </fieldNames>
            </layout>
          </encoder>
        </appender>
      
        <appender name="defaultLoggerAppender" class="ch.qos.logback.core.ConsoleAppender">
          <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <layout class="net.logstash.logback.layout.LogstashLayout">
              <fieldNames>
                <timestamp>timestamp</timestamp>
                <message>msg</message>
                <logger>lname</logger>
                <thread>tname</thread>
                <levelValue>[ignore]</levelValue>
                <version>[ignore]</version>
                <stack_trace>exception</stack_trace>
              </fieldNames>
              <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                <maxDepthPerThrowable>30</maxDepthPerThrowable>
                <maxLength>2048</maxLength>
                <exclude>sun\.reflect\..*\.invoke.*</exclude>
                <rootCauseFirst>true</rootCauseFirst>
                <inlineHash>true</inlineHash>
              </throwableConverter>
            </layout>
          </encoder>
        </appender>
      
        <appender name="kafka-appender" class="com.github.danielwegener.logback.kafka.KafkaAppender">
          <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%msg</pattern>
          </encoder>
      
          <topic>${ENV_NAME}.telemetry.raw</topic>
          <!-- ensure that every message sent by the executing host is partitioned to the same partition strategy -->
          <keyingStrategy class="com.github.danielwegener.logback.kafka.keying.NoKeyKeyingStrategy" />
          <!-- block the logging application thread if the kafka appender cannot keep up with sending the log messages -->
          <deliveryStrategy class="com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy" />
      
          <!-- each <producerConfig> translates to regular kafka-client config (format: key=value) -->
          <!-- producer configs are documented here: https://kafka.apache.org/documentation.html#newproducerconfigs -->
          <!-- bootstrap.servers is the only mandatory producerConfig -->
          <producerConfig>bootstrap.servers=${SUNBIRD_KAFKA_URL}</producerConfig>
          <!-- don't wait for a broker to ack the reception of a batch.  -->
          <producerConfig>acks=0</producerConfig>
          <!-- wait up to 1000ms and collect log messages before sending them as a batch -->
          <producerConfig>linger.ms=15000</producerConfig>
          <!-- even if the producer buffer runs full, do not block the application but start to drop messages -->
          <producerConfig>max.block.ms=0</producerConfig>
          <!-- define a client-id that you use to identify yourself against the kafka broker -->
          <producerConfig>client.id=${HOSTNAME}-${CONTEXT_NAME}-logback-relaxed</producerConfig>
      
          <!-- there is no fallback <appender-ref>. If this appender cannot deliver, it will drop its messages. -->
      
        </appender>
      
        <logger name="defaultLoggerAppender" level="INFO" />
        <!-- Telemetry Loggers-->
        <logger name="TelemetryEventLogger" level="INFO">
          <appender-ref ref="kafka-appender" />
        </logger>
      
        <logger name="queryLogger" level="DEBUG">
          <appender-ref ref="defaultLoggerAppender" />
        </logger>
      
        <root level="INFO">
          <appender-ref ref="ASYNCSTDOUT" />
        </root>
      
      </configuration>
---
# Source: learnbb/charts/userorg/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: userorg-env
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: userorg
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: userorg-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  sunbird_sso_url: "https:///auth/"
  sunbird_sso_realm: "sunbird"
  sunbird_sso_username: "admin"
  sunbird_sso_password: "admin"
  sunbird_sso_client_id: "lms"
  sunbird_sso_client_secret: "lms"
  sunbird_es_host: "elasticsearch"
  sunbird_es_port: "9200"
  sunbird_cassandra_username: ""
  sunbird_cassandra_password: ""
  actor_hostname: "actor-service"
  bind_hostname: "0.0.0.0"
  ekstep_authorization: ""
  sunbird_pg_host: "postgresql"
  sunbird_pg_port: "5432"
  sunbird_pg_db: "quartz"
  sunbird_pg_user: "postgres"
  sunbird_pg_password: "postgres"
  sunbird_installation: ""
  sunbird_analytics_api_base_url: "http://analytics-service:9000"
  sunbird_search_service_api_base_url: "http://search-service:9000"
  ekstep_api_base_url: "http://learning:8080/learning-service"
  sunbird_mail_server_host: ""
  sunbird_mail_server_port: ""
  sunbird_mail_server_username: ""
  sunbird_mail_server_password: ""
  sunbird_mail_server_from_email: ""
  sunbird_encryption_key: ""
  sunbird_encryption_mode: "local"
  sunbird_account_name: ""
  sunbird_account_key: ""
  sunbird_quartz_mode: "cluster"
  sunbird_env_logo_url: ""
  sunbird_web_url: "https:///"
  sunbird_msg_91_auth: ""
  sunbird_msg_sender: ""
  sunbird_installation_email: ""
  sunbird_cassandra_host: "cassandra"
  sunbird_cassandra_port: "9042"
  sunbird_cassandra_consistency_level: ""
  sunbird_mw_system_host: "userorg-service"
  sunbird_mw_system_port: "8088"
  background_actor_provider: "local"
  api_actor_provider: "local"
  sunbird_badger_baseurl: "http://badger:8004"
  sunbird_remote_req_router_path: "akka.tcp://SunbirdMWSystem@actor-service:8088/user/RequestRouter"
  sunbird_remote_bg_req_router_path: "kka.tcp://SunbirdMWSystem@actor-service:8088/user/BackgroundRequestRouter"
  sunbird_api_base_url: "http://knowledge-mw-service:5000"
  sunbird_authorization: ""
  telemetry_pdata_id: ".sunbird.learning.service"
  telemetry_pdata_pid: "userorg-service"
  sunbird_telemetry_base_url: "http://telemetry-service:9001"
  telemetry_queue_threshold_value: "100"
  sunbird_default_channel: "sunbird"
  sunbird_api_mgr_base_url: "http://knowledge-mw-service:5000"
  sunbird_cs_base_url: "http://knowledge-mw-service:5000"
  sunbird_cs_search_path: "/v1/content/search"
  sunbird_user_bulk_upload_size: "1001"
  sunbird_installation_display_name: "sunbird "
  sunbird_app_name: "sunbird"
  sunbird_registry_service_baseurl: "http://registry-service:8081"
  sunbird_open_saber_bridge_enable: "false"
  sunbird_environment: ""
  sunbird_instance: ""
  sunbird_email_max_recipients_limit: "100"
  sunbird_url_shortner_access_token: ""
  sunbird_url_shortner_enable: "false"
  sunbird_user_profile_field_default_visibility: "private"
  sunbird_keycloak_required_action_link_expiration_seconds: "2592000"
  sunbird_course_batch_notification_enabled: "true"
  sunbird_course_batch_notification_signature: "sunbird"
  sunbird_otp_expiration: "1800"
  sunbird_otp_length: "6"
  sunbird_content_cloud_storage_container: ""
  sunbird_time_zone: "Asia/Kolkata"
  sunbird_health_check_enable: "true"
  sunbird_keycloak_user_federation_provider_id: "cassandrafederationid"
  sunbird_gzip_enable: "true"
  sunbird_gzip_size_threshold: "262144"
  sunbird_analytics_blob_account_name: ""
  sunbird_analytics_blob_account_key: ""
  sunbird_cache_enable: "false"
  sunbird_redis_host: "redis-master"
  sunbird_redis_port: "6379"
  kafka_urls: "kafka:9092"
  sunbird_user_cert_kafka_topic: ".lms.user.account.merge"
  sunbird_reset_pass_msg: "You have requested to reset password. Click on the link to set a password: {0}"
  sunbird_subdomain_keycloak_base_url: "/"
  sunbird_cert_service_base_url: "http://cert-service:9000"
  quartz_shadow_user_migration_timer: "'0 0 1 1/1 * ? *'"
  sunbird_otp_allowed_attempt: "5"
  SUNBIRD_KAFKA_URL: "kafka:9092"
  ENV_NAME: ""
  notification_service_base_url: "http://notification-service:9000"
  feed_limit: "30"
  accesstoken.publickey.basepath: "/keys/"
  google_captcha_private_key: ""
  google_captcha_mobile_private_key: ""
  PORTAL_SERVICE_PORT: "http://player:3000"
  form_api_endpoint: "/plugin/v1/form/read"
  userorg_in_memory_cache_ttl: ""
  user_index_alias: "user_alias"
  org_index_alias: "org_alias"
  sunbird_installation_display_name_for_sms: "Sunbird"
  sunbird_sso_lb_ip: "http://keycloak:8080/"
  sunbird_cloud_service_provider: ""
  isMultiDCEnabled: "false"
  sunbird_cassandra_keyspace: "sunbird"
  JAVA_OPTIONS: -Xmx600m
  _JAVA_OPTIONS: -Dlog4j2.formatMsgNoLookups=true
  sunbird_content_service_api_base_url: http://content-service:9000
  enable_captcha: "false"
---
# Source: learnbb/charts/userorg/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: userorg-opa
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: userorg
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: userorg-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  
  common.rego: |-
      package common
      
      import input.attributes.request.http as http_request
      import future.keywords.in
      
      ROLES := {
         "BOOK_REVIEWER": ["createLock", "publishContent", "listLock", "retireLock", "refreshLock", "rejectContent", "rejectContentV2"],
      
         "CONTENT_REVIEWER": ["createLock", "publishContent", "listLock", "retireLock", "refreshLock", "rejectContent", "rejectContentV2"],
      
         "FLAG_REVIEWER": ["publishContent", "rejectContent", "rejectContentV2"],
      
         "BOOK_CREATOR": ["copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock", "updateContent", "uploadContent"],
      
         "CONTENT_CREATOR": ["updateBatch", "copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock", "updateContent", "uploadContent", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "COURSE_CREATOR": ["updateBatch", "copyContent", "createContent", "createLock", "updateCollaborators", "collectionImport", "collectionExport", "submitContentForReviewV1", "submitContentForReviewV3", "createAsset", "uploadAsset", "updateAsset", "uploadUrlAsset", "copyAsset", "listLock", "retireLock", "refreshLock",  "updateContent", "uploadContent", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "COURSE_MENTOR": ["updateBatch", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "courseBatchAddCertificateTemplate", "courseBatchRemoveCertificateTemplate", "createBatch"],
      
         "PROGRAM_MANAGER": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest"],
      
         "PROGRAM_DESIGNER": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest"],
      
         "ORG_ADMIN": ["acceptTnc", "assignRole", "submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "getUserProfileV5", "updateUserV2", "readUserConsent", "createTenantPreferences", "updateTenantPreferences", "createReport", "deleteReport", "updateReport", "publishReport", "retireReport", "getReportSummary", "listReportSummary", "createReportSummary"],
      
         "REPORT_VIEWER": ["acceptTnc", "getReportSummary", "listReportSummary"],
      
         "REPORT_ADMIN": ["submitDataExhaustRequest", "getDataExhaustRequest", "listDataExhaustRequest", "acceptTnc", "createReport", "deleteReport", "updateReport", "publishReport", "retireReport", "getReportSummary", "listReportSummary", "createReportSummary"],
      
         "PUBLIC": ["PUBLIC"]
      }
      
      x_authenticated_user_token := http_request.headers["x-authenticated-user-token"]
      x_authenticated_for := http_request.headers["x-authenticated-for"]
      private_ingressgateway_ip := ""
      
      jwt_public_keys := {
      "KEYCLOAK_KID": "KEYCLOAK_PUBLIC_KEY"
      }
      
      user_token := {"header": header, "payload": payload} {
        encoded := x_authenticated_user_token
        [header, payload, _] := io.jwt.decode(encoded)
      }
      
      for_token := {"payload": payload} {
        encoded := x_authenticated_for
        [_, payload, _] := io.jwt.decode(encoded)
      }
      
      iss := "https:///auth/realms/sunbird"
      token_kid := user_token.header.kid
      token_iss := user_token.payload.iss
      token_exp := user_token.payload.exp
      current_time := time.now_ns()
      
      token_sub := split(user_token.payload.sub, ":")
      # Check for both cases - With and without federation_id in sub field as below
      # sub := f:federation_id:user_id OR sub := user_id
      token_userid = token_sub[2] {
          count(token_sub) == 3
      } else = token_sub[0] {
          count(token_sub) == 1
      }
      for_token_userid := for_token.payload.sub
      for_token_parentid := for_token.payload.parentId
      
      # Desktop app is still using keycloak tokens which will not have roles
      # This is a temporary fix where we will append the roles as PUBLIC in OPA
      
      default_role := [{"role": "PUBLIC", "scope": []}]
      
      token_roles = user_token.payload.roles {
          user_token.payload.roles
      } else = default_role {
          not user_token.payload.roles
      }
      
      for_token_exists {
        x_authenticated_for
        count(x_authenticated_for) > 0
      }
      
      userid = token_userid {
          not x_authenticated_for
      } else = token_userid {
          count(x_authenticated_for) == 0 # This is a temporary fix as the mobile app is sending empty headers as x-authenticated-for: ""
      } else = for_token_userid {
          for_token_exists
      }
      
      validate_token {
        io.jwt.verify_rs256(x_authenticated_user_token, jwt_public_keys[token_kid])
        token_exp * 1000000000 > current_time
        token_iss == iss
      }
      
      is_an_internal_request {
        http_request.host == private_ingressgateway_ip
      }
      
      acls_check(acls) = indicies {
        validate_token
        indicies := [idx | some i; ROLES[token_roles[i].role][_] == acls[_]; idx := i]
        count(indicies) > 0
      }
      
      role_check(roles) = indicies {
        indicies := [idx | some i; token_roles[i].role in roles; idx := i]
        count(indicies) > 0
      }
      
      org_check(roles) = token_organisationids {
        indicies :=  role_check(roles)
        count(indicies) > 0
        token_organisationids := [ids | ids := token_roles[indicies[_]].scope[_].organisationId]
        count(token_organisationids) > 0
      }
      
      parent_id_check {
          x_authenticated_for
          count(x_authenticated_for) > 0
          token_userid == for_token_parentid
      }
      
      parent_id_check {
          count(x_authenticated_for) == 0
      }
      
      parent_id_check {
          not x_authenticated_for
      }
      
      public_role_check {
        acls := ["PUBLIC"]
        roles := ["PUBLIC"]
        acls_check(acls)
        role_check(roles)
        userid
        parent_id_check
      }
  
  main.rego: |-
      package main
      
      import input.attributes.request.http as http_request
      import data.policies as policy
      import future.keywords.in
      
      default allow = {
        "allowed": false,
        "headers": {"x-request-allowed": "no"},
        "body": "You do not have permission to perform this operation",
        "http_status": 403
      }
      
      urls[keys] { policy.urls_to_action_mapping[keys]}
      
      regex_urls := [url | url := regex.find_n(urls[_], http_request.path, 1)[0]]
      matching_urls := [url | some i; startswith(http_request.path, regex_urls[i]); url := regex_urls[i]]
      identified_url := max(matching_urls)
      identified_action := policy.urls_to_action_mapping[identified_url]
      
      # Desktop app is not sending x-authenticated-for header due to which managed user flow is breaking
      # This is a temporary fix till the desktop app issue is fixed
      skipped_consumers := ["portal", "desktop"]
      x_consumer_username := http_request.headers["x-consumer-username"]
      check_if_consumer_is_skipped {
         x_consumer_username in skipped_consumers
      }
      
      allow = status {
         not check_if_consumer_is_skipped
         policy[identified_action]
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Passed",
            "http_status": 200
         }
      }
      
      allow = status {
         not identified_action
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Skipped",
            "http_status": 200
         }
      }
      
      # Desktop app is not sending x-authenticated-for header due to which managed user flow is breaking
      # This is a temporary fix till the desktop app issue is fixed
      allow = status {
         check_if_consumer_is_skipped
         status := {
            "allowed": true,
            "headers": {"x-request-allowed": "yes"},
            "body": "OPA Checks Skipped",
            "http_status": 200
         }
      }
  
  policies.rego: |-
      package policies
      
      import data.common as super
      import future.keywords.in
      import input.attributes.request.http as http_request
      
      urls_to_action_mapping := {
        "/v1/user/tnc/accept": "acceptTermsAndCondition",
        "/v1/user/update": "updateUser",
        "/v1/user/assign/role": "assignRole",
        "/v2/user/assign/role": "assignRoleV2",
        "/v1/user/read": "getUserProfile",
        "/v2/user/read": "getUserProfileV2",
        "/v3/user/read": "getUserProfileV3",
        "/v4/user/read": "getUserProfileV4",
        "/v5/user/read": "getUserProfileV5",
        "/v1/user/feed": "userFeed",
        "/v1/user/feed/create": "userFeedCreate",
        "/v1/user/feed/delete": "userFeedDelete",
        "/v1/user/feed/update": "userFeedUpdate",
        "/v2/user/update": "updateUserV2",
        "/v3/user/update": "updateUserV3",
        "/v1/user/declarations": "updateUserDeclarations",
        "/v1/manageduser/create": "managedUserV1Create",
        "/v1/user/managed": "searchManagedUser",
        "/v1/user/consent/read": "readUserConsent",
        "/v1/user/consent/update": "updateUserConsent",
        "/v2/org/preferences/read": "readTenantPreferences",
        "/v2/org/preferences/create": "createTenantPreferences",
        "/v2/org/preferences/update": "updateTenantPreferences"
      }
      
      # Tnc API policy updates to handle different scenarios as explained below
      # When some or all payloads are missing:
      # 1. Missing userid and tnc type
      # 2. Missing tnc type
      # 3. Missing userid and tnc type not as orgAdminTnc / reportViewerTnc
      # 4. Missing userid but tnc type as orgAdminTnc / reportViewerTnc
      # When all payloads are present:
      # 5. Both userid, tnc type present and tnc type not as orgAdminTnc / reportViewerTnc
      # 6. Both userid, tnc type present and tnc type as orgAdminTnc / reportViewerTnc
      # Issue identified as part of -
      # - https://project-sunbird.atlassian.net/browse/SB-29723
      # - https://project-sunbird.atlassian.net/browse/SB-29996
      
      # Point #1
      acceptTermsAndCondition {
        super.public_role_check
        not input.parsed_body.request.userId
        not input.parsed_body.request.tncType
      }
      
      # Point #2
      acceptTermsAndCondition {
        super.public_role_check
        input.parsed_body.request.userId == super.userid
        not input.parsed_body.request.tncType
      }
      
      # Point #3
      acceptTermsAndCondition {
        super.public_role_check
        not input.parsed_body.request.userId
        not input.parsed_body.request.tncType in ["orgAdminTnc", "reportViewerTnc"]
      }
      
      # Point #4 - As orgAdminTnc
      acceptTermsAndCondition {
        acls := ["acceptTnc"]
        roles := ["ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
        not input.parsed_body.request.userId
        "orgAdminTnc" == input.parsed_body.request.tncType
      }
      
      # Point #4 - As reportViewerTnc
      acceptTermsAndCondition {
        acls := ["acceptTnc"]
        roles := ["REPORT_VIEWER", "REPORT_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
        not input.parsed_body.request.userId
        "reportViewerTnc" == input.parsed_body.request.tncType
      }
      
      # Point #5
      acceptTermsAndCondition {
        super.public_role_check
        input.parsed_body.request.userId == super.userid
        not input.parsed_body.request.tncType in ["orgAdminTnc", "reportViewerTnc"]
      }
      
      # Point #6 - As orgAdminTnc
      acceptTermsAndCondition {
        acls := ["acceptTnc"]
        roles := ["ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
        input.parsed_body.request.userId == super.userid
        "orgAdminTnc" == input.parsed_body.request.tncType
      }
      
      # Point #6 - As reportViewerTnc
      acceptTermsAndCondition {
        acls := ["acceptTnc"]
        roles := ["REPORT_VIEWER", "REPORT_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
        input.parsed_body.request.userId == super.userid
        "reportViewerTnc" == input.parsed_body.request.tncType
      }
      
      updateUser {
        super.public_role_check
        input.parsed_body.request.userId == super.userid
      }
      
      assignRole {
        acls := ["assignRole"]
        roles := ["ORG_ADMIN"]
        super.acls_check(acls)
        # Org check will do an implicit role check so there is no need to invoke super.role_check(roles)
        token_organisationids := super.org_check(roles)
        input.parsed_body.request.organisationId in token_organisationids
      }
      
      assignRoleV2 {
        acls := ["assignRole"]
        roles := ["ORG_ADMIN"]
        super.acls_check(acls)
        # Org check will do an implicit role check so there is no need to invoke super.role_check(roles)
        token_orgs := super.org_check(roles)
      
        # In the below code, we use sets and compare them
        # This can be done using arrays also
        # Take a look at the audience check (commented out) in common.rego which uses the array logic
      
        payload_orgs := {ids | ids := input.parsed_body.request.roles[_].scope[_].organisationId}
        matching_orgs := {orgs | some i; payload_orgs[i] in token_orgs; orgs := i}
        payload_orgs == matching_orgs
      }
      
      # https://project-sunbird.atlassian.net/browse/SB-30186
      # Allow the request to go through if the organisationId is an array type in order to receive a 400 Bad Request error from backend
      assignRoleV2 {
        acls := ["assignRole"]
        roles := ["ORG_ADMIN"]
        super.acls_check(acls)
        type_name(input.parsed_body.request.roles[_].scope[_].organisationId) == "array"
      }
      
      getUserProfile {
        super.public_role_check
        user_id := split(http_request.path, "/")[4]
        split(user_id, "?")[0] == super.userid
      }
      
      getUserProfileV2 {
        super.public_role_check
        user_id := split(http_request.path, "/")[4]
        split(user_id, "?")[0] == super.userid
      }
      
      getUserProfileV3 {
        super.public_role_check
        user_id := split(http_request.path, "/")[4]
        split(user_id, "?")[0] == super.userid
      }
      
      getUserProfileV4 {
        super.public_role_check
        user_id := split(http_request.path, "/")[4]
        split(user_id, "?")[0] == super.userid
      }
      
      getUserProfileV5 {
        super.public_role_check
        user_id := split(http_request.path, "/")[4]
        split(user_id, "?")[0] == super.userid
      }
      
      # Org admin is allowed to retrive any user info using the /v5/user/read endpoint
      getUserProfileV5 {
        acls := ["getUserProfileV5"]
        roles := ["ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      # Allow the API call when using ?withTokens=true as query param - https://project-sunbird.atlassian.net/browse/SB-29676
      getUserProfileV5 {
        super.public_role_check
        contains(http_request.path, "?withTokens=true")
      }
      
      userFeed {
        super.public_role_check
        user_id := split(http_request.path, "/")[4]
        split(user_id, "?")[0] == super.userid
      }
      
      # https://project-sunbird.atlassian.net/browse/SB-29951
      # Temporary fix as all feed url's begin with /v1/user/feed
      # Having only the userFeed (/v1/user/feed/:userid) block is causing issues for other similar routes like /v1/user/feed/create, /v1/user/feed/delete and /v1/user/feed/update
      # Adding the other url blocks below and making them a pass through to avoid rejecting the API incorrectly
      
      userFeedCreate {
        true
      }
      
      userFeedDelete {
        true
      }
      
      userFeedUpdate {
        true
      }
      
      updateUserV2 {
        super.public_role_check
        input.parsed_body.request.userId == super.userid
      }
      
      # Org admin is allowed to update any user info using the /v2/user/update endpoint
      updateUserV2 {
        acls := ["updateUserV2"]
        roles := ["ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      updateUserV3 {
        super.public_role_check
        input.parsed_body.request.userId == super.userid
      }
      
      updateUserDeclarations {
        super.public_role_check
        payload_userids := {ids | ids := input.parsed_body.request.declarations[_].userId}
        count(payload_userids) == 1
        payload_userids[super.userid] == super.userid
      }
      
      # If for token exists, check request.managedBy matches for_token_parentid
      managedUserV1Create {
        super.public_role_check
        input.parsed_body.request.managedBy == super.for_token_parentid
      }
      
      # If for token doesn't exist, check request.managedBy matches userid
      managedUserV1Create {
        super.public_role_check
        input.parsed_body.request.managedBy == super.userid
      }
      
      # If for token exists, check userid in url matches for token parent id
      searchManagedUser {
        super.public_role_check
        super.for_token_exists
        user_id := split(http_request.path, "/")[4]
        split(user_id, "?")[0] == super.for_token_parentid
      }
      
      # If for token doesn't exist, check userid in url matches the x-authenticated-user-token userid
      searchManagedUser {
        super.public_role_check
        not super.for_token_exists
        user_id := split(http_request.path, "/")[4]
        split(user_id, "?")[0] == super.userid
      }
      
      readUserConsent {
        super.public_role_check
        input.parsed_body.request.consent.filters.userId == super.userid
      }
      
      # Org admin is allowed to read any user's consent using the /v1/user/consent/read endpoint
      readUserConsent {
        acls := ["readUserConsent"]
        roles := ["ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      updateUserConsent {
        super.public_role_check
        input.parsed_body.request.consent.userId == super.userid
      }
      
      readTenantPreferences {
        super.public_role_check
      }
      
      createTenantPreferences {
        acls := ["createTenantPreferences"]
        roles := ["ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
      }
      
      updateTenantPreferences {
        acls := ["updateTenantPreferences"]
        roles := ["ORG_ADMIN"]
        super.acls_check(acls)
        super.role_check(roles)
      }
---
# Source: learnbb/charts/userorg/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: userorg-envoy
  labels:

    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: userorg
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: userorg-0.1.0
  annotations:

    reloader.stakater.com/auto: "true"
data:
  
  config.yaml: |-
      static_resources:
        listeners:
        - name: listener_0
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 9999
          per_connection_buffer_limit_bytes: 62914560
          filter_chains:
          - filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                access_log:
                - name: envoy.access_loggers.stdout
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                    log_format:
                      text_format: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS_WITHOUT_PORT% - - [%START_TIME(%d/%b/%Y:%H:%M:%S %z)%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(X-DEVICE-ID)%\" \"%REQ(X-CHANNEL-ID)%\" \"%REQ(X-APP-ID)%\" \"%REQ(X-APP-VER)%\" \"%REQ(X-SESSION-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\"\n"
                route_config:
                  name: local_route
                  virtual_hosts:
                  - name: backend
                    domains:
                    - "*"
                    routes:
                    - match:
                        prefix: "/opa/metrics"
                      route:
                        prefix_rewrite: "/metrics"
                        cluster: opa
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/health"
                      route:
                        cluster: service
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/health"
                      route:
                        cluster: service
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          disabled: true
                    - match:
                        prefix: "/"
                      route:
                        cluster: service
                        timeout: 60s
                http_filters:
                - name: envoy.filters.http.ext_authz
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                    transport_api_version: V3
                    with_request_body:
                      max_request_bytes: 62914560
                      allow_partial_message: true
                    failure_mode_allow: true
                    grpc_service:
                      google_grpc:
                        target_uri: 127.0.0.1:9191
                        stat_prefix: ext_authz
                      timeout: 5s
                - name: envoy.filters.http.router
        clusters:
        - name: service
          connect_timeout: 5s
          per_connection_buffer_limit_bytes: 62914560
          type: static
          load_assignment:
            cluster_name: service
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 9000
        - name: opa
          connect_timeout: 5s
          type: static
          load_assignment:
            cluster_name: opa
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8181
      admin:
        access_log_path: "/dev/stdout"
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 10000
---
# Source: learnbb/charts/userorg/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: userorg-access-keys
data:
---
# Source: learnbb/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-kids-keys
data:
  KEYCLOAK_PUBLIC_KEY: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhOLfm2nEYn5VBDfSy1ei2XWv63s5SnHTTntLgMRXQcT0eAs5q7LAQijy3I6BUrD8DrfwdQbA1fcRkIwsHz1xWOQh/0NbZgVbe7tthsDMx012oBd0nxpaK0Fi/JHB9mh7tm7hazh/TxV0K57RkiWXVSBpPakQP1NqMprnMg2bX+UBhK6A4ghehYyfsHWwwIrDp2hIZw8yhtLXGd5i7mtxL/G+LFmZQb+c9BeGF1gBRm6kgBmY2MsYM60nkV3N8xUOQjKNteUkYCwSSoDJHHxgTM526CCkGewLv0E6bdyJGKKIkY5ZiUFnZW3jJGQhQQuBrN0hhP+zHWZ85dq/uW8h5QIDAQAB
  KEYCLOAK_PUBLIC_KEY_KID: yL8Yyd6bnPKGoXpYpdPCOF28Ezn0rTcLzjYzjbaDpW8
  KEYCLOAK_PUBLIC_KEY_PEM: '-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhOLfm2nEYn5VBDfSy1ei\n2XWv63s5SnHTTntLgMRXQcT0eAs5q7LAQijy3I6BUrD8DrfwdQbA1fcRkIwsHz1x\nWOQh/0NbZgVbe7tthsDMx012oBd0nxpaK0Fi/JHB9mh7tm7hazh/TxV0K57RkiWX\nVSBpPakQP1NqMprnMg2bX+UBhK6A4ghehYyfsHWwwIrDp2hIZw8yhtLXGd5i7mtx\nL/G+LFmZQb+c9BeGF1gBRm6kgBmY2MsYM60nkV3N8xUOQjKNteUkYCwSSoDJHHxg\nTM526CCkGewLv0E6bdyJGKKIkY5ZiUFnZW3jJGQhQQuBrN0hhP+zHWZ85dq/uW8h\n5QIDAQAB\n-----END
    PUBLIC KEY-----'
  REFRESH_TOKEN_KID: 199dc9a1-a81b-44d9-ba32-401b3c867aa1
  REFRESH_TOKEN_SECRET: V4ZEsi3w-qiUvNSUwPZXg7nXr-hwwMQ3dzD7hO3z60JsHiaHBR8Vw2x4UOdMHdCGps5PGUXOjhQyiO0MR8gLmQ
---
# Source: learnbb/charts/neo4j/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: neo4j-claim
  labels:
    app: neo4j
  annotations: 
    helm.sh/resource-policy: "keep"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 25Gi
---
# Source: learnbb/charts/druid-operator/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: learnbb-druid-operator
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: druid-operator
    app.kubernetes.io/version: 0.0.7
    helm.sh/chart: druid-operator-0.1.1
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - configmaps
      - services
      - persistentvolumeclaims
    verbs:
      - list
      - watch
      - create
      - update
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - apps
    resources:
      - statefulsets
      - deployments
    verbs:
      - list
      - watch
      - create
      - update
      - delete
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - list
      - watch
      - create
      - update
      - patch
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - list
      - watch
      - create
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - list
      - watch
      - create
      - update
  - apiGroups:
      - druid.apache.org
    resources:
      - druids
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - druid.apache.org
    resources:
      - druids/status
    verbs:
      - get
      - update
      - patch
---
# Source: learnbb/charts/druid-operator/templates/role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: learnbb-druid-operator
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: druid-operator
    app.kubernetes.io/version: 0.0.7
    helm.sh/chart: druid-operator-0.1.1
subjects:
- kind: ServiceAccount
  name: learnbb-druid-operator
  namespace: sunbird
roleRef:
  kind:  ClusterRole 
  name: learnbb-druid-operator 
  apiGroup: rbac.authorization.k8s.io
---
# Source: learnbb/charts/keycloak-kids-keys/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name:  keycloak-kids-keys-role
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]
---
# Source: learnbb/charts/keycloak-kids-keys/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name:  keycloak-kids-keys-rolebinding
subjects:
- kind: ServiceAccount
  name:  keycloak-kids-keys
  namespace: sunbird
roleRef:
  kind: Role
  name:  keycloak-kids-keys-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: learnbb/charts/adminutils/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: adminutil
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: adminutils
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: adminutils-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 4000
    targetPort: 4000
  selector:
    app.kubernetes.io/name: adminutils
---
# Source: learnbb/charts/cassandra/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cassandra-headless
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: cassandra
    helm.sh/chart: cassandra-10.1.0
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.1.0"
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: intra
      port: 7000
      targetPort: intra
    - name: tls
      port: 7001
      targetPort: tls
    - name: jmx
      port: 7199
      targetPort: jmx
    - name: cql
      port: 9042
      targetPort: cql
  selector:
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: learnbb
---
# Source: learnbb/charts/cassandra/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cassandra
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: cassandra
    helm.sh/chart: cassandra-10.1.0
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.1.0"
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: cql
      port: 9042
      targetPort: cql
      nodePort: null
    - name: metrics
      port: 8080
      nodePort: null
  selector:
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: learnbb
---
# Source: learnbb/charts/cert/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cert-service
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: cert-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9000
    targetPort: 9000
  selector:
    app.kubernetes.io/name: cert
---
# Source: learnbb/charts/certificateapi/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: certificateapi-service
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: certificateapi
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: certificateapi-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8078
    targetPort: 8078
  selector:
    app.kubernetes.io/name: certificateapi
---
# Source: learnbb/charts/certificatesign/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: certificatesign-service
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: certificatesign
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: certificatesign-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8079
    targetPort: 8079
  selector:
    app.kubernetes.io/name: certificatesign
---
# Source: learnbb/charts/certregistry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cert-registry-service
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: certregistry
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: certregistry-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9000
    targetPort: 9000
  - name: opa-metrics
    port: 8181
    protocol: TCP
    targetPort: 8181
  - name: envoy-metrics
    port: 10000
    protocol: TCP
    targetPort: 10000
  selector:
    app.kubernetes.io/name: certregistry
---
# Source: learnbb/charts/elasticsearch/templates/master/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-master-hl
  namespace: "sunbird"
  labels: 
    app.kubernetes.io/name: elasticsearch
    helm.sh/chart: elasticsearch-19.5.4
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "8.5.2"
    app.kubernetes.io/component: master
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  type: ClusterIP
  clusterIP: ""
  publishNotReadyAddresses: true
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
    - name: tcp-transport
      port: 9300
      targetPort: transport
  selector:
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/component: master
---
# Source: learnbb/charts/elasticsearch/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: elasticsearch
    helm.sh/chart: elasticsearch-19.5.4
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "8.5.2"
    app.kubernetes.io/component: master
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
      nodePort: null
    - name: tcp-transport
      port: 9300
      nodePort: null
  selector:
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/component: master
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: activity-aggregate-updater-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: activity-aggregate-updater-jobmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: activity-aggregate-updater-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: activity-aggregate-updater-taskmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: assessment-aggregator-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: assessment-aggregator-jobmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: assessment-aggregator-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: assessment-aggregator-taskmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: collection-cert-pre-processor-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: collection-cert-pre-processor-jobmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: collection-cert-pre-processor-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: collection-cert-pre-processor-taskmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: collection-certificate-generator-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: collection-certificate-generator-jobmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: collection-certificate-generator-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: collection-certificate-generator-taskmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: enrolment-reconciliation-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: enrolment-reconciliation-jobmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: enrolment-reconciliation-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: enrolment-reconciliation-taskmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: legacy-certificate-migrator-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: legacy-certificate-migrator-jobmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: legacy-certificate-migrator-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: legacy-certificate-migrator-taskmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: merge-user-courses-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: merge-user-courses-jobmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: merge-user-courses-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: merge-user-courses-taskmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: notification-job-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: notification-job-jobmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: notification-job-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: notification-job-taskmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: program-user-info-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: program-user-info-jobmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: program-user-info-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: program-user-info-taskmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: relation-cache-updater-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: relation-cache-updater-jobmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: relation-cache-updater-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: relation-cache-updater-taskmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: user-deletion-cleanup-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: user-deletion-cleanup-jobmanager
---
# Source: learnbb/charts/flink/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: user-deletion-cleanup-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app.kubernetes.io/component: user-deletion-cleanup-taskmanager
---
# Source: learnbb/charts/groups/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: groups-service
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: groups
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: groups-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9000
    targetPort: 9000
  selector:
    app.kubernetes.io/name: groups
---
# Source: learnbb/charts/kafka/charts/zookeeper/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-headless
  namespace: sunbird
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-11.0.2
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.8.0"
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/component: zookeeper
---
# Source: learnbb/charts/kafka/charts/zookeeper/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: sunbird
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-11.0.2
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.8.0"
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
      nodePort: null
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/component: zookeeper
---
# Source: learnbb/charts/kafka/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-20.0.2
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.3.1"
    app.kubernetes.io/component: kafka
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: false
  ports:
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: kafka-client
    - name: tcp-internal
      port: 9093
      protocol: TCP
      targetPort: kafka-internal
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/component: kafka
---
# Source: learnbb/charts/kafka/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-20.0.2
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.3.1"
    app.kubernetes.io/component: kafka
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: kafka-client
      nodePort: null
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/component: kafka
---
# Source: learnbb/charts/keycloak/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: keycloak-0.1.0
  annotations:
    helm.sh/hook-weight: "-3"
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: https
    port: 8443
    targetPort: 8443
  - name: admin
    port: 9990
    targetPort: 9990
  selector:
    app.kubernetes.io/name: keycloak
---
# Source: learnbb/charts/lms/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: lms-service
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: lms
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: lms-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9000
    targetPort: 9000
  - name: opa-metrics
    port: 8181
    protocol: TCP
    targetPort: 8181
  - name: envoy-metrics
    port: 10000
    protocol: TCP
    targetPort: 10000
  selector:
    app.kubernetes.io/name: lms
---
# Source: learnbb/charts/neo4j/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: neo4j
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: neo4j
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: neo4j-0.1.0
  annotations:
    helm.sh/hook-weight: "-5"
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: cypher-port
    port: 7474
    targetPort: 7474
  - name: bolt-port-1
    port: 7687
    targetPort: 7687
  - name: bolt-port-2
    port: 8687
    targetPort: 8687
  selector:
    app.kubernetes.io/name: neo4j
---
# Source: learnbb/charts/notification/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: notification
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: notification-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9000
    targetPort: 9000
  - name: opa-metrics
    port: 8181
    protocol: TCP
    targetPort: 8181
  - name: envoy-metrics
    port: 10000
    protocol: TCP
    targetPort: 10000
  selector:
    app.kubernetes.io/name: notification
---
# Source: learnbb/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.3
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
  annotations:
    reloader.stakater.com/auto: "true"
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: sunbird
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: learnbb
---
# Source: learnbb/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.3
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
  annotations:
    reloader.stakater.com/auto: "true"
  namespace: sunbird
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: learnbb
    role: primary
---
# Source: learnbb/charts/print/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: learnbb-print
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: print
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: print-0.1.0
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 5000
    targetPort: 5000
  selector:
    app.kubernetes.io/name: print
---
# Source: learnbb/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  namespace: "sunbird"
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.1
    helm.sh/chart: redis-18.1.1
  annotations:
    helm.sh/hook-weight: "-5"
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/name: redis
---
# Source: learnbb/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  namespace: "sunbird"
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.1
    helm.sh/chart: redis-18.1.1
    app.kubernetes.io/component: master
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: learnbb/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-replicas
  namespace: "sunbird"
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.1
    helm.sh/chart: redis-18.1.1
    app.kubernetes.io/component: replica
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: replica
---
# Source: learnbb/charts/registry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: registry-service
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: registry
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: registry-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8081
    targetPort: 8081
  selector:
    app.kubernetes.io/name: registry
---
# Source: learnbb/charts/userorg/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: userorg-service
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: userorg
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: userorg-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9000
    targetPort: 9000
  - name: opa-metrics
    port: 8181
    protocol: TCP
    targetPort: 8181
  - name: envoy-metrics
    port: 10000
    protocol: TCP
    targetPort: 10000
  selector:
    app.kubernetes.io/name: userorg
---
# Source: learnbb/charts/adminutils/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminutil
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: adminutils
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: adminutils-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: adminutils
  template:
    metadata:
      labels:
        app.kubernetes.io/name: adminutils
      annotations:
        checksum/config: 1e9537b0650241e765fd67f489f19c0d22f2667e5f2eec65b9ef6f14b6ae62df
    spec:
      serviceAccountName: adminutil
      securityContext:
        {}
      containers:
        - name: adminutils
          image: "sunbirded.azurecr.io/adminutil:release-4.5.0_RC3_68b1eaa_61"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 4000
            initialDelaySeconds: 15
            periodSeconds: 15
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 4000
            initialDelaySeconds: 15
            periodSeconds: 15
          ports:
            - name: http
              containerPort: 4000
          resources:
            limits:
              cpu: 1
              memory: 1G
            requests:
              cpu: 256m
              memory: 500M
          securityContext:
            {}
          env:
          # - name: REFRESH_TOKEN_PUBLIC_KEYPREFIX
          #   valueFrom:
          #     configMapKeyRef:
          #       name: keycloak-kids-keys
          #       key: KEYCLOAK_PUBLIC_KEY_KID
          - name: REFRESH_TOKEN_KID
            valueFrom:
              configMapKeyRef:
                name: keycloak-kids-keys
                key: KEYCLOAK_PUBLIC_KEY_KID
          - name: REFRESH_TOKEN_SECRET_KEY
            valueFrom:
              configMapKeyRef:
                name: keycloak-kids-keys
                key: REFRESH_TOKEN_SECRET
          envFrom:
          - configMapRef:
              name: adminutil-env
          volumeMounts:
          - name: config
            mountPath: /config
          - mountPath: /keys/
            name: keys
          - name: keycloak-key
            mountPath: /keycloak-keys/
      volumes:
      - name: env
        configMap:
          name: adminutil-env
      - name: config
        configMap:
          name: adminutil
      - name: keys
        projected:
          sources:
          - configMap:
              name: access-private-keys
          - configMap:
              name: mobile-devicev2-private-keys
          - configMap:
              name: desktop-devicev2-private-keys
          - configMap:
              name: portal-anonymous-private-keys
          - configMap:
              name: portal-loggedin-private-keys
      - name: keycloak-key
        configMap:
          name: keycloak-kids-keys
---
# Source: learnbb/charts/cert/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cert
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: cert-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cert
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cert
      annotations:
        checksum/config: ed76f71547b887ac823109e610c26db3cc3af4dd2643111964e3163f74c2142f
    spec:
      serviceAccountName: cert
      securityContext:
        {}
      containers:
        - name: cert
          image: "sunbirded.azurecr.io/cert_service:release-5.0.1_RC2"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9000
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            {}
          envFrom:
          - configMapRef:
              name: cert-env
          volumeMounts:
          - name: config
            mountPath: /home/sunbird/cert/cert-service-1.0-SNAPSHOT/config/
      volumes:
      - name: env
        configMap:
          name: cert-env
      - name: config
        configMap:
          name: cert
---
# Source: learnbb/charts/certificateapi/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: certificateapi
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: certificateapi
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: certificateapi-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: certificateapi
  template:
    metadata:
      labels:
        app.kubernetes.io/name: certificateapi
      annotations:
        checksum/config: 497805ed52bc89890b2b2142a09f6e20f230fbb47e317f30f4acf7c283a30012
    spec:
      serviceAccountName: certificateapi
      securityContext:
        {}
      containers:
        - name: certificateapi
          image: "sunbirded.azurecr.io/sunbird-rc-certificate-api:release-5.1.0_2bc7760_10"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 8078
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 8078
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 8078
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            {}
          envFrom:
          - configMapRef:
              name: certificateapi-env
          volumeMounts:
      volumes:
      - name: env
        configMap:
          name: certificateapi-env
---
# Source: learnbb/charts/certificatesign/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: certificatesign
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: certificatesign
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: certificatesign-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: certificatesign
  template:
    metadata:
      labels:
        app.kubernetes.io/name: certificatesign
      annotations:
        checksum/config: 654419cda9870b8c14daa1af9708ab0acf5060f30ad3b0272a29cd196f092727
    spec:
      serviceAccountName: certificatesign
      securityContext:
        {}
      containers:
        - name: certificatesign
          image: "sunbirded.azurecr.io/sunbird-rc-certificate-signer:release-5.1.0_2bc7760_9"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 8079
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 8079
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 8079
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            {}
          envFrom:
          - configMapRef:
              name: certificatesign-env
          volumeMounts:
          - name: config
            mountPath: /etc/signer
      volumes:
      - name: env
        configMap:
          name: certificatesign-env
      - name: config
        configMap:
          name: certificatesign
---
# Source: learnbb/charts/certregistry/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cert-registry
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: certregistry
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: certregistry-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: certregistry
  template:
    metadata:
      labels:
        app.kubernetes.io/name: certregistry
      annotations:
        checksum/config: f9df3dc5eab8a955f176c98b5192a199f7201162518fc3e6b25fa07dc9e146e6
    spec:
      serviceAccountName: cert-registry
      securityContext:
        {}
      containers:
        - name: certregistry
          image: "sunbirded.azurecr.io/cert_registry_service:release-5.0.0_RC1_1"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9000
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            {}
          envFrom:
          - configMapRef:
              name: cert-registry-env
          volumeMounts:
          - name: config
            mountPath: /home/sunbird/service-1.0-SNAPSHOT/config
        - args:
          - envoy
          - --config-path
          - /config/config.yaml
          env:
          - name: ENVOY_UID
            value: "1111"
          image: envoyproxy/envoy:v1.20.0
          imagePullPolicy: IfNotPresent
          name: envoy
          livenessProbe:
            
            failureThreshold: 2
            httpGet:
              path: /ready
              port: 10000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            
            failureThreshold: 2
            httpGet:
              path: /ready
              port: 10000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /config
              name: envoy-config
              readOnly: true
        - command: ["/bin/sh", "-c"]
          args:
          - |
            KID=$(cat /keys/KEYCLOAK_PUBLIC_KEY_KID) && PUBLIC_KEY=$(cat /keys/KEYCLOAK_PUBLIC_KEY) && \
            PUBLIC_KEY_PEM=$(echo "$PUBLIC_KEY" | sed -e 's/.\{64\}/&\\\\n/g' -e '1s/^/-----BEGIN PUBLIC KEY-----\\\\n/' -e '$s/$/\\\\n-----END PUBLIC KEY-----/') && \
            mkdir /policies && cp -Lr /opa-policies/*.rego /policies && \
            sed -i "s|KEYCLOAK_KID|$KID|g" /policies/common.rego && \
            sed -i "s|KEYCLOAK_PUBLIC_KEY|$PUBLIC_KEY_PEM|g" /policies/common.rego && \
            /app/opa run --server /policies \
              --addr=localhost:8181 \
              --diagnostic-addr=0.0.0.0:8282 \
              --set=plugins.envoy_ext_authz_grpc.addr=:9191 \
              --set=plugins.envoy_ext_authz_grpc.path=main/allow \
              --set=decision_logs.plugin=print_decision_logs_on_failure \
              --set=plugins.print_decision_logs_on_failure.stdout=true \
              --log-level=error \
              --ignore=.*
          image: sunbirded.azurecr.io/opa:0.34.2-envoy
          imagePullPolicy: IfNotPresent
          name: opa
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health?plugins
              port: 8282
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health?plugins
              port: 8282
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /opa-policies
              name: opa-policy
              readOnly: true
            - name: keycloak-key
              mountPath: /keys/
      initContainers:
        - args:
          - -p
          - "9999"
          - -u
          - "1111"
          - -w
          - "8282,10000"
          image: openpolicyagent/proxy_init:v5
          imagePullPolicy: IfNotPresent
          name: proxy-init
          resources:
            
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            runAsNonRoot: false
            runAsUser: 0
      volumes:
      - name: env
        configMap:
          name: cert-registry-env
      - name: config
        configMap:
          name: cert-registry
      - name: envoy-config
        configMap:
          name: cert-registry-envoy
      - name: opa-policy
        configMap:
          name: cert-registry-opa
      - name: keycloak-key
        configMap:
          name: keycloak-kids-keys
---
# Source: learnbb/charts/druid-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: sunbird
  name: learnbb-druid-operator
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: druid-operator
    app.kubernetes.io/version: 0.0.7
    helm.sh/chart: druid-operator-0.1.1
spec:
  replicas: 1
  selector:
    matchLabels: 
      app: learnbb-druid-operator
  template:
    metadata:
      labels:
        app: learnbb-druid-operator  
    spec:
      serviceAccountName: learnbb-druid-operator
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
      containers:
        - name: druid-operator
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
          image: "druidio/druid-operator:0.0.7"
          command:
          - /manager
          imagePullPolicy: IfNotPresent
          env:
            - name: DENY_LIST
              value: "default,kube-system"
            - name: RECONCILE_WAIT
              value: "10s"
            - name: WATCH_NAMESPACE
              value: ""
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: activity-aggregate-updater-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 4fbe2784f5cfb0bfef8f0db523b8c7d66556e70dbfef1585a9072237f4f44433
    
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: activity-aggregate-updater-taskmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: activity-aggregate-updater-taskmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 4fbe2784f5cfb0bfef8f0db523b8c7d66556e70dbfef1585a9072237f4f44433
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/taskmanager.sh"]
          args: ["start-foreground",
            "-Dweb.submit.enable=false",
            "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
            "-Dmetrics.reporter.prom.host=activity-aggregate-updater-taskmanager",
            "-Dmetrics.reporter.prom.port=9251-9260",
            "-Djobmanager.rpc.address=activity-aggregate-updater-jobmanager",
            "-Dtaskmanager.rpc.port=6122"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: activity-aggregate-updater-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: activity-aggregate-updater-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 4fbe2784f5cfb0bfef8f0db523b8c7d66556e70dbfef1585a9072237f4f44433
  
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: activity-aggregate-updater-jobmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: activity-aggregate-updater-jobmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 4fbe2784f5cfb0bfef8f0db523b8c7d66556e70dbfef1585a9072237f4f44433
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/standalone-job.sh"]
          args: ["start-foreground",
                "--job-classname=org.sunbird.job.aggregate.task.ActivityAggregateUpdaterStreamTask",
                "-Dweb.submit.enable=false",
                "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
                "-Dmetrics.reporter.prom.port=9250",
                "-Djobmanager.rpc.address=activity-aggregate-updater-jobmanager",
                "-Djobmanager.rpc.port=6123",
                "-Dparallelism.default=1",
                "-Dblob.server.port=6124",
                "-Dqueryable-state.server.ports=6125",
                "--config.file.path",
                "/data/flink/conf/activity-aggregate-updater.conf"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /data/flink/conf/base-config.conf
            subPath: base-config.conf
          - name: flink-config-volume
            mountPath: /data/flink/conf/activity-aggregate-updater.conf
            subPath: activity-aggregate-updater.conf
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: activity-aggregate-updater-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: base-config
            path: base-config.conf
          - key: config
            path: activity-aggregate-updater.conf
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: assessment-aggregator-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 03741c2f2a673666dd47a86d9a09175fe731dc2202b14aea49eaf477b097f61c
    
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: assessment-aggregator-taskmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: assessment-aggregator-taskmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 03741c2f2a673666dd47a86d9a09175fe731dc2202b14aea49eaf477b097f61c
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/taskmanager.sh"]
          args: ["start-foreground",
            "-Dweb.submit.enable=false",
            "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
            "-Dmetrics.reporter.prom.host=assessment-aggregator-taskmanager",
            "-Dmetrics.reporter.prom.port=9251-9260",
            "-Djobmanager.rpc.address=assessment-aggregator-jobmanager",
            "-Dtaskmanager.rpc.port=6122"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: assessment-aggregator-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: assessment-aggregator-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 03741c2f2a673666dd47a86d9a09175fe731dc2202b14aea49eaf477b097f61c
  
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: assessment-aggregator-jobmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: assessment-aggregator-jobmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 03741c2f2a673666dd47a86d9a09175fe731dc2202b14aea49eaf477b097f61c
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/standalone-job.sh"]
          args: ["start-foreground",
                "--job-classname=org.sunbird.dp.assessment.task.AssessmentAggregatorStreamTask",
                "-Dweb.submit.enable=false",
                "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
                "-Dmetrics.reporter.prom.port=9250",
                "-Djobmanager.rpc.address=assessment-aggregator-jobmanager",
                "-Djobmanager.rpc.port=6123",
                "-Dparallelism.default=1",
                "-Dblob.server.port=6124",
                "-Dqueryable-state.server.ports=6125",
                "--config.file.path",
                "/data/flink/conf/assessment-aggregator.conf"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /data/flink/conf/base-config.conf
            subPath: base-config.conf
          - name: flink-config-volume
            mountPath: /data/flink/conf/assessment-aggregator.conf
            subPath: assessment-aggregator.conf
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: assessment-aggregator-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: base-config
            path: base-config.conf
          - key: config
            path: assessment-aggregator.conf
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: collection-cert-pre-processor-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 96e815ed1437381e6cf7301e2f2b1256a890de7d9c06ffd39c8be25557976960
    
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: collection-cert-pre-processor-taskmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: collection-cert-pre-processor-taskmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 96e815ed1437381e6cf7301e2f2b1256a890de7d9c06ffd39c8be25557976960
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/taskmanager.sh"]
          args: ["start-foreground",
            "-Dweb.submit.enable=false",
            "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
            "-Dmetrics.reporter.prom.host=collection-cert-pre-processor-taskmanager",
            "-Dmetrics.reporter.prom.port=9251-9260",
            "-Djobmanager.rpc.address=collection-cert-pre-processor-jobmanager",
            "-Dtaskmanager.rpc.port=6122"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: collection-cert-pre-processor-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: collection-cert-pre-processor-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 96e815ed1437381e6cf7301e2f2b1256a890de7d9c06ffd39c8be25557976960
  
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: collection-cert-pre-processor-jobmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: collection-cert-pre-processor-jobmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 96e815ed1437381e6cf7301e2f2b1256a890de7d9c06ffd39c8be25557976960
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/standalone-job.sh"]
          args: ["start-foreground",
                "--job-classname=org.sunbird.job.collectioncert.task.CollectionCertPreProcessorTask",
                "-Dweb.submit.enable=false",
                "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
                "-Dmetrics.reporter.prom.port=9250",
                "-Djobmanager.rpc.address=collection-cert-pre-processor-jobmanager",
                "-Djobmanager.rpc.port=6123",
                "-Dparallelism.default=1",
                "-Dblob.server.port=6124",
                "-Dqueryable-state.server.ports=6125",
                "--config.file.path",
                "/data/flink/conf/collection-cert-pre-processor.conf"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /data/flink/conf/base-config.conf
            subPath: base-config.conf
          - name: flink-config-volume
            mountPath: /data/flink/conf/collection-cert-pre-processor.conf
            subPath: collection-cert-pre-processor.conf
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: collection-cert-pre-processor-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: base-config
            path: base-config.conf
          - key: config
            path: collection-cert-pre-processor.conf
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: collection-certificate-generator-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: ce9bff18be9f3ae4e1763f71662c4f9551d65a550cc10a41e9a9f95fa6b43562
    
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: collection-certificate-generator-taskmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: collection-certificate-generator-taskmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: ce9bff18be9f3ae4e1763f71662c4f9551d65a550cc10a41e9a9f95fa6b43562
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/taskmanager.sh"]
          args: ["start-foreground",
            "-Dweb.submit.enable=false",
            "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
            "-Dmetrics.reporter.prom.host=collection-certificate-generator-taskmanager",
            "-Dmetrics.reporter.prom.port=9251-9260",
            "-Djobmanager.rpc.address=collection-certificate-generator-jobmanager",
            "-Dtaskmanager.rpc.port=6122"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: collection-certificate-generator-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: collection-certificate-generator-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: ce9bff18be9f3ae4e1763f71662c4f9551d65a550cc10a41e9a9f95fa6b43562
  
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: collection-certificate-generator-jobmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: collection-certificate-generator-jobmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: ce9bff18be9f3ae4e1763f71662c4f9551d65a550cc10a41e9a9f95fa6b43562
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/standalone-job.sh"]
          args: ["start-foreground",
                "--job-classname=org.sunbird.job.certgen.task.CertificateGeneratorStreamTask",
                "-Dweb.submit.enable=false",
                "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
                "-Dmetrics.reporter.prom.port=9250",
                "-Djobmanager.rpc.address=collection-certificate-generator-jobmanager",
                "-Djobmanager.rpc.port=6123",
                "-Dparallelism.default=1",
                "-Dblob.server.port=6124",
                "-Dqueryable-state.server.ports=6125",
                "--config.file.path",
                "/data/flink/conf/collection-certificate-generator.conf"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /data/flink/conf/base-config.conf
            subPath: base-config.conf
          - name: flink-config-volume
            mountPath: /data/flink/conf/collection-certificate-generator.conf
            subPath: collection-certificate-generator.conf
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: collection-certificate-generator-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: base-config
            path: base-config.conf
          - key: config
            path: collection-certificate-generator.conf
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enrolment-reconciliation-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 9167958282e026989d871be61d826bbec4699808e67d23eb3c247a1eb259730c
    
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: enrolment-reconciliation-taskmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: enrolment-reconciliation-taskmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 9167958282e026989d871be61d826bbec4699808e67d23eb3c247a1eb259730c
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/taskmanager.sh"]
          args: ["start-foreground",
            "-Dweb.submit.enable=false",
            "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
            "-Dmetrics.reporter.prom.host=enrolment-reconciliation-taskmanager",
            "-Dmetrics.reporter.prom.port=9251-9260",
            "-Djobmanager.rpc.address=enrolment-reconciliation-jobmanager",
            "-Dtaskmanager.rpc.port=6122"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: enrolment-reconciliation-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enrolment-reconciliation-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 9167958282e026989d871be61d826bbec4699808e67d23eb3c247a1eb259730c
  
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: enrolment-reconciliation-jobmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: enrolment-reconciliation-jobmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 9167958282e026989d871be61d826bbec4699808e67d23eb3c247a1eb259730c
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/standalone-job.sh"]
          args: ["start-foreground",
                "--job-classname=org.sunbird.job.recounciliation.task.EnrolmentReconciliationStreamTask",
                "-Dweb.submit.enable=false",
                "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
                "-Dmetrics.reporter.prom.port=9250",
                "-Djobmanager.rpc.address=enrolment-reconciliation-jobmanager",
                "-Djobmanager.rpc.port=6123",
                "-Dparallelism.default=1",
                "-Dblob.server.port=6124",
                "-Dqueryable-state.server.ports=6125",
                "--config.file.path",
                "/data/flink/conf/enrolment-reconciliation.conf"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /data/flink/conf/base-config.conf
            subPath: base-config.conf
          - name: flink-config-volume
            mountPath: /data/flink/conf/enrolment-reconciliation.conf
            subPath: enrolment-reconciliation.conf
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: enrolment-reconciliation-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: base-config
            path: base-config.conf
          - key: config
            path: enrolment-reconciliation.conf
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: legacy-certificate-migrator-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 60f95c48e456c7fd4d9486aa72435b619d6ddeb4823d75427c59d386be655572
    
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: legacy-certificate-migrator-taskmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: legacy-certificate-migrator-taskmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 60f95c48e456c7fd4d9486aa72435b619d6ddeb4823d75427c59d386be655572
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/taskmanager.sh"]
          args: ["start-foreground",
            "-Dweb.submit.enable=false",
            "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
            "-Dmetrics.reporter.prom.host=legacy-certificate-migrator-taskmanager",
            "-Dmetrics.reporter.prom.port=9251-9260",
            "-Djobmanager.rpc.address=legacy-certificate-migrator-jobmanager",
            "-Dtaskmanager.rpc.port=6122"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: legacy-certificate-migrator-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: legacy-certificate-migrator-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 60f95c48e456c7fd4d9486aa72435b619d6ddeb4823d75427c59d386be655572
  
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: legacy-certificate-migrator-jobmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: legacy-certificate-migrator-jobmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 60f95c48e456c7fd4d9486aa72435b619d6ddeb4823d75427c59d386be655572
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/standalone-job.sh"]
          args: ["start-foreground",
                "--job-classname=org.sunbird.job.certmigrator.task.CertificateGeneratorStreamTask",
                "-Dweb.submit.enable=false",
                "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
                "-Dmetrics.reporter.prom.port=9250",
                "-Djobmanager.rpc.address=legacy-certificate-migrator-jobmanager",
                "-Djobmanager.rpc.port=6123",
                "-Dparallelism.default=1",
                "-Dblob.server.port=6124",
                "-Dqueryable-state.server.ports=6125",
                "--config.file.path",
                "/data/flink/conf/legacy-certificate-migrator.conf"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /data/flink/conf/base-config.conf
            subPath: base-config.conf
          - name: flink-config-volume
            mountPath: /data/flink/conf/legacy-certificate-migrator.conf
            subPath: legacy-certificate-migrator.conf
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: legacy-certificate-migrator-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: base-config
            path: base-config.conf
          - key: config
            path: legacy-certificate-migrator.conf
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: merge-user-courses-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: e7328e4e0e31a0b8266821d147cf4abd31242dfcf99ce1da7887207d5f6ccf26
    
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: merge-user-courses-taskmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: merge-user-courses-taskmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: e7328e4e0e31a0b8266821d147cf4abd31242dfcf99ce1da7887207d5f6ccf26
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/taskmanager.sh"]
          args: ["start-foreground",
            "-Dweb.submit.enable=false",
            "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
            "-Dmetrics.reporter.prom.host=merge-user-courses-taskmanager",
            "-Dmetrics.reporter.prom.port=9251-9260",
            "-Djobmanager.rpc.address=merge-user-courses-jobmanager",
            "-Dtaskmanager.rpc.port=6122"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: merge-user-courses-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: merge-user-courses-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: e7328e4e0e31a0b8266821d147cf4abd31242dfcf99ce1da7887207d5f6ccf26
  
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: merge-user-courses-jobmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: merge-user-courses-jobmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: e7328e4e0e31a0b8266821d147cf4abd31242dfcf99ce1da7887207d5f6ccf26
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/standalone-job.sh"]
          args: ["start-foreground",
                "--job-classname=org.sunbird.job.merge.user.courses.task.MergeUserCoursesStreamTask",
                "-Dweb.submit.enable=false",
                "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
                "-Dmetrics.reporter.prom.port=9250",
                "-Djobmanager.rpc.address=merge-user-courses-jobmanager",
                "-Djobmanager.rpc.port=6123",
                "-Dparallelism.default=1",
                "-Dblob.server.port=6124",
                "-Dqueryable-state.server.ports=6125",
                "--config.file.path",
                "/data/flink/conf/merge-user-courses.conf"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /data/flink/conf/base-config.conf
            subPath: base-config.conf
          - name: flink-config-volume
            mountPath: /data/flink/conf/merge-user-courses.conf
            subPath: merge-user-courses.conf
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: merge-user-courses-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: base-config
            path: base-config.conf
          - key: config
            path: merge-user-courses.conf
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-job-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: c6ffe2cdeefe0c8b49c1a774d5efd32ef1def7f8bd135e7c77718bd8b2e1480d
    
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: notification-job-taskmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: notification-job-taskmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: c6ffe2cdeefe0c8b49c1a774d5efd32ef1def7f8bd135e7c77718bd8b2e1480d
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/taskmanager.sh"]
          args: ["start-foreground",
            "-Dweb.submit.enable=false",
            "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
            "-Dmetrics.reporter.prom.host=notification-job-taskmanager",
            "-Dmetrics.reporter.prom.port=9251-9260",
            "-Djobmanager.rpc.address=notification-job-jobmanager",
            "-Dtaskmanager.rpc.port=6122"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: notification-job-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-job-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: c6ffe2cdeefe0c8b49c1a774d5efd32ef1def7f8bd135e7c77718bd8b2e1480d
  
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: notification-job-jobmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: notification-job-jobmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: c6ffe2cdeefe0c8b49c1a774d5efd32ef1def7f8bd135e7c77718bd8b2e1480d
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/standalone-job.sh"]
          args: ["start-foreground",
                "--job-classname=org.sunbird.job.notification.task.NotificationStreamTask",
                "-Dweb.submit.enable=false",
                "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
                "-Dmetrics.reporter.prom.port=9250",
                "-Djobmanager.rpc.address=notification-job-jobmanager",
                "-Djobmanager.rpc.port=6123",
                "-Dparallelism.default=1",
                "-Dblob.server.port=6124",
                "-Dqueryable-state.server.ports=6125",
                "--config.file.path",
                "/data/flink/conf/notification-job.conf"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /data/flink/conf/base-config.conf
            subPath: base-config.conf
          - name: flink-config-volume
            mountPath: /data/flink/conf/notification-job.conf
            subPath: notification-job.conf
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: notification-job-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: base-config
            path: base-config.conf
          - key: config
            path: notification-job.conf
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: program-user-info-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 6d6d4a8629d7cb25fca3ff3425efa38836e729129ce1338e583c65063ff7265e
    
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: program-user-info-taskmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: program-user-info-taskmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 6d6d4a8629d7cb25fca3ff3425efa38836e729129ce1338e583c65063ff7265e
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/taskmanager.sh"]
          args: ["start-foreground",
            "-Dweb.submit.enable=false",
            "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
            "-Dmetrics.reporter.prom.host=program-user-info-taskmanager",
            "-Dmetrics.reporter.prom.port=9251-9260",
            "-Djobmanager.rpc.address=program-user-info-jobmanager",
            "-Dtaskmanager.rpc.port=6122"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: program-user-info-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: program-user-info-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 6d6d4a8629d7cb25fca3ff3425efa38836e729129ce1338e583c65063ff7265e
  
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: program-user-info-jobmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: program-user-info-jobmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 6d6d4a8629d7cb25fca3ff3425efa38836e729129ce1338e583c65063ff7265e
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/standalone-job.sh"]
          args: ["start-foreground",
                "--job-classname=org.sunbird.dp.userinfo.task.ProgramUserInfoStreamTask",
                "-Dweb.submit.enable=false",
                "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
                "-Dmetrics.reporter.prom.port=9250",
                "-Djobmanager.rpc.address=program-user-info-jobmanager",
                "-Djobmanager.rpc.port=6123",
                "-Dparallelism.default=1",
                "-Dblob.server.port=6124",
                "-Dqueryable-state.server.ports=6125",
                "--config.file.path",
                "/data/flink/conf/program-user-info.conf"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /data/flink/conf/base-config.conf
            subPath: base-config.conf
          - name: flink-config-volume
            mountPath: /data/flink/conf/program-user-info.conf
            subPath: program-user-info.conf
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: program-user-info-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: base-config
            path: base-config.conf
          - key: config
            path: program-user-info.conf
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: relation-cache-updater-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: ebb1cb5b23bb0af0173a8fa643d4f3691c04c9eb4cc4a902f08e54c5ffe1584f
    
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: relation-cache-updater-taskmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: relation-cache-updater-taskmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: ebb1cb5b23bb0af0173a8fa643d4f3691c04c9eb4cc4a902f08e54c5ffe1584f
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/taskmanager.sh"]
          args: ["start-foreground",
            "-Dweb.submit.enable=false",
            "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
            "-Dmetrics.reporter.prom.host=relation-cache-updater-taskmanager",
            "-Dmetrics.reporter.prom.port=9251-9260",
            "-Djobmanager.rpc.address=relation-cache-updater-jobmanager",
            "-Dtaskmanager.rpc.port=6122"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: relation-cache-updater-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: relation-cache-updater-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: ebb1cb5b23bb0af0173a8fa643d4f3691c04c9eb4cc4a902f08e54c5ffe1584f
  
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: relation-cache-updater-jobmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: relation-cache-updater-jobmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: ebb1cb5b23bb0af0173a8fa643d4f3691c04c9eb4cc4a902f08e54c5ffe1584f
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/standalone-job.sh"]
          args: ["start-foreground",
                "--job-classname=org.sunbird.job.relationcache.task.RelationCacheUpdaterStreamTask",
                "-Dweb.submit.enable=false",
                "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
                "-Dmetrics.reporter.prom.port=9250",
                "-Djobmanager.rpc.address=relation-cache-updater-jobmanager",
                "-Djobmanager.rpc.port=6123",
                "-Dparallelism.default=1",
                "-Dblob.server.port=6124",
                "-Dqueryable-state.server.ports=6125",
                "--config.file.path",
                "/data/flink/conf/relation-cache-updater.conf"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /data/flink/conf/base-config.conf
            subPath: base-config.conf
          - name: flink-config-volume
            mountPath: /data/flink/conf/relation-cache-updater.conf
            subPath: relation-cache-updater.conf
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: relation-cache-updater-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: base-config
            path: base-config.conf
          - key: config
            path: relation-cache-updater.conf
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-deletion-cleanup-taskmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 1c8d59aca2223ea0fb92066976d6d3e5de07933e960ee7bb3ee31cfed0c3738e
    
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: user-deletion-cleanup-taskmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: user-deletion-cleanup-taskmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 1c8d59aca2223ea0fb92066976d6d3e5de07933e960ee7bb3ee31cfed0c3738e
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/taskmanager.sh"]
          args: ["start-foreground",
            "-Dweb.submit.enable=false",
            "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
            "-Dmetrics.reporter.prom.host=user-deletion-cleanup-taskmanager",
            "-Dmetrics.reporter.prom.port=9251-9260",
            "-Djobmanager.rpc.address=user-deletion-cleanup-jobmanager",
            "-Dtaskmanager.rpc.port=6122"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: user-deletion-cleanup-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/flink/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-deletion-cleanup-jobmanager
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flink
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: flink-0.1.0
  annotations:
    checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    checksum/job-config: 1c8d59aca2223ea0fb92066976d6d3e5de07933e960ee7bb3ee31cfed0c3738e
  
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flink
      app.kubernetes.io/component: user-deletion-cleanup-jobmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flink
        app.kubernetes.io/component: user-deletion-cleanup-jobmanager
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/job-config: 1c8d59aca2223ea0fb92066976d6d3e5de07933e960ee7bb3ee31cfed0c3738e
    spec:
      serviceAccountName: learnbb-flink
      securityContext:
        {}
      containers:
        - name: flink
          image: "sunbirded.azurecr.io/data-pipeline:release-7.0.0_RC5_4a07143_21"
          imagePullPolicy: IfNotPresent
          workingDir: 
          command: ["/opt/flink/bin/standalone-job.sh"]
          args: ["start-foreground",
                "--job-classname=org.sunbird.job.deletioncleanup.task.UserDeletionCleanupStreamTask",
                "-Dweb.submit.enable=false",
                "-Dmetrics.reporter.prom.class=org.apache.flink.metrics.prometheus.PrometheusReporter",
                "-Dmetrics.reporter.prom.port=9250",
                "-Djobmanager.rpc.address=user-deletion-cleanup-jobmanager",
                "-Djobmanager.rpc.port=6123",
                "-Dparallelism.default=1",
                "-Dblob.server.port=6124",
                "-Dqueryable-state.server.ports=6125",
                "--config.file.path",
                "/data/flink/conf/user-deletion-cleanup.conf"]
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            {}
          volumeMounts:
          - name: flink-config-volume
            mountPath: /opt/flink/conf/flink-conf.yaml
            subPath: flink-conf.yaml
          - name: flink-config-volume
            mountPath: /data/flink/conf/base-config.conf
            subPath: base-config.conf
          - name: flink-config-volume
            mountPath: /data/flink/conf/user-deletion-cleanup.conf
            subPath: user-deletion-cleanup.conf
          - name: flink-config-volume
            mountPath: /opt/flink/conf/log4j-console.properties
            subPath: log4j-console.properties
      volumes:
      - name: flink-config-volume
        configMap:
          name: user-deletion-cleanup-config
          items:
          - key: flink-conf
            path: flink-conf.yaml
          - key: base-config
            path: base-config.conf
          - key: config
            path: user-deletion-cleanup.conf
          - key: log4j_console_properties
            path: log4j-console.properties
---
# Source: learnbb/charts/groups/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: groups
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: groups
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: groups-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: groups
  template:
    metadata:
      labels:
        app.kubernetes.io/name: groups
      annotations:
        checksum/config: e6f9b5e611d1e310b23993a88010803dc198afa9ce3ef38e0f2f138bdf3d7fd8
    spec:
      serviceAccountName: groups
      securityContext:
        {}
      containers:
        - name: groups
          image: "sunbirded.azurecr.io/groups_service:release-7.0.0_RC1_e82e95d_3"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /service/health
              port: 9000
            initialDelaySeconds: 15
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /service/health
              port: 9000
            initialDelaySeconds: 15
            periodSeconds: 15
          ports:
            - name: http
              containerPort: 9000
          resources:
            limits:
              cpu: 1
              memory: 1G
            requests:
              cpu: 100m
              memory: 100M
          securityContext:
            {}
          env:
          - name: sunbird_sso_publickey
            valueFrom:
              configMapKeyRef:
                name: keycloak-kids-keys
                key: KEYCLOAK_PUBLIC_KEY
          envFrom:
          - configMapRef:
              name: groups-env
          volumeMounts:
          - name: config
            mountPath: /config
          - name: keys
            mountPath: /keys/
      volumes:
      - name: env
        configMap:
          name: groups-env
      - name: config
        configMap:
          name: groups
      - name: keys
        projected:
          sources:
          - configMap:
              name: groups-access-keys
          - configMap:
              name: keycloak-key
---
# Source: learnbb/charts/keycloak/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: keycloak-0.1.0
  annotations:
    helm.sh/hook-weight: "-3"
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: keycloak
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keycloak
      annotations:
        checksum/config: 2a1e0fc98b8be9c588069425727f872cb8cb72ce9b015b0f73ca7ccd074a0c4d
    spec:
      serviceAccountName: keycloak
      securityContext:
        {}
      containers:
        - name: keycloak
          image: "keshavprasad/keycloak:7.0.1"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /auth
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 15
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /auth
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 15
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
            - name: admin
              containerPort: 9990
          resources:
            {}
          securityContext:
            {}
          envFrom:
          - configMapRef:
              name: keycloak-env
          volumeMounts:
          - name: config
            mountPath: /config
      volumes:
      - name: env
        configMap:
          name: keycloak-env
      - name: config
        configMap:
          name: keycloak
---
# Source: learnbb/charts/lms/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lms
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: lms
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: lms-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: lms
  template:
    metadata:
      labels:
        app.kubernetes.io/name: lms
      annotations:
        checksum/config: c4f2dff8a5084251e3a41b6a158b477cc72aec81697917432043d49298c4b10f
    spec:
      serviceAccountName: lms
      securityContext:
        {}
      containers:
        - name: lms
          image: "sunbirded.azurecr.io/lms_service:release-7.0.0_RC2_d14e96b_32"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9000
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            {}
          env:
          - name: sunbird_sso_publickey
            valueFrom:
              configMapKeyRef:
                name: keycloak-kids-keys
                key: KEYCLOAK_PUBLIC_KEY
          envFrom:
          - configMapRef:
              name: lms-env
          volumeMounts:
          - name: config
            mountPath: /home/sunbird/lms/lms-service-1.0-SNAPSHOT/config
          - name: keys
            mountPath: /keys/
        - args:
          - envoy
          - --config-path
          - /config/config.yaml
          env:
          - name: ENVOY_UID
            value: "1111"
          image: envoyproxy/envoy:v1.20.0
          imagePullPolicy: IfNotPresent
          name: envoy
          livenessProbe:
            
            failureThreshold: 2
            httpGet:
              path: /ready
              port: 10000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            
            failureThreshold: 2
            httpGet:
              path: /ready
              port: 10000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /config
              name: envoy-config
              readOnly: true
        - command: ["/bin/sh", "-c"]
          args:
          - |
            KID=$(cat /keys/KEYCLOAK_PUBLIC_KEY_KID) && PUBLIC_KEY=$(cat /keys/KEYCLOAK_PUBLIC_KEY) && \
            PUBLIC_KEY_PEM=$(echo "$PUBLIC_KEY" | sed -e 's/.\{64\}/&\\\\n/g' -e '1s/^/-----BEGIN PUBLIC KEY-----\\\\n/' -e '$s/$/\\\\n-----END PUBLIC KEY-----/') && \
            mkdir /policies && cp -Lr /opa-policies/*.rego /policies && \
            sed -i "s|KEYCLOAK_KID|$KID|g" /policies/common.rego && \
            sed -i "s|KEYCLOAK_PUBLIC_KEY|$PUBLIC_KEY_PEM|g" /policies/common.rego && \
            /app/opa run --server /policies \
              --addr=localhost:8181 \
              --diagnostic-addr=0.0.0.0:8282 \
              --set=plugins.envoy_ext_authz_grpc.addr=:9191 \
              --set=plugins.envoy_ext_authz_grpc.path=main/allow \
              --set=decision_logs.plugin=print_decision_logs_on_failure \
              --set=plugins.print_decision_logs_on_failure.stdout=true \
              --log-level=error \
              --ignore=.*
          image: sunbirded.azurecr.io/opa:0.34.2-envoy
          imagePullPolicy: IfNotPresent
          name: opa
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health?plugins
              port: 8282
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health?plugins
              port: 8282
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /opa-policies
              name: opa-policy
              readOnly: true
            - name: keycloak-key
              mountPath: /keys/
      initContainers:
        - args:
          - -p
          - "9999"
          - -u
          - "1111"
          - -w
          - "8282,10000"
          image: openpolicyagent/proxy_init:v5
          imagePullPolicy: IfNotPresent
          name: proxy-init
          resources:
            
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            runAsNonRoot: false
            runAsUser: 0
      volumes:
      - name: env
        configMap:
          name: lms-env
      - name: config
        configMap:
          name: lms
      - name: envoy-config
        configMap:
          name: lms-envoy
      - name: opa-policy
        configMap:
          name: lms-opa
      - name: keycloak-key
        configMap:
          name: keycloak-kids-keys
      - name: keys
        projected:
          sources:
          - configMap:
              name: lms-access-keys
          - configMap:
              name: keycloak-key
---
# Source: learnbb/charts/neo4j/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: neo4j
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: neo4j
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: neo4j-0.1.0
  annotations:
    helm.sh/hook-weight: "-5"
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: neo4j
  template:
    metadata:
      labels:
        app.kubernetes.io/name: neo4j
      annotations:
        checksum/config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      serviceAccountName: neo4j
      securityContext:
        null
      containers:
        - name: neo4j
          image: "sunbirded.azurecr.io/neo4j:3.3.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: NEO4J_dbms_security_auth__enabled
              value: "false"
          ports:
            - name: cypher-port
              containerPort: 7474
            - name: bolt-port-1
              containerPort: 7687
            - name: bolt-port-2
              containerPort: 8687
          resources:
            requests:
              cpu: "0.5"
              memory: 2Gi
          securityContext:
            null
          volumeMounts:
          - name: shared-data
            mountPath: /var/lib/neo4j/logs/plugins/txn-handler
          - name: neo4j-data
            mountPath: "/data"
        - name: logstash
          image: logstash:6.8.21
          imagePullPolicy: Always
          volumeMounts:
            - name: config
              mountPath: /usr/share/logstash/pipeline/logstash.conf
              subPath: logstash.conf
            - name: shared-data
              mountPath: /txn-handler
      volumes:
      - name: config
        configMap:
          name: logstash-config
          items:
          - key: logstash.conf
            path: logstash.conf
      - name: shared-data
        emptyDir: {}
      - name: neo4j-data
        persistentVolumeClaim:
          claimName: neo4j-claim
---
# Source: learnbb/charts/notification/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: notification
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: notification-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: notification
  template:
    metadata:
      labels:
        app.kubernetes.io/name: notification
      annotations:
        checksum/config: d66fa09283e7b0e3bc4da6a8898087ac071274546837dfa38d829dce4b861c2f
    spec:
      serviceAccountName: notification
      securityContext:
        {}
      containers:
        - name: notification
          image: "sunbirded.azurecr.io/notification_service:release-7.0.0_RC4_db7555c_10"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9000
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            {}
          env:
          - name: sunbird_sso_publickey
            valueFrom:
              configMapKeyRef:
                name: keycloak-kids-keys
                key: KEYCLOAK_PUBLIC_KEY
          envFrom:
          - configMapRef:
              name: notification-env
          volumeMounts:
          - name: config
            mountPath: /config
          - name: keys
            mountPath: /keys/
        - args:
          - envoy
          - --config-path
          - /config/config.yaml
          env:
          - name: ENVOY_UID
            value: "1111"
          image: envoyproxy/envoy:v1.20.0
          imagePullPolicy: IfNotPresent
          name: envoy
          livenessProbe:
            
            failureThreshold: 2
            httpGet:
              path: /ready
              port: 10000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            
            failureThreshold: 2
            httpGet:
              path: /ready
              port: 10000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /config
              name: envoy-config
              readOnly: true
        - command: ["/bin/sh", "-c"]
          args:
          - |
            KID=$(cat /keys/KEYCLOAK_PUBLIC_KEY_KID) && PUBLIC_KEY=$(cat /keys/KEYCLOAK_PUBLIC_KEY) && \
            PUBLIC_KEY_PEM=$(echo "$PUBLIC_KEY" | sed -e 's/.\{64\}/&\\\\n/g' -e '1s/^/-----BEGIN PUBLIC KEY-----\\\\n/' -e '$s/$/\\\\n-----END PUBLIC KEY-----/') && \
            mkdir /policies && cp -Lr /opa-policies/*.rego /policies && \
            sed -i "s|KEYCLOAK_KID|$KID|g" /policies/common.rego && \
            sed -i "s|KEYCLOAK_PUBLIC_KEY|$PUBLIC_KEY_PEM|g" /policies/common.rego && \
            /app/opa run --server /policies \
              --addr=localhost:8181 \
              --diagnostic-addr=0.0.0.0:8282 \
              --set=plugins.envoy_ext_authz_grpc.addr=:9191 \
              --set=plugins.envoy_ext_authz_grpc.path=main/allow \
              --set=decision_logs.plugin=print_decision_logs_on_failure \
              --set=plugins.print_decision_logs_on_failure.stdout=true \
              --log-level=error \
              --ignore=.*
          image: sunbirded.azurecr.io/opa:0.34.2-envoy
          imagePullPolicy: IfNotPresent
          name: opa
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health?plugins
              port: 8282
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health?plugins
              port: 8282
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /opa-policies
              name: opa-policy
              readOnly: true
            - name: keycloak-key
              mountPath: /keys/
      initContainers:
        - args:
          - -p
          - "9999"
          - -u
          - "1111"
          - -w
          - "8282,10000"
          image: openpolicyagent/proxy_init:v5
          imagePullPolicy: IfNotPresent
          name: proxy-init
          resources:
            
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            runAsNonRoot: false
            runAsUser: 0
      volumes:
      - name: env
        configMap:
          name: notification-env
      - name: config
        configMap:
          name: notification
      - name: envoy-config
        configMap:
          name: notification-envoy
      - name: opa-policy
        configMap:
          name: notification-opa
      - name: keycloak-key
        configMap:
          name: keycloak-kids-keys
      - name: keys
        projected:
          sources:
          - configMap:
              name: notification-access-keys
          - configMap:
              name: keycloak-key
---
# Source: learnbb/charts/print/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: learnbb-print
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: print
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: print-0.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: print
  template:
    metadata:
      labels:
        app.kubernetes.io/name: print
      annotations:
        checksum/config: 17028c1f93578510b558bc9bc2fc7e61a934e398e622209e3b6c736c4e4c5bcf
    spec:
      serviceAccountName: learnbb-print
      securityContext:
        null
      containers:
        - name: print
          image: "sunbirded.azurecr.io/print-service:release-3.1.0_f9a608c"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 5000
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            {}
          envFrom:
          - configMapRef:
              name: learnbb-print-env
          volumeMounts:
          - name: config
            mountPath: /config
      volumes:
      - name: env
        configMap:
          name: learnbb-print-env
      - name: config
        configMap:
          name: learnbb-print
---
# Source: learnbb/charts/registry/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: registry
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: registry-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: registry
  template:
    metadata:
      labels:
        app.kubernetes.io/name: registry
      annotations:
        checksum/config: 813a25b29059348c4a1887d9084fabade9676fc5046193f83eb97e0da664a296
    spec:
      serviceAccountName: registry
      securityContext:
        null
      initContainers:
        - name: wait-for-elasticsearch
          image: curlimages/curl:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              while true; do
                status=$(curl --silent --location "http://elasticsearch:9200/_cluster/health" | grep -o '"status":"[^"]*' | grep -o '[^"]*$');
                status=$(echo $status | tr '[:upper:]' '[:lower:]');
                if [[ "$status" == "green" || "$status" == "yellow" ]]; then
                  echo "Elasticsearch is healthy";
                  break;
                else
                  echo "Elasticsearch is not reachable, retrying..."
                  sleep 5;
                fi;
              done
      containers:
        - name: registry
          image: "sunbirded.azurecr.io/sunbird-rc-core:release-5.1.0_ece7ed3_14"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8081
          resources:
            limits:
              cpu: 1
              memory: 2G
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            null
          envFrom:
          - configMapRef:
              name: registry-env
          volumeMounts:
          - name: config
            mountPath: /home/sunbirdrc/config/public/_schemas
      volumes:
      - name: env
        configMap:
          name: registry-env
      - name: config
        configMap:
          name: registry
---
# Source: learnbb/charts/userorg/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: userorg
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: userorg
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: userorg-0.1.0
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: userorg
  template:
    metadata:
      labels:
        app.kubernetes.io/name: userorg
      annotations:
        checksum/config: a1d5b7e9fd67cd557b6aad80967b5e1233eeb8d6eee521a209de15949508cc60
    spec:
      serviceAccountName: userorg
      securityContext:
        {}
      containers:
        - name: userorg
          image: "sunbirded.azurecr.io/userorg-service:release-7.0.0_RC5_0d513be_31"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9000
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            {}
          env:
          - name: sunbird_sso_publickey
            valueFrom:
              configMapKeyRef:
                name: keycloak-kids-keys
                key: KEYCLOAK_PUBLIC_KEY
          envFrom:
          - configMapRef:
              name: userorg-env
          volumeMounts:
          - name: config
            mountPath: /home/sunbird/userorg-service-1.0-SNAPSHOT/config
          - name: keys
            mountPath: /keys/
        - args:
          - envoy
          - --config-path
          - /config/config.yaml
          env:
          - name: ENVOY_UID
            value: "1111"
          image: envoyproxy/envoy:v1.20.0
          imagePullPolicy: IfNotPresent
          name: envoy
          livenessProbe:
            
            failureThreshold: 2
            httpGet:
              path: /ready
              port: 10000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            
            failureThreshold: 2
            httpGet:
              path: /ready
              port: 10000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /config
              name: envoy-config
              readOnly: true
        - command: ["/bin/sh", "-c"]
          args:
          - |
            KID=$(cat /keys/KEYCLOAK_PUBLIC_KEY_KID) && PUBLIC_KEY=$(cat /keys/KEYCLOAK_PUBLIC_KEY) && \
            PUBLIC_KEY_PEM=$(echo "$PUBLIC_KEY" | sed -e 's/.\{64\}/&\\\\n/g' -e '1s/^/-----BEGIN PUBLIC KEY-----\\\\n/' -e '$s/$/\\\\n-----END PUBLIC KEY-----/') && \
            mkdir /policies && cp -Lr /opa-policies/*.rego /policies && \
            sed -i "s|KEYCLOAK_KID|$KID|g" /policies/common.rego && \
            sed -i "s|KEYCLOAK_PUBLIC_KEY|$PUBLIC_KEY_PEM|g" /policies/common.rego && \
            /app/opa run --server /policies \
              --addr=localhost:8181 \
              --diagnostic-addr=0.0.0.0:8282 \
              --set=plugins.envoy_ext_authz_grpc.addr=:9191 \
              --set=plugins.envoy_ext_authz_grpc.path=main/allow \
              --set=decision_logs.plugin=print_decision_logs_on_failure \
              --set=plugins.print_decision_logs_on_failure.stdout=true \
              --log-level=error \
              --ignore=.*
          image: sunbirded.azurecr.io/opa:0.34.2-envoy
          imagePullPolicy: IfNotPresent
          name: opa
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health?plugins
              port: 8282
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health?plugins
              port: 8282
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /opa-policies
              name: opa-policy
              readOnly: true
            - name: keycloak-key
              mountPath: /keys/
      initContainers:
        - args:
          - -p
          - "9999"
          - -u
          - "1111"
          - -w
          - "8282,10000"
          image: openpolicyagent/proxy_init:v5
          imagePullPolicy: IfNotPresent
          name: proxy-init
          resources:
            
            limits:
              cpu: "1"
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            runAsNonRoot: false
            runAsUser: 0
      volumes:
      - name: env
        configMap:
          name: userorg-env
      - name: config
        configMap:
          name: userorg
      - name: envoy-config
        configMap:
          name: userorg-envoy
      - name: opa-policy
        configMap:
          name: userorg-opa
      - name: keycloak-key
        configMap:
          name: keycloak-kids-keys
      - name: keys
        projected:
          sources:
          - configMap:
              name: userorg-access-keys
          - configMap:
              name: keycloak-key
---
# Source: learnbb/charts/cassandra/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cassandra
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: cassandra
    helm.sh/chart: cassandra-10.1.0
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "4.1.0"
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cassandra
      app.kubernetes.io/instance: learnbb
  serviceName: cassandra-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cassandra
        helm.sh/chart: cassandra-10.1.0
        app.kubernetes.io/instance: learnbb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "4.1.0"
    spec:
      
      serviceAccountName: cassandra
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: learnbb
                    app.kubernetes.io/name: cassandra
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: cassandra
          command:
            - bash
            - -ec
            - |
              # Node 0 is the password seeder
              if [[ $POD_NAME =~ (.*)-0$ ]]; then
                  echo "Setting node as password seeder"
                  export CASSANDRA_PASSWORD_SEEDER=yes
              else
                  # Only node 0 will execute the startup initdb scripts
                  export CASSANDRA_IGNORE_INITDB_SCRIPTS=1
              fi
              /opt/bitnami/scripts/cassandra/entrypoint.sh /opt/bitnami/scripts/cassandra/run.sh
          image: docker.io/bitnami/cassandra:3.11.13-debian-11-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CASSANDRA_CLUSTER_NAME
              value: cassandra
            - name: CASSANDRA_SEEDS
              value: "cassandra-0.cassandra-headless.sunbird.svc.cluster.local"
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cassandra
                  key: cassandra-password
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CASSANDRA_USER
              value: "cassandra"
            - name: CASSANDRA_NUM_TOKENS
              value: "256"
            - name: CASSANDRA_DATACENTER
              value: dc1
            - name: CASSANDRA_ENDPOINT_SNITCH
              value: SimpleSnitch
            - name: CASSANDRA_KEYSTORE_LOCATION
              value: "/opt/bitnami/cassandra/certs/keystore"
            - name: CASSANDRA_TRUSTSTORE_LOCATION
              value: "/opt/bitnami/cassandra/certs/truststore"
            - name: CASSANDRA_RACK
              value: rack1
            - name: CASSANDRA_TRANSPORT_PORT_NUMBER
              value: "7000"
            - name: CASSANDRA_JMX_PORT_NUMBER
              value: "7199"
            - name: CASSANDRA_CQL_PORT_NUMBER
              value: "9042"
            - name: CASSANDRA_AUTHENTICATOR
              value: AllowAllAuthenticator
            - name: CASSANDRA_AUTHORIZER
              value: AllowAllAuthorizer
          envFrom:
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  nodetool info | grep "Native Transport active: true"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  nodetool status | grep -E "^UN\\s+${POD_IP}"
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 5
          lifecycle:
            preStop:
              exec:
                command:
                  - bash
                  - -ec
                  - nodetool drain
          ports:
            - name: intra
              containerPort: 7000
            - name: tls
              containerPort: 7001
            - name: jmx
              containerPort: 7199
            - name: cql
              containerPort: 9042
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/cassandra
            
      volumes:
        - name: metrics-conf
          configMap:
            name: cassandra-metrics-conf
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: cassandra
          app.kubernetes.io/instance: learnbb
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "25Gi"
---
# Source: learnbb/charts/elasticsearch/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: elasticsearch
    helm.sh/chart: elasticsearch-19.5.4
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "8.5.2"
    app.kubernetes.io/component: master
    ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
    app: master
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/instance: learnbb
      app.kubernetes.io/component: master
  serviceName: elasticsearch-master-hl
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: elasticsearch
        helm.sh/chart: elasticsearch-19.5.4
        app.kubernetes.io/instance: learnbb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "8.5.2"
        app.kubernetes.io/component: master
        ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
        app: master
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
        ## Image that performs the sysctl operation to modify Kernel settings (needed sometimes to avoid boot errors)
        - name: sysctl
          image: docker.io/bitnami/bitnami-shell-archived:11-debian-11-r54
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:6.8.23
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "no"
            - name: ELASTICSEARCH_NODE_ROLES
              value: "master"
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: "elastic"
            - name: ELASTICSEARCH_CLUSTER_HOSTS
              value: "elasticsearch-master-hl.sunbird.svc.cluster.local,"
            - name: ELASTICSEARCH_TOTAL_NODES
              value: "1"
            - name: ELASTICSEARCH_CLUSTER_MASTER_HOSTS
              value: elasticsearch-master-0 
            - name: ELASTICSEARCH_MINIMUM_MASTER_NODES
              value: "1"
            - name: ELASTICSEARCH_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).elasticsearch-master-hl.sunbird.svc.cluster.local"
            - name: ELASTICSEARCH_HEAP_SIZE
              value: "2G"
          ports:
            - name: rest-api
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 2Gi
          volumeMounts:
            - name: data
              mountPath: /bitnami/elasticsearch/data
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: "data"
        annotations:
          helm.sh/hook-weight: "-5"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "25Gi"
---
# Source: learnbb/charts/kafka/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: sunbird
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-11.0.2
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.8.0"
    app.kubernetes.io/component: zookeeper
    role: zookeeper
spec:
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: learnbb
      app.kubernetes.io/component: zookeeper
  serviceName: zookeeper-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: zookeeper
        helm.sh/chart: zookeeper-11.0.2
        app.kubernetes.io/instance: learnbb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "3.8.0"
        app.kubernetes.io/component: zookeeper
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: learnbb
                    app.kubernetes.io/name: zookeeper
                    app.kubernetes.io/component: zookeeper
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.8.0-debian-11-r65
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ZOO_DATA_LOG_DIR
              value: ""
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_PRE_ALLOC_SIZE
              value: "65536"
            - name: ZOO_SNAPCOUNT
              value: "100000"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr, mntr, ruok"
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZOO_SERVERS
              value: zookeeper-0.zookeeper-headless.sunbird.svc.cluster.local:2888:3888::1 
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_ENABLE_QUORUM_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "ERROR"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          volumeMounts:
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/zookeeper
      volumes:
        - name: scripts
          configMap:
            name: zookeeper-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "2Gi"
---
# Source: learnbb/charts/kafka/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: "sunbird"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-20.0.2
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.3.1"
    app.kubernetes.io/component: kafka
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: learnbb
      app.kubernetes.io/component: kafka
  serviceName: kafka-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka
        helm.sh/chart: kafka-20.0.2
        app.kubernetes.io/instance: learnbb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "3.3.1"
        app.kubernetes.io/component: kafka
      annotations:
    spec:
      
      hostNetwork: false
      hostIPC: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: learnbb
                    app.kubernetes.io/name: kafka
                    app.kubernetes.io/component: kafka
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      serviceAccountName: kafka
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:3.3.1-debian-11-r25
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "zookeeper"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INTERNAL"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT"
            - name: KAFKA_CFG_LISTENERS
              value: "INTERNAL://:9093,CLIENT://:9092"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "INTERNAL://$(MY_POD_NAME).kafka-headless.sunbird.svc.cluster.local:9093,CLIENT://$(MY_POD_NAME).kafka-headless.sunbird.svc.cluster.local:9092"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_ZOOKEEPER_PROTOCOL
              value: PLAINTEXT
            - name: KAFKA_VOLUME_DIR
              value: "/bitnami/kafka"
            - name: KAFKA_LOG_DIR
              value: "/opt/bitnami/kafka/logs"
            - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              value: "false"
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1024m -Xms1024m"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
              value: "10000"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
              value: "1000"
            - name: KAFKA_CFG_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS
              value: "300000"
            - name: KAFKA_CFG_LOG_RETENTION_HOURS
              value: "168"
            - name: KAFKA_CFG_MESSAGE_MAX_BYTES
              value: "1000012"
            - name: KAFKA_CFG_LOG_SEGMENT_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_DIRS
              value: "/bitnami/kafka/data"
            - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_CFG_NUM_IO_THREADS
              value: "8"
            - name: KAFKA_CFG_NUM_NETWORK_THREADS
              value: "3"
            - name: KAFKA_CFG_NUM_PARTITIONS
              value: "1"
            - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
              value: "1"
            - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
              value: "104857600"
            - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: "6000"
            - name: KAFKA_CFG_AUTHORIZER_CLASS_NAME
              value: ""
            - name: KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND
              value: "true"
            - name: KAFKA_CFG_SUPER_USERS
              value: "User:admin"
          ports:
            - name: kafka-client
              containerPort: 9092
            - name: kafka-internal
              containerPort: 9093
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: kafka-client
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: kafka-client
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: logs
              mountPath: /opt/bitnami/kafka/logs
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
      volumes:
        - name: scripts
          configMap:
            name: kafka-scripts
            defaultMode: 0755
        - name: logs
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "25Gi"
---
# Source: learnbb/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.3
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "11.14.0"
    app.kubernetes.io/component: primary
  annotations:
    reloader.stakater.com/auto: "true"
  namespace: sunbird
spec:
  serviceName: postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: learnbb
      role: primary
  template:
    metadata:
      name: postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.16.3
        app.kubernetes.io/instance: learnbb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "11.14.0"
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: learnbb
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r49
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: postgresql-password
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "25Gi"
---
# Source: learnbb/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-master
  namespace: "sunbird"
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.1
    helm.sh/chart: redis-18.1.1
    app.kubernetes.io/component: master
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: learnbb
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: redis-headless
  updateStrategy:
    type: RollingUpdate
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: learnbb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.1
        helm.sh/chart: redis-18.1.1
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: a6cd4d8ca703f5523de38911a891477edfca9c876e9b0493ba486860eb9ed34e
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: redis
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: learnbb
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.1-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: learnbb
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "25Gi"
---
# Source: learnbb/charts/redis/templates/replicas/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-replicas
  namespace: "sunbird"
  labels:
    app.kubernetes.io/instance: learnbb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.1
    helm.sh/chart: redis-18.1.1
    app.kubernetes.io/component: replica
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/instance: learnbb
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: replica
  serviceName: redis-headless
  updateStrategy:
    type: RollingUpdate
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: learnbb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.1
        helm.sh/chart: redis-18.1.1
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: a6cd4d8ca703f5523de38911a891477edfca9c876e9b0493ba486860eb9ed34e
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: redis
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: learnbb
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: replica
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.1-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: replica
            - name: REDIS_MASTER_HOST
              value: redis-master-0.redis-headless.sunbird.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: learnbb
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: learnbb/charts/keycloak-kids-keys/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: keycloak-kids-keys
  annotations:
    "helm.sh/hook-weight": "-2"
spec:
  template:
    spec:
      serviceAccountName: keycloak-kids-keys
      containers:
        - name: keycloak-kids-keys
          command:
          - /bin/bash
          - -c
          args:
          - |
            sleep 30
            /usr/local/bin/execute_query.sh
          image: "sunbirded.azurecr.io/keycloak-kids-keys:0.1.5"
          imagePullPolicy: IfNotPresent
          envFrom:
          - configMapRef:
              name: keycloak-kids-keys-env
      restartPolicy: Never
  backoffLimit: 30
---
# Source: learnbb/templates/provision/cassandra.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: learnbb-cassandra-migration-job
  labels:
    app: learnbb-cassandra-migration
    scope: provisioning
  annotations:
    helm.sh/hook-weight: "-4"
spec:
  template:
    metadata:
      labels:
        app: learnbb-cassandra-migration
    spec:
      restartPolicy: Never
      initContainers:
      - name: wait-for-cassandra
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - "timeout 120 sh -c 'until nc -z cassandra 9042; do echo waiting for cassandra; 10; done'"
      containers:
      - name: migration
        image: maven
        imagePullPolicy: IfNotPresent
        command: ['bash', '-c']
        args:
        - |
          cd /tmp/
          export sunbird_cassandra_host=cassandra
          export sunbird_cassandra_port=9042
          
          
          
          
          export migration_version=release-5.3.0


          cwd=$PWD

          # Download the migration files
          git clone --filter=blob:none --no-checkout https://github.com/Sunbird-Lern/sunbird-utils --branch=$migration_version --depth 1
          cd sunbird-utils
          git sparse-checkout init --cone
          git sparse-checkout set sunbird-cassandra-migration/cassandra-migration/src/main/resources/db/migration/cassandra
          git checkout
          cd sunbird-cassandra-migration/cassandra-migration/src/main/resources/db/migration/
          wget https:////artifacts-/cassandra-migration-0.0.1-SNAPSHOT-jar-with-dependencies.jar
          for folder in ./cassandra/*/; do
            folder_name=$(basename "$folder");
            echo "$folder_name"
            export sunbird_cassandra_migration_location="filesystem:cassandra/$folder_name"
            export sunbird_cassandra_keyspace=$folder_name
            java -cp "cassandra-migration-0.0.1-SNAPSHOT-jar-with-dependencies.jar" com.contrastsecurity.cassandra.migration.utils.MigrationScriptEntryPoint;
          done
  backoffLimit: 30
---
# Source: learnbb/templates/provision/es.yaml
# Remove composte index from here.
apiVersion: batch/v1
kind: Job
metadata:
  name: learnbb-elasticsearch-migration-job
  labels:
    app: learnbb-elasticsearch-migration
    scope: provisioning
  annotations:
    helm.sh/hook-weight: "-4"
spec:
  template:
    metadata:
      labels:
        app: learnbb-elasticsearch-migration
    spec:
      restartPolicy: Never
      initContainers:
      - name: wait-for-elasticsearch
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - "timeout 120 sh -c 'until nc -z elasticsearch 9200; do echo waiting for elasticsearch; sleep 10; done'"
      containers:
      - name: migration
        image: maven # or any other image that has curl and java
        imagePullPolicy: IfNotPresent
        command: ['bash', '-c']
        args:
        - |
          set -x
          cd /tmp/
          devops_branch=release-7.0.0

          # Downloding the indexes
          cwd=$PWD
          rm -rf /tmp/sunbird-devops/ || true

          # Download the migration files
          git clone --filter=blob:none --no-checkout https://github.com/project-sunbird/sunbird-devops --branch=$devops_branch --depth 1
          cd sunbird-devops
          git sparse-checkout init --cone
          git sparse-checkout set ansible/roles/es-mapping/files
          git checkout
          cd ansible/roles/es-mapping/


          #### Creating the new indices:
          cd files/indices
          indices_files=$(ls -l | awk 'NR>1{print $9}' | awk -F"." '{print $1}' | tr "\n" " ")
          for file in ${indices_files[@]}
          do
                  echo "Applying ${file}.json"
                  curl  -X PUT http://elasticsearch:9200/${file} -H 'Content-Type: application/json' -d @${file}.json
          done

          #### Updating the mapping for newly created indices:

          echo "#################################################"

          cd ../mappings

          # Remove autocreated indexes.
          # automatically gets created by search-indexer
          # /cs mapping has conflict with _doc map created below

          echo "Applying compositesearch-mapping.json"
          curl  -X PUT http://elasticsearch:9200/compositesearch/_mapping/cs -H 'Content-Type: application/json' -d @compositesearch-mapping.json
          rm -rf compositesearch-mapping.json

          #mapping_files=$(ls -l | awk 'NR>1{print $9}' | awk -F"-" '{print $1}' | tr "\n" " ")
          mapping_files=$(ls -l | awk 'NR>1{print $9}' | awk -F"." '{print $1}' | tr "\n" " " | sed 's/-mapping//g')

          for file in ${mapping_files[@]}
          do
                  echo "Applying ${file}-mapping.json"
                  curl  -X PUT http://elasticsearch:9200/${file}/_mapping/_doc -H 'Content-Type: application/json' -d @${file}-mapping.json
          done

          #### Adding ingest pipeline for newly created indices:

          echo "#################################################"

          cd ../pipelines
          #mapping_files=$(ls -l | awk 'NR>1{print $9}' | awk -F"-" '{print $1}' | tr "\n" " ")
          pipeline_files=$(ls -l | awk 'NR>1{print $9}' | awk -F"." '{print $1}' | tr "\n" " " | sed 's/-ingest-pipeline//g')

          for file in ${pipeline_files[@]}
          do
                  curl  -X PUT http://elasticsearch:9200/_ingest/pipeline/${file}-ingest-pipeline -H 'Content-Type: application/json' -d @${file}-ingest-pipeline.json
          done
  backoffLimit: 4
---
# Source: learnbb/templates/provision/postgres.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: learnbb-postgres-migration-job
  labels:
    app: learnbb-postgres-migration
    scope: provisioning
  annotations:
    helm.sh/hook-weight: "-4"
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: learnbb-postgres-migration
    spec:
      restartPolicy: Never
      volumes:
      - name: shared-volume
        emptyDir: {}
      initContainers:
      - name: wait-for-postgres
        image: alpine/curl
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c']
        args:
        - |
          "timeout 120 sh -c 'until nc -z postgresql 5432; do echo waiting for postgres; 10; done'"
          # Downloading migration files
          set -e
          export devops_branch=release-7.0.0
          apk add --no-cache git
          cd /opt/shared-volume
          git clone --filter=blob:none --no-checkout https://github.com/project-sunbird/sunbird-devops --branch=$devops_branch --depth 1
          cd sunbird-devops
          git sparse-checkout init --cone
          git sparse-checkout set ansible/roles/postgresql-data-update/templates
          git checkout
        volumeMounts:
          - name: shared-volume
            mountPath: /opt/shared-volume
      containers:
      - name: migration
        image: bitnami/postgresql:11.14.0-debian-10-r49
        imagePullPolicy: IfNotPresent
        command: ['bash', '-c']
        securityContext:
          runAsUser: 0
        volumeMounts:
          - name: shared-volume
            mountPath: /opt/shared-volume
        args:
        - |
            set -e
            export PGHOST=postgresql
            export PGPORT=5432
            export PGUSER=postgres
            export PGPASSWORD=postgres
            # Check if the database exists
            if ! psql -lqt | cut -d \| -f 1 | grep -qw keycloak; then
              # Database doesn't exist, create it
              echo "SELECT 'CREATE DATABASE \"keycloak\"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '\"keycloak\"')\gexec" | psql
            else
                echo "Database keycloak already exists."
            fi
            # Check if the database exists
            if ! psql -lqt | cut -d \| -f 1 | grep -qw quartz; then
              # Database doesn't exist, create it
              echo "SELECT 'CREATE DATABASE \"quartz\"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '\"quartz\"')\gexec" | psql
            else
                echo "Database quartz already exists."
            fi
            # Check if the database exists
            if ! psql -lqt | cut -d \| -f 1 | grep -qw userorg; then
              # Database doesn't exist, create it
              echo "SELECT 'CREATE DATABASE \"userorg\"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '\"userorg\"')\gexec" | psql
            else
                echo "Database userorg already exists."
            fi
            # Check if the database exists
            if ! psql -lqt | cut -d \| -f 1 | grep -qw enc-keys; then
              # Database doesn't exist, create it
              echo "SELECT 'CREATE DATABASE \"enc-keys\"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '\"enc-keys\"')\gexec" | psql
            else
                echo "Database enc-keys already exists."
            fi
            # Check if the database exists
            if ! psql -lqt | cut -d \| -f 1 | grep -qw registry; then
              # Database doesn't exist, create it
              echo "SELECT 'CREATE DATABASE \"registry\"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '\"registry\"')\gexec" | psql
            else
                echo "Database registry already exists."
            fi

            cd /opt/shared-volume/sunbird-devops/ansible/roles/postgresql-data-update

            cd templates
            for sql_file in *.sql; do
                echo "Applying $sql_file..."
                psql -f "$sql_file"
            done
            echo "PostgreSQL setup completed."
  backoffLimit: 30
---
# Source: learnbb/charts/druid-raw-cluster/templates/historical_hpa.yaml
# apiVersion: autoscaling/v2beta2
# kind: HorizontalPodAutoscaler
# metadata:
#   name: "sunbird-historicals"
#   namespace:  
# spec:
#   scaleTargetRef:
#     apiVersion: apps/v1
#     kind: StatefulSet
#     name: "sunbird--historicals"
#   # behavior:
#   #   scaleUp:
#   #     stabilizationWindowSeconds: 10
#   #   scaleDown:
#   #     stabilizationWindowSeconds: 20
#   minReplicas: 1
#   maxReplicas: 2
#   metrics:
#   - type: Object
#     object:
#       metric:
#         name: pv_used_percentage
#       describedObject:
#         apiVersion: v1
#         kind: persistentvolumeclaim
#         name: "historical-volume-sunbird--historicals-0"
#       target:
#         type: Utilization
#         averageValue: 20
---
# Source: learnbb/charts/druid-raw-cluster/templates/druid_statefulset.yaml
# This spec only works on a single node kubernetes cluster(e.g. typical k8s cluster setup for dev using kind/minikube or single node AWS EKS cluster etc)
# as it uses local disk as "deep storage".
#
apiVersion: "druid.apache.org/v1alpha1"
kind: "Druid"
metadata:
  name: "raw"
spec:
  image: "apache/druid:25.0.0"
  serviceAccount: "obsrv-sa"
  startScript: /druid.sh
  # podLabels:
  #   release: alpha
  # podAnnotations:
  #   dummykey: dummyval
  readinessProbe:
        httpGet:
          path: /status/health
          port: 8088
  securityContext:
    fsGroup: 1000
    runAsGroup: 1000
    runAsUser: 1000
  services:
    - spec:
        type: ClusterIP
        clusterIP: None
  commonConfigMountPath: "/opt/druid/conf/druid/cluster/_common"
  jvm.options: |-
    -server
    -XX:+UseG1GC
    -XX:+ExitOnOutOfMemoryError
    -Duser.timezone=UTC
    -Dfile.encoding=UTF-8
    -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
    -Djava.io.tmpdir=/var/tmp
  log4j.config: |-
    <?xml version="1.0" encoding="UTF-8" ?>
    <Configuration status="WARN">
        <Appenders>
            <Console name="Console" target="SYSTEM_OUT">
                <PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/>
            </Console>
        </Appenders>
        <Loggers>
            <Root level="info">
                <AppenderRef ref="Console"/>
            </Root>
        </Loggers>
    </Configuration>
  common.runtime.properties: |
    druid.extensions.loadList=["postgresql-metadata-storage", "druid-kafka-indexing-service", "druid-azure-extensions", "druid-google-extensions"]
    # druid.extensions.directory=/opt/druid/extensions
    # Logging
    # Log all runtime properties on startup. Disable to avoid logging properties on startup:
    druid.startup.logging.logProperties=true
    # Zookeeper
    druid.zk.service.host= zookeeper
    druid.zk.paths.base=/druid
    # Metadata storage
    # For PostgreSQL:
    druid.metadata.storage.type=postgresql
    druid.metadata.storage.connector.connectURI= jdbc:postgresql://postgresql:5432/druid_raw
    druid.metadata.storage.connector.user=postgres
    druid.metadata.storage.connector.password=postgres

    # Deep storage
    druid.storage.type=azure
    # AWS
    # Azure
    druid.azure.account = 
    druid.azure.key = 
    druid.azure.container = /reports
    #druid.storage.storageDirectory = /data
    druid.storage.disableAcl=true


    # # Indexing service logs
    # # For local disk (only viable in a cluster if this is a network mount):
    druid.indexer.logs.type={{ .Values.global.deep_store_type}}
    druid.indexer.logs.prefix=backups/druid/druid-task-logs
    druid.indexer.logs.disableAcl=true
    druid.indexer.logs.container=reports
    druid.indexer.logs.s3Bucket=/reports
    druid.indexer.logs.s3Prefix= backups/druid/druid-task-logs

    # Service discovery
    druid.selectors.indexing.serviceName=druid/overlord
    druid.selectors.coordinator.serviceName=druid/coordinator
    # Monitoring
    # druid.monitoring.monitors=["com.metamx.metrics.JvmMonitor","org.apache.druid.java.util.metrics.JvmMonitor"]
    # druid.emitter=composing
    # druid.emitter.composing.emitters=["logging"]
    # druid.emitter.logging.logLevel=INFOdruid.emitter.graphite.port=
    druid.emitter.graphite.hostname=
    druid.emitter.graphite.protocol=
    druid.emitter.graphite.eventConverter=# Storage type of double columns
    # ommiting this will lead to index double as float at the storage layer
    druid.indexing.doubleStorage=double
    #Writing query logs into file
    druid.request.logging.type=composing
    druid.request.logging.dir=/data/druid/log
    druid.javascript.enabled=true
    druid.sql.enable=true
  env:
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace

  nodes:
    brokers:
      # Optionally specify for running broker as Deployment
      kind: Deployment
      nodeType: "broker"
      druid.port: 8082
      nodeConfigMountPath: "/opt/druid/conf/druid/cluster/query/broker"
      podLabels:
        system.querying: "true"
      replicas: 1
      runtime.properties: |
        druid.service=druid/broker
        # HTTP server threads
        druid.broker.http.numConnections=5
        druid.server.http.numThreads=25
        # Processing threads and buffers
        druid.processing.buffer.sizeBytes=64MiB
        druid.processing.numThreads=1
        druid.processing.numMergeBuffers=1
        druid.javascript.enabled=true
        druid.sql.enable=true
      extra.jvm.options: |+
        -Xms1G
        -Xmx1G
        -XX:MaxDirectMemorySize=1G
      readinessProbe:
        httpGet:
          path: /status/health
          port: 8082

      # hpAutoscaler:
      #   maxReplicas: 2
      #   minReplicas: 1
      #   scaleTargetRef:
      #      apiVersion: apps/v1
      #      kind: StatefulSet
      #      name: druid-tiny-cluster-brokers
      #   metrics:
      #    - type: Resource
      #      resource:
      #        name: cpu
      #        target:
      #          type: Utilization
      #          averageUtilization: 50

      resources:
        limits:
          cpu: 200m
          memory: 1500Mi
        requests:
          cpu: 100m
          memory: 1024Mi

    coordinators:
      # Optionally specify for running coordinator as Deployment
      kind: Deployment
      nodeType: "coordinator"
      druid.port: 8081
      podLabels:
        system.querying: "true"
        system.ingestion: "true"
      nodeConfigMountPath: "/opt/druid/conf/druid/cluster/master/coordinator-overlord"
      replicas: 1
      runtime.properties: |
        druid.service=druid/coordinator
        druid.coordinator.startDelay=PT5M
        druid.coordinator.period=PT5M
        druid.coordinator.balancer.strategy=diskNormalized
        druid.coordinator.asOverlord.enabled=false
      extra.jvm.options: |-
        -Xms750M
        -Xmx750M
      readinessProbe:
        httpGet:
          path: /status/health
          port: 8081

      resources:
        limits:
          cpu: 250m
          memory: 1024Mi
        requests:
          cpu: 250m
          memory: 750Mi

    overlords:
      # Optionally specify for running coordinator as Deployment
      kind: Deployment
      nodeType: "overlord"
      druid.port: 8090
      nodeConfigMountPath: "/opt/druid/conf/druid/cluster/master/coordinator-overlord"
      replicas: 1
      podLabels:
        system.querying: "true"
        system.ingestion: "true"
      runtime.properties: |
        druid.service=druid/overlord
        druid.indexer.queue.startDelay=PT10M
        druid.indexer.runner.type=remote
        druid.indexer.storage.type=metadata
        # Additional parameters for minor compaction
        druid.indexer.tasklock.forceTimeChunkLock=false
      extra.jvm.options: |-
        -Xms512M
        -Xmx750M
      readinessProbe:
        httpGet:
          path: /status/health
          port: 8090

      resources:
        limits:
          cpu: 250m
          memory: 1024Mi
        requests:
          cpu: 250m
          memory: 750Mi

    historicals:
      nodeType: "historical"
      druid.port: 8084
      nodeConfigMountPath: "/opt/druid/conf/druid/cluster/data/historical"
      replicas: 1
      podLabels:
        system.querying: "true"
      readinessProbe:
        httpGet:
          path: /status/health
          port: 8084
      runtime.properties: |
        druid.service=druid/historical
        # HTTP server threads
        druid.server.http.numThreads=25
        # Processing threads and buffers
        druid.processing.buffer.sizeBytes=64MiB
        druid.processing.numThreads=2
        druid.processing.numMergeBuffers=2
        # Segmentstorage
        druid.segmentCache.locations=[{"path": "/druid/data/store", "maxSize": 10737418240}]
        druid.segmentCache.numLoadingThreads=4
        # Caching
        druid.historical.cache.useCache=false
        druid.historical.cache.populateCache=true
        druid.historical.cache.unCacheable=["select", "scan"]
        druid.cache.type=caffeine
        druid.cache.sizeInBytes=128MiB
        # druid.cache.expireAfter=3600000
      extra.jvm.options: |-
        -Xms512M
        -Xmx750M
        -XX:MaxDirectMemorySize=512M
      securityContext:
        fsGroup: 0
        runAsGroup: 0
        runAsUser: 0
      volumeMounts:
        - mountPath: /druid/data
          name: historical-volume
      volumeClaimTemplates:
        - metadata:
            name: historical-volume
            labels:
              system.querying: "true"
          spec:
            storageClassName: "managed-premium"
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 25Gi

      resources:
        limits:
          cpu: 1
          memory: 2048Mi
        requests:
          cpu: 750m
          memory: 512Mi

    # middlemanagers:
    #   nodeType: "middleManager"
    #   druid.port: 8091
    #   nodeConfigMountPath: "/opt/druid/conf/druid/cluster/data/middleManager"
    #   replicas: 1
    #   runtime.properties: |
    #     druid.service=druid/middlemanager
    #     # Number of tasks per middleManager
    #     druid.worker.capacity=2
    #     # Task launch parameters
    #     druid.indexer.runner.javaOpts=-server -Xms512m -Xmx512m -XX:+UseG1GC -XX:MaxGCPauseMillis=100
    #     druid.indexer.task.baseTaskDir=/druid/data/task
    #     # Peon properties
    #     druid.indexer.fork.property.druid.processing.buffer.sizeBytes=64M
    #     druid.indexer.fork.property.druid.processing.numThreads=2
    #     druid.indexer.fork.property.druid.server.http.numThreads=25
    #     #Additional Parameters
    #     druid.indexer.task.restoreTasksOnRestart=true
    #     druid.indexer.task.defaultHadoopCoordinates=[\"org.apache.hadoop:hadoop-client:2.8.3\"]
    #   extra.jvm.options: |+
    #     -Xmx750M
    #     -Xms750M
    #   # services:
    #   # - spec:
    #   #     clusterIP: None
    #   #     ports:
    #   #     - name: middlemanager-port
    #   #       port: 8091
    #   #       targetPort: 8091
    #   #     type: ClusterIP
    #   readinessProbe:
    #     initialDelaySeconds: 30
    #     httpGet:
    #       path: /status/health
    #       port: 8091

    #   securityContext:
    #     fsGroup: 0
    #     runAsUser: 0
    #     runAsGroup: 0
    #   volumeMounts:
    #      - mountPath: /druid/data
    #        name: middlemanager-volume
    #   volumeClaimTemplates:
    #   - metadata:
    #       name: middlemanager-volume
    #     spec:
    #       storageClassName: "managed-premium"
    #       accessModes:
    #         - ReadWriteOnce
    #       resources:
    #         requests:
    #           storage: 1G

    #   resources:
    #     requests:
    #       memory: 1Gi
    #       cpu: 256m
    #     limits:
    #       memory: 2Gi
    #       cpu: 1

    indexers:
      nodeType: "indexer"
      druid.port: 8091
      nodeConfigMountPath: "/opt/druid/conf/druid/cluster/data/indexer"
      replicas: 1
      podLabels:
        system.ingestion: "true"
      runtime.properties: |
        druid.service=druid/indexer
        # Number of tasks per indexer
        druid.worker.capacity=8
        # Task launch parameters
        # druid.indexer.runner.javaOpts=-server -Xms512m -Xmx512m -XX:+UseG1GC -XX:MaxGCPauseMillis=100
        druid.indexer.task.baseTaskDir=/druid/data/task
        # Merge jobs
        druid.worker.numConcurrentMerges=1
        # Processing resource properties
        # testing auto for sizeBytes
        druid.processing.buffer.sizeBytes=64M
        druid.worker.globalIngestionHeapLimitBytes=8589934592
        druid.processing.numThreads=2
        druid.processing.numMergeBuffers=1
        druid.server.http.numThreads=25
        #Additional Parameters
        druid.indexer.task.restoreTasksOnRestart=true
        druid.indexer.task.defaultHadoopCoordinates=[\"org.apache.hadoop:hadoop-client:2.8.3\"]
      extra.jvm.options: |-
        -Xms7g
        -Xmx9g
        -XX:MaxDirectMemorySize=2g
      readinessProbe:
        initialDelaySeconds: 60
        httpGet:
          path: /status/health
          port: 8091

      securityContext:
        fsGroup: 0
        runAsGroup: 0
        runAsUser: 0
      volumeMounts:
        - mountPath: /druid/data
          name: indexer-volume
      volumeClaimTemplates:
        - metadata:
            name: indexer-volume
            labels:
              system.ingestion: "true"
          spec:
            storageClassName: "managed-premium"
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 25Gi
      resources:
        limits:
          cpu: 200m
          memory: 11Gi
        requests:
          cpu: 200m
          memory: 10Gi

    routers:
      nodeType: "router"
      druid.port: 8888
      nodeConfigMountPath: "/opt/druid/conf/druid/cluster/query/router"
      replicas: 1
      podLabels:
        system.querying: "true"
        system.ingestion: "true"
      services:
        - spec:
            type: ClusterIP
            ports:
              - name: druidrouterport
                port: 8888
                targetPort: 8888
                protocol: TCP
      # services:
      #   - spec:
      #       type: ClusterIP
      #       ports:
      #       - name: druidrouterport
      #         port: 80
      #         targetPort: 8888
      #         protocol: TCP
      # ingressAnnotations:
      #   name: router-ingress
      #   nginx.ingress.kubernetes.io/rewrite-target: /$1
      # ingress:
      #   ingressClassName: nginx
      #   rules:
      #     - host: "*.nip.io"
      #       http:
      #         paths:
      #           - path: /
      #             pathType: Prefix
      #             backend:
      #               service:
      #                 name: druid-raw-routers
      #                 port:
      #                   name: druidrouterport

      runtime.properties: |
        druid.service=druid/router
        # druid.plaintextPort=8888
        # HTTP proxy
        druid.router.http.numConnections=25
        druid.router.http.readTimeout=PT10M
        druid.router.http.numMaxThreads=25
        druid.server.http.numThreads=25
        # Service discovery
        druid.router.defaultBrokerServiceName=druid/broker
        druid.router.coordinatorServiceName=druid/coordinator
        # Management proxy to coordinator / overlord: required for unified web console.
        druid.router.managementProxy.enabled=true
      extra.jvm.options: |-
        -Xms256M
        -Xmx512M
      readinessProbe:
        httpGet:
          path: /status/health
          port: 8888

      resources:
        limits:
          cpu: 512m
          memory: 1024Mi
        requests:
          cpu: 250m
          memory: 500Mi
---
# Source: learnbb/charts/certregistry/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: certregistry-servicemonitor
  labels:
    release: monitoring
spec:
  endpoints:
  - honorLabels: true
    interval: 30s
    path: /opa/metrics
    port: opa-metrics
    scheme: http
    scrapeTimeout: 10s
  - honorLabels: true
    interval: 30s
    path: /stats/prometheus
    port: envoy-metrics
    scheme: http
    scrapeTimeout: 10s
  jobLabel: certregistry
  selector:
    matchLabels:
      app.kubernetes.io/name: certregistry
---
# Source: learnbb/charts/lms/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: lms-servicemonitor
  labels:
    release: monitoring
spec:
  endpoints:
  - honorLabels: true
    interval: 30s
    path: /opa/metrics
    port: opa-metrics
    scheme: http
    scrapeTimeout: 10s
  - honorLabels: true
    interval: 30s
    path: /stats/prometheus
    port: envoy-metrics
    scheme: http
    scrapeTimeout: 10s
  jobLabel: lms
  selector:
    matchLabels:
      app.kubernetes.io/name: lms
---
# Source: learnbb/charts/notification/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: notification-servicemonitor
  labels:
    release: monitoring
spec:
  endpoints:
  - honorLabels: true
    interval: 30s
    path: /opa/metrics
    port: opa-metrics
    scheme: http
    scrapeTimeout: 10s
  - honorLabels: true
    interval: 30s
    path: /stats/prometheus
    port: envoy-metrics
    scheme: http
    scrapeTimeout: 10s
  jobLabel: notification
  selector:
    matchLabels:
      app.kubernetes.io/name: notification
---
# Source: learnbb/charts/userorg/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: userorg-servicemonitor
  labels:
    release: monitoring
spec:
  endpoints:
  - honorLabels: true
    interval: 30s
    path: /opa/metrics
    port: opa-metrics
    scheme: http
    scrapeTimeout: 10s
  - honorLabels: true
    interval: 30s
    path: /stats/prometheus
    port: envoy-metrics
    scheme: http
    scrapeTimeout: 10s
  jobLabel: userorg
  selector:
    matchLabels:
      app.kubernetes.io/name: userorg

